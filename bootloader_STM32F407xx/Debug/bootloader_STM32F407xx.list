
bootloader_STM32F407xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f8  080041f8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004200  08004200  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000078  08004280  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004280  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009453  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b99  00000000  00000000  000294fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002b098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000209de  00000000  00000000  0002c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000779b  00000000  00000000  0004ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2b6c  00000000  00000000  00054219  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116d85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002454  00000000  00000000  00116e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cec 	.word	0x08003cec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003cec 	.word	0x08003cec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 ffac 	bl	80014e0 <HAL_Init>

  SystemClock_Config();
 8000588:	f000 f8ca 	bl	8000720 <SystemClock_Config>

  MX_GPIO_Init();
 800058c:	f000 f99a 	bl	80008c4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000590:	f000 f930 	bl	80007f4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f942 	bl	800081c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000598:	f000 f96a 	bl	8000870 <MX_USART3_UART_Init>

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0 ) == GPIO_PIN_SET){
 800059c:	2101      	movs	r1, #1
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <main+0x48>)
 80005a0:	f001 fdac 	bl	80020fc <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d105      	bne.n	80005b6 <main+0x36>
	  printmsg("BL_DEBUG_MSG: Button pressed .. going to BL mode\n\r");
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <main+0x4c>)
 80005ac:	f000 f9b2 	bl	8000914 <printmsg>
	  bootloader_uart_read_data();
 80005b0:	f000 f810 	bl	80005d4 <bootloader_uart_read_data>
 80005b4:	e004      	b.n	80005c0 <main+0x40>
  }
  else{
	  printmsg("BL_DEBUG_MSG: Button is not pressed.. executing user app\n");
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <main+0x50>)
 80005b8:	f000 f9ac 	bl	8000914 <printmsg>
	  bootloader_jump_to_user_app();
 80005bc:	f000 f884 	bl	80006c8 <bootloader_jump_to_user_app>
 80005c0:	2300      	movs	r3, #0
  }

}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000
 80005cc:	08003d04 	.word	0x08003d04
 80005d0:	08003d38 	.word	0x08003d38

080005d4 <bootloader_uart_read_data>:

void bootloader_uart_read_data(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0

	uint8_t rcv_len = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]

	while(1){

		memset(bl_rx_buffer, 0, 200);
 80005de:	22c8      	movs	r2, #200	; 0xc8
 80005e0:	2100      	movs	r1, #0
 80005e2:	4835      	ldr	r0, [pc, #212]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 80005e4:	f002 ff74 	bl	80034d0 <memset>
		// read only one byte form the host, which is the length field of the command packet
		HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2201      	movs	r2, #1
 80005ee:	4932      	ldr	r1, [pc, #200]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 80005f0:	4832      	ldr	r0, [pc, #200]	; (80006bc <bootloader_uart_read_data+0xe8>)
 80005f2:	f002 fad7 	bl	8002ba4 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 80005f6:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
		// read the remaining bytes
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], (uint16_t) rcv_len, HAL_MAX_DELAY);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	492e      	ldr	r1, [pc, #184]	; (80006c0 <bootloader_uart_read_data+0xec>)
 8000606:	482d      	ldr	r0, [pc, #180]	; (80006bc <bootloader_uart_read_data+0xe8>)
 8000608:	f002 facc 	bl	8002ba4 <HAL_UART_Receive>
		switch(bl_rx_buffer[1]){
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	3b51      	subs	r3, #81	; 0x51
 8000612:	2b0b      	cmp	r3, #11
 8000614:	d84a      	bhi.n	80006ac <bootloader_uart_read_data+0xd8>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <bootloader_uart_read_data+0x48>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	0800064d 	.word	0x0800064d
 8000620:	08000655 	.word	0x08000655
 8000624:	0800065d 	.word	0x0800065d
 8000628:	08000665 	.word	0x08000665
 800062c:	0800066d 	.word	0x0800066d
 8000630:	08000675 	.word	0x08000675
 8000634:	0800067d 	.word	0x0800067d
 8000638:	08000685 	.word	0x08000685
 800063c:	0800068d 	.word	0x0800068d
 8000640:	08000695 	.word	0x08000695
 8000644:	0800069d 	.word	0x0800069d
 8000648:	080006a5 	.word	0x080006a5
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 800064e:	f000 fad9 	bl	8000c04 <bootloader_handle_getver_cmd>
				break;
 8000652:	e02f      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 8000656:	f000 fb1d 	bl	8000c94 <bootloader_handle_gethelp_cmd>
				break;
 800065a:	e02b      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
 800065c:	4816      	ldr	r0, [pc, #88]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 800065e:	f000 fb55 	bl	8000d0c <bootloader_handle_getcid_cmd>
				break;
 8000662:	e027      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000664:	4814      	ldr	r0, [pc, #80]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 8000666:	f000 fb9b 	bl	8000da0 <bootloader_handle_getrdp_cmd>
				break;
 800066a:	e023      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 800066e:	f000 fbe1 	bl	8000e34 <bootloader_handle_go_cmd>
				break;
 8000672:	e01f      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 8000676:	f000 fc47 	bl	8000f08 <bootloader_handle_flash_erase_cmd>
				break;
 800067a:	e01b      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
 800067c:	480e      	ldr	r0, [pc, #56]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 800067e:	f000 fcad 	bl	8000fdc <bootloader_handle_mem_write_cmd>
				break;
 8000682:	e017      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_EN_RW_PROTECT:
				bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 8000686:	f000 fd31 	bl	80010ec <bootloader_handle_en_rw_protect>
				break;
 800068a:	e013      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_MEM_READ:
				bootloader_handle_mem_read(bl_rx_buffer);
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 800068e:	f000 fd37 	bl	8001100 <bootloader_handle_mem_read>
				break;
 8000692:	e00f      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_READ_SECTOR_P_STATUS:
				bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 8000696:	f000 fd3d 	bl	8001114 <bootloader_handle_read_sector_protection_status>
				break;
 800069a:	e00b      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_OTP_READ:
				bootloader_handle_read_otp(bl_rx_buffer);
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 800069e:	f000 fd8d 	bl	80011bc <bootloader_handle_read_otp>
				break;
 80006a2:	e007      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			case BL_DIS_R_W_PROTECT:
				bootloader_handle_dis_rw_protect(bl_rx_buffer);
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <bootloader_uart_read_data+0xe4>)
 80006a6:	f000 fd93 	bl	80011d0 <bootloader_handle_dis_rw_protect>
				break;
 80006aa:	e003      	b.n	80006b4 <bootloader_uart_read_data+0xe0>
			 default:
				printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <bootloader_uart_read_data+0xf0>)
 80006ae:	f000 f931 	bl	8000914 <printmsg>
				break;
 80006b2:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80006b4:	e793      	b.n	80005de <bootloader_uart_read_data+0xa>
 80006b6:	bf00      	nop
 80006b8:	20000128 	.word	0x20000128
 80006bc:	200000e8 	.word	0x200000e8
 80006c0:	20000129 	.word	0x20000129
 80006c4:	08003d74 	.word	0x08003d74

080006c8 <bootloader_jump_to_user_app>:
		}
	}

}

void bootloader_jump_to_user_app(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	//just a function pointer to hold the address of the reset handler of the user app.
	void (*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 80006ce:	480f      	ldr	r0, [pc, #60]	; (800070c <bootloader_jump_to_user_app+0x44>)
 80006d0:	f000 f920 	bl	8000914 <printmsg>


	// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <bootloader_jump_to_user_app+0x48>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 80006da:	68f9      	ldr	r1, [r7, #12]
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <bootloader_jump_to_user_app+0x4c>)
 80006de:	f000 f919 	bl	8000914 <printmsg>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f383 8808 	msr	MSP, r3
	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <bootloader_jump_to_user_app+0x50>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	4808      	ldr	r0, [pc, #32]	; (800071c <bootloader_jump_to_user_app+0x54>)
 80006fa:	f000 f90b 	bl	8000914 <printmsg>

	//3. jump to reset handler of the user application
	app_reset_handler();
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4798      	blx	r3
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	08003dac 	.word	0x08003dac
 8000710:	08008000 	.word	0x08008000
 8000714:	08003dd8 	.word	0x08003dd8
 8000718:	08008004 	.word	0x08008004
 800071c:	08003df8 	.word	0x08003df8

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fece 	bl	80034d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	; (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000790:	2310      	movs	r3, #16
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000794:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800079a:	2304      	movs	r3, #4
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fcda 	bl	8002160 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x96>
    Error_Handler();
 80007b2:	f000 f8d5 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 ff34 	bl	8002640 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 f8bf 	bl	8000960 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	; 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_CRC_Init+0x20>)
 80007fa:	4a07      	ldr	r2, [pc, #28]	; (8000818 <MX_CRC_Init+0x24>)
 80007fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_CRC_Init+0x20>)
 8000800:	f000 ffc5 	bl	800178e <HAL_CRC_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800080a:	f000 f8a9 	bl	8000960 <Error_Handler>
  }

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000e0 	.word	0x200000e0
 8000818:	40023000 	.word	0x40023000

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART2_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000854:	f002 f8c0 	bl	80029d8 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f87f 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000e8 	.word	0x200000e8
 800086c:	40004400 	.word	0x40004400

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MX_USART3_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USART3_UART_Init+0x4c>)
 80008a8:	f002 f896 	bl	80029d8 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008b2:	f000 f855 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000a0 	.word	0x200000a0
 80008c0:	40004800 	.word	0x40004800

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_GPIO_Init+0x4c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <MX_GPIO_Init+0x4c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_GPIO_Init+0x4c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_GPIO_Init+0x4c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <MX_GPIO_Init+0x4c>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_GPIO_Init+0x4c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <printmsg>:

/* prints formatted string to console over UART */
void printmsg(char *format,...){
 8000914:	b40f      	push	{r0, r1, r2, r3}
 8000916:	b580      	push	{r7, lr}
 8000918:	b096      	sub	sp, #88	; 0x58
 800091a:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 800091c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000920:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fdee 	bl	800350c <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fc4b 	bl	80001d0 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	f107 0108 	add.w	r1, r7, #8
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <printmsg+0x48>)
 8000948:	f002 f893 	bl	8002a72 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 800094c:	bf00      	nop
 800094e:	3758      	adds	r7, #88	; 0x58
 8000950:	46bd      	mov	sp, r7
 8000952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000956:	b004      	add	sp, #16
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	200000a0 	.word	0x200000a0

08000960 <Error_Handler>:

void Error_Handler(void){
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	while(1);
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x4>
	...

08000968 <bootloader_send_ack>:
}

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len){
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	460a      	mov	r2, r1
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000978:	23a5      	movs	r3, #165	; 0xa5
 800097a:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, ack_buf, 2, HAL_MAX_DELAY);
 8000980:	f107 010c 	add.w	r1, r7, #12
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	2202      	movs	r2, #2
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <bootloader_send_ack+0x30>)
 800098c:	f002 f871 	bl	8002a72 <HAL_UART_Transmit>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000e8 	.word	0x200000e8

0800099c <bootloader_send_nack>:

void bootloader_send_nack(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 80009a2:	237f      	movs	r3, #127	; 0x7f
 80009a4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, &nack, 1, HAL_MAX_DELAY);
 80009a6:	1df9      	adds	r1, r7, #7
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	2201      	movs	r2, #1
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <bootloader_send_nack+0x20>)
 80009b0:	f002 f85f 	bl	8002a72 <HAL_UART_Transmit>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000e8 	.word	0x200000e8

080009c0 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]

	uint32_t uwCRCValue = 0xff;
 80009cc:	23ff      	movs	r3, #255	; 0xff
 80009ce:	61fb      	str	r3, [r7, #28]

	for(uint32_t i=0; i<len;i++){
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
 80009d4:	e00f      	b.n	80009f6 <bootloader_verify_crc+0x36>
		uint32_t i_data = pData[i];
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2201      	movs	r2, #1
 80009e6:	4619      	mov	r1, r3
 80009e8:	480e      	ldr	r0, [pc, #56]	; (8000a24 <bootloader_verify_crc+0x64>)
 80009ea:	f000 feec 	bl	80017c6 <HAL_CRC_Accumulate>
 80009ee:	61f8      	str	r0, [r7, #28]
	for(uint32_t i=0; i<len;i++){
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	3301      	adds	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3eb      	bcc.n	80009d6 <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <bootloader_verify_crc+0x64>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <bootloader_verify_crc+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f042 0201 	orr.w	r2, r2, #1
 8000a0c:	609a      	str	r2, [r3, #8]

	if(uwCRCValue == crc_host){
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d101      	bne.n	8000a1a <bootloader_verify_crc+0x5a>
		return VERIFY_CRC_SUCCESS;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <bootloader_verify_crc+0x5c>
	}
	return VERIFY_CRC_FAIL;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000e0 	.word	0x200000e0

08000a28 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(){
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
	uint16_t cid = (uint16_t) (DBGMCU->IDCODE) & 0x0FFF;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <get_mcu_chip_id+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a38:	80fb      	strh	r3, [r7, #6]
	return cid;
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e0042000 	.word	0xe0042000

08000a4c <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0

	uint8_t rdp_status = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	71fb      	strb	r3, [r7, #7]
# if 0
	FLASH_OBProgramInitTypeDef ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t) ob_handle.rdp_status;
#else
	volatile uint32_t *pOB_addr = (uint32_t *) 0x1FFFC000;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <get_flash_rdp_level+0x24>)
 8000a58:	603b      	str	r3, [r7, #0]
	rdp_status = (uint8_t)(*pOB_addr >> 8);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	0a1b      	lsrs	r3, r3, #8
 8000a60:	71fb      	strb	r3, [r7, #7]
#endif
	return rdp_status;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	1fffc000 	.word	0x1fffc000

08000a74 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address){
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a82:	d305      	bcc.n	8000a90 <verify_address+0x1c>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <verify_address+0x68>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d801      	bhi.n	8000a90 <verify_address+0x1c>
		return ADDR_VALID;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e01e      	b.n	8000ace <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <verify_address+0x6c>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d905      	bls.n	8000aa4 <verify_address+0x30>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <verify_address+0x70>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d801      	bhi.n	8000aa4 <verify_address+0x30>
		return ADDR_VALID;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e014      	b.n	8000ace <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000aaa:	d305      	bcc.n	8000ab8 <verify_address+0x44>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000ab2:	d201      	bcs.n	8000ab8 <verify_address+0x44>
		return ADDR_VALID;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e00a      	b.n	8000ace <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <verify_address+0x74>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d905      	bls.n	8000acc <verify_address+0x58>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <verify_address+0x78>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d801      	bhi.n	8000acc <verify_address+0x58>
		return ADDR_VALID;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e000      	b.n	8000ace <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2001c000 	.word	0x2001c000
 8000ae0:	2001bfff 	.word	0x2001bfff
 8000ae4:	20020000 	.word	0x20020000
 8000ae8:	40023fff 	.word	0x40023fff
 8000aec:	40025000 	.word	0x40025000

08000af0 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	4613      	mov	r3, r2
 8000afe:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 12 )
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	2b0c      	cmp	r3, #12
 8000b04:	d901      	bls.n	8000b0a <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000b06:	2304      	movs	r3, #4
 8000b08:	e035      	b.n	8000b76 <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 11) )
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2bff      	cmp	r3, #255	; 0xff
 8000b0e:	d002      	beq.n	8000b16 <execute_flash_erase+0x26>
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b0b      	cmp	r3, #11
 8000b14:	d82e      	bhi.n	8000b74 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2bff      	cmp	r3, #255	; 0xff
 8000b1a:	d102      	bne.n	8000b22 <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	e012      	b.n	8000b48 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 12 - sector_number;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f1c3 030c 	rsb	r3, r3, #12
 8000b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           if( number_of_sector > remanining_sector){
 8000b2c:	79ba      	ldrb	r2, [r7, #6]
 8000b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d902      	bls.n	8000b3c <execute_flash_erase+0x4c>
           	number_of_sector = remanining_sector;
 8000b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b3a:	71bb      	strb	r3, [r7, #6]
           }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8000b4c:	f000 feba 	bl	80018c4 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000b54:	f107 020c 	add.w	r2, r7, #12
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f810 	bl	8001b84 <HAL_FLASHEx_Erase>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8000b6a:	f000 fecd 	bl	8001908 <HAL_FLASH_Lock>

		return status;
 8000b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b72:	e000      	b.n	8000b76 <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 8000b74:	2304      	movs	r3, #4
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <execute_mem_write>:

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len){
 8000b7e:	b590      	push	{r4, r7, lr}
 8000b80:	b087      	sub	sp, #28
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]

	uint8_t status = HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	75fb      	strb	r3, [r7, #23]

	HAL_FLASH_Unlock();
 8000b8e:	f000 fe99 	bl	80018c4 <HAL_FLASH_Unlock>

	for(uint32_t i=0;i<len;i++){
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	e013      	b.n	8000bc0 <execute_mem_write+0x42>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i, pBuffer[i]);
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	18d1      	adds	r1, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f04f 0400 	mov.w	r4, #0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4623      	mov	r3, r4
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 fe33 	bl	800181c <HAL_FLASH_Program>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i=0;i<len;i++){
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3e7      	bcc.n	8000b98 <execute_mem_write+0x1a>
	}
	HAL_FLASH_Lock();
 8000bc8:	f000 fe9e 	bl	8001908 <HAL_FLASH_Lock>
	return status;
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
	...

08000bd8 <check_sector_status>:

uint16_t check_sector_status(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

	uint16_t status = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	80fb      	strh	r3, [r7, #6]

	HAL_FLASH_Unlock();
 8000be2:	f000 fe6f 	bl	80018c4 <HAL_FLASH_Unlock>
	status = (FLASH->OPTCR >> 16) & 0x00FF;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <check_sector_status+0x28>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	0c1b      	lsrs	r3, r3, #16
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Lock();
 8000bf2:	f000 fe89 	bl	8001908 <HAL_FLASH_Lock>

	return status;
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <bootloader_handle_getver_cmd>:

/**********************************Implementation of Bootloader Command Handle functions **************************************/
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

	uint8_t bl_version;

	// 1) verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd\n");
 8000c0c:	481d      	ldr	r0, [pc, #116]	; (8000c84 <bootloader_handle_getver_cmd+0x80>)
 8000c0e:	f7ff fe81 	bl	8000914 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]

	// extract the CRC32 sent by the host
	uint32_t host_crc = *( (uint32_t*) (bl_rx_buffer + command_packet_len - 4) );
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3b04      	subs	r3, #4
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	613b      	str	r3, [r7, #16]

	if( !bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3b04      	subs	r3, #4
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fec6 	bl	80009c0 <bootloader_verify_crc>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d11a      	bne.n	8000c70 <bootloader_handle_getver_cmd+0x6c>
		printmsg("BL_DEBUG_MSG: checksum success !!\n");
 8000c3a:	4813      	ldr	r0, [pc, #76]	; (8000c88 <bootloader_handle_getver_cmd+0x84>)
 8000c3c:	f7ff fe6a 	bl	8000914 <printmsg>
		//check sum is correct...
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fe8e 	bl	8000968 <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000c4c:	f000 fade 	bl	800120c <get_bootloader_version>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: BL_VER : %d %#x\n", bl_version, bl_version);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	4619      	mov	r1, r3
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <bootloader_handle_getver_cmd+0x88>)
 8000c5e:	f7ff fe59 	bl	8000914 <printmsg>
		bootloader_uart_write_data(&bl_version, 1);
 8000c62:	f107 030f 	add.w	r3, r7, #15
 8000c66:	2101      	movs	r1, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fabb 	bl	80011e4 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG:checksum fail!!\n");
		//checksum is wrong send back
		bootloader_send_nack();
	}

}
 8000c6e:	e004      	b.n	8000c7a <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG:checksum fail!!\n");
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <bootloader_handle_getver_cmd+0x8c>)
 8000c72:	f7ff fe4f 	bl	8000914 <printmsg>
		bootloader_send_nack();
 8000c76:	f7ff fe91 	bl	800099c <bootloader_send_nack>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08003e24 	.word	0x08003e24
 8000c88:	08003e50 	.word	0x08003e50
 8000c8c:	08003e74 	.word	0x08003e74
 8000c90:	08003e94 	.word	0x08003e94

08000c94 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *pBuffer){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

	// 1) verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_gethelp_cmd\n");
 8000c9c:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <bootloader_handle_gethelp_cmd+0x64>)
 8000c9e:	f7ff fe39 	bl	8000914 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <bootloader_handle_gethelp_cmd+0x68>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]

	// extract the CRC32 sent by the host
	uint32_t host_crc = *( (uint32_t*) (bl_rx_buffer + command_packet_len - 4) );
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3b04      	subs	r3, #4
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <bootloader_handle_gethelp_cmd+0x68>)
 8000cb0:	4413      	add	r3, r2
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60bb      	str	r3, [r7, #8]

	if( !bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b04      	subs	r3, #4
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <bootloader_handle_gethelp_cmd+0x68>)
 8000cc0:	f7ff fe7e 	bl	80009c0 <bootloader_verify_crc>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10d      	bne.n	8000ce6 <bootloader_handle_gethelp_cmd+0x52>
		printmsg("BL_DEBUG_MSG: checksum success !!\n");
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <bootloader_handle_gethelp_cmd+0x6c>)
 8000ccc:	f7ff fe22 	bl	8000914 <printmsg>
		//check sum is correct...
		bootloader_send_ack(pBuffer[0], sizeof(supported_commands));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fe46 	bl	8000968 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands, sizeof(supported_commands));
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <bootloader_handle_gethelp_cmd+0x70>)
 8000ce0:	f000 fa80 	bl	80011e4 <bootloader_uart_write_data>
	}else{
		printmsg("BL_DEBUG_MSG:checksum fail!!\n");
		//checksum is wrong send back
		bootloader_send_nack();
	}
}
 8000ce4:	e004      	b.n	8000cf0 <bootloader_handle_gethelp_cmd+0x5c>
		printmsg("BL_DEBUG_MSG:checksum fail!!\n");
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <bootloader_handle_gethelp_cmd+0x74>)
 8000ce8:	f7ff fe14 	bl	8000914 <printmsg>
		bootloader_send_nack();
 8000cec:	f7ff fe56 	bl	800099c <bootloader_send_nack>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08003eb4 	.word	0x08003eb4
 8000cfc:	20000128 	.word	0x20000128
 8000d00:	08003e50 	.word	0x08003e50
 8000d04:	20000000 	.word	0x20000000
 8000d08:	08003e94 	.word	0x08003e94

08000d0c <bootloader_handle_getcid_cmd>:
void bootloader_handle_getcid_cmd(uint8_t *pBuffer){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

	uint16_t bl_cid_num;

	// 1) verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_getcid_cmd\n");
 8000d14:	481d      	ldr	r0, [pc, #116]	; (8000d8c <bootloader_handle_getcid_cmd+0x80>)
 8000d16:	f7ff fdfd 	bl	8000914 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <bootloader_handle_getcid_cmd+0x84>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]

	// extract the CRC32 sent by the host
	uint32_t host_crc = *( (uint32_t*) (bl_rx_buffer + command_packet_len - 4) );
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3b04      	subs	r3, #4
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <bootloader_handle_getcid_cmd+0x84>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	613b      	str	r3, [r7, #16]

	if( !bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3b04      	subs	r3, #4
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4816      	ldr	r0, [pc, #88]	; (8000d90 <bootloader_handle_getcid_cmd+0x84>)
 8000d38:	f7ff fe42 	bl	80009c0 <bootloader_verify_crc>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d11a      	bne.n	8000d78 <bootloader_handle_getcid_cmd+0x6c>
		printmsg("BL_DEBUG_MSG: checksum success !!\n");
 8000d42:	4814      	ldr	r0, [pc, #80]	; (8000d94 <bootloader_handle_getcid_cmd+0x88>)
 8000d44:	f7ff fde6 	bl	8000914 <printmsg>
		//check sum is correct...
		bootloader_send_ack(bl_rx_buffer[0], sizeof(uint16_t));
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <bootloader_handle_getcid_cmd+0x84>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe0a 	bl	8000968 <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000d54:	f7ff fe68 	bl	8000a28 <get_mcu_chip_id>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG: BL_VER : %d %#x\n", bl_cid_num, bl_cid_num);
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	461a      	mov	r2, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <bootloader_handle_getcid_cmd+0x8c>)
 8000d66:	f7ff fdd5 	bl	8000914 <printmsg>
		bootloader_uart_write_data( (uint8_t*) &bl_cid_num, sizeof(uint16_t));
 8000d6a:	f107 030e 	add.w	r3, r7, #14
 8000d6e:	2102      	movs	r1, #2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fa37 	bl	80011e4 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG:checksum fail!!\n");
		//checksum is wrong send back
		bootloader_send_nack();
	}

}
 8000d76:	e004      	b.n	8000d82 <bootloader_handle_getcid_cmd+0x76>
		printmsg("BL_DEBUG_MSG:checksum fail!!\n");
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <bootloader_handle_getcid_cmd+0x90>)
 8000d7a:	f7ff fdcb 	bl	8000914 <printmsg>
		bootloader_send_nack();
 8000d7e:	f7ff fe0d 	bl	800099c <bootloader_send_nack>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	08003ee4 	.word	0x08003ee4
 8000d90:	20000128 	.word	0x20000128
 8000d94:	08003e50 	.word	0x08003e50
 8000d98:	08003e74 	.word	0x08003e74
 8000d9c:	08003e94 	.word	0x08003e94

08000da0 <bootloader_handle_getrdp_cmd>:
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

	uint8_t rdp_level;

	// 1) verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_getrdp_cmd\n");
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <bootloader_handle_getrdp_cmd+0x80>)
 8000daa:	f7ff fdb3 	bl	8000914 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <bootloader_handle_getrdp_cmd+0x84>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]

	// extract the CRC32 sent by the host
	uint32_t host_crc = *( (uint32_t*) (bl_rx_buffer + command_packet_len - 4) );
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3b04      	subs	r3, #4
 8000dba:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <bootloader_handle_getrdp_cmd+0x84>)
 8000dbc:	4413      	add	r3, r2
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	613b      	str	r3, [r7, #16]

	if( !bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3b04      	subs	r3, #4
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <bootloader_handle_getrdp_cmd+0x84>)
 8000dcc:	f7ff fdf8 	bl	80009c0 <bootloader_verify_crc>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d11a      	bne.n	8000e0c <bootloader_handle_getrdp_cmd+0x6c>
		printmsg("BL_DEBUG_MSG: checksum success !!\n");
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <bootloader_handle_getrdp_cmd+0x88>)
 8000dd8:	f7ff fd9c 	bl	8000914 <printmsg>
		//check sum is correct...
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <bootloader_handle_getrdp_cmd+0x84>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fdc0 	bl	8000968 <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000de8:	f7ff fe30 	bl	8000a4c <get_flash_rdp_level>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: RDP level : %d %#x\n", rdp_level, rdp_level);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4619      	mov	r1, r3
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	461a      	mov	r2, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <bootloader_handle_getrdp_cmd+0x8c>)
 8000dfa:	f7ff fd8b 	bl	8000914 <printmsg>
		bootloader_uart_write_data(&rdp_level, 1);
 8000dfe:	f107 030f 	add.w	r3, r7, #15
 8000e02:	2101      	movs	r1, #1
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f9ed 	bl	80011e4 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG:checksum fail!!\n");
		//checksum is wrong send back
		bootloader_send_nack();
	}

}
 8000e0a:	e004      	b.n	8000e16 <bootloader_handle_getrdp_cmd+0x76>
		printmsg("BL_DEBUG_MSG:checksum fail!!\n");
 8000e0c:	4808      	ldr	r0, [pc, #32]	; (8000e30 <bootloader_handle_getrdp_cmd+0x90>)
 8000e0e:	f7ff fd81 	bl	8000914 <printmsg>
		bootloader_send_nack();
 8000e12:	f7ff fdc3 	bl	800099c <bootloader_send_nack>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	08003f10 	.word	0x08003f10
 8000e24:	20000128 	.word	0x20000128
 8000e28:	08003e50 	.word	0x08003e50
 8000e2c:	08003f3c 	.word	0x08003f3c
 8000e30:	08003e94 	.word	0x08003e94

08000e34 <bootloader_handle_go_cmd>:
void bootloader_handle_go_cmd(uint8_t *pBuffer){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

	uint32_t go_address=0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
	uint8_t addr_valid = ADDR_VALID;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_invalid = ADDR_INVALID;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73bb      	strb	r3, [r7, #14]

	printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000e48:	4828      	ldr	r0, [pc, #160]	; (8000eec <bootloader_handle_go_cmd+0xb8>)
 8000e4a:	f7ff fd63 	bl	8000914 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <bootloader_handle_go_cmd+0xbc>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	3b04      	subs	r3, #4
 8000e5a:	4a25      	ldr	r2, [pc, #148]	; (8000ef0 <bootloader_handle_go_cmd+0xbc>)
 8000e5c:	4413      	add	r3, r2
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)){
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	3b04      	subs	r3, #4
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <bootloader_handle_go_cmd+0xbc>)
 8000e6c:	f7ff fda8 	bl	80009c0 <bootloader_verify_crc>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d131      	bne.n	8000eda <bootloader_handle_go_cmd+0xa6>
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e76:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <bootloader_handle_go_cmd+0xc0>)
 8000e78:	f7ff fd4c 	bl	8000914 <printmsg>

		bootloader_send_ack(pBuffer[0],1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fd70 	bl	8000968 <bootloader_send_ack>

		//extract the go address
		go_address = *((uint32_t *)&pBuffer[2] );
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e8e:	61fb      	str	r3, [r7, #28]
		printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000e90:	69f9      	ldr	r1, [r7, #28]
 8000e92:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <bootloader_handle_go_cmd+0xc4>)
 8000e94:	f7ff fd3e 	bl	8000914 <printmsg>

		if( verify_address(go_address) == ADDR_VALID ){
 8000e98:	69f8      	ldr	r0, [r7, #28]
 8000e9a:	f7ff fdeb 	bl	8000a74 <verify_address>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d110      	bne.n	8000ec6 <bootloader_handle_go_cmd+0x92>
			//tell host that address is fine
			bootloader_uart_write_data(&addr_valid,1);
 8000ea4:	f107 030f 	add.w	r3, r7, #15
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f99a 	bl	80011e4 <bootloader_uart_write_data>
			Its not the duty of bootloader. so just trust and jump */

			/* Not doing the below line will result in hardfault exception for ARM cortex M */
			//watch : https://www.youtube.com/watch?v=VX_12SjnNhY

			go_address+=1; //make T bit =1
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	61fb      	str	r3, [r7, #28]

			void (*lets_jump)(void) = (void *)go_address;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	613b      	str	r3, [r7, #16]

			printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000eba:	4810      	ldr	r0, [pc, #64]	; (8000efc <bootloader_handle_go_cmd+0xc8>)
 8000ebc:	f7ff fd2a 	bl	8000914 <printmsg>

			lets_jump();
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4798      	blx	r3
	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}

}
 8000ec4:	e00e      	b.n	8000ee4 <bootloader_handle_go_cmd+0xb0>
			printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <bootloader_handle_go_cmd+0xcc>)
 8000ec8:	f7ff fd24 	bl	8000914 <printmsg>
			bootloader_uart_write_data(&addr_invalid,1);
 8000ecc:	f107 030e 	add.w	r3, r7, #14
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f986 	bl	80011e4 <bootloader_uart_write_data>
}
 8000ed8:	e004      	b.n	8000ee4 <bootloader_handle_go_cmd+0xb0>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000eda:	480a      	ldr	r0, [pc, #40]	; (8000f04 <bootloader_handle_go_cmd+0xd0>)
 8000edc:	f7ff fd1a 	bl	8000914 <printmsg>
		bootloader_send_nack();
 8000ee0:	f7ff fd5c 	bl	800099c <bootloader_send_nack>
}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	08003f60 	.word	0x08003f60
 8000ef0:	20000128 	.word	0x20000128
 8000ef4:	08003f88 	.word	0x08003f88
 8000ef8:	08003fac 	.word	0x08003fac
 8000efc:	08003fc8 	.word	0x08003fc8
 8000f00:	08003ff0 	.word	0x08003ff0
 8000f04:	08004014 	.word	0x08004014

08000f08 <bootloader_handle_flash_erase_cmd>:
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	uint8_t erase_status = 0x00;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000f14:	482a      	ldr	r0, [pc, #168]	; (8000fc0 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000f16:	f7ff fcfd 	bl	8000914 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3b04      	subs	r3, #4
 8000f26:	4a27      	ldr	r2, [pc, #156]	; (8000fc4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f28:	4413      	add	r3, r2
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3b04      	subs	r3, #4
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4823      	ldr	r0, [pc, #140]	; (8000fc4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f38:	f7ff fd42 	bl	80009c0 <bootloader_verify_crc>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d135      	bne.n	8000fae <bootloader_handle_flash_erase_cmd+0xa6>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000f42:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000f44:	f7ff fce6 	bl	8000914 <printmsg>
		bootloader_send_ack(pBuffer[0],1);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fd0a 	bl	8000968 <bootloader_send_ack>
		printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3302      	adds	r3, #2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3303      	adds	r3, #3
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4819      	ldr	r0, [pc, #100]	; (8000fcc <bootloader_handle_flash_erase_cmd+0xc4>)
 8000f66:	f7ff fcd5 	bl	8000914 <printmsg>

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f70:	f001 f8dc 	bl	800212c <HAL_GPIO_WritePin>
		erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3302      	adds	r3, #2
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f7ff fdb4 	bl	8000af0 <execute_flash_erase>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2120      	movs	r1, #32
 8000f90:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f92:	f001 f8cb 	bl	800212c <HAL_GPIO_WritePin>

		printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000f9c:	f7ff fcba 	bl	8000914 <printmsg>

		bootloader_uart_write_data(&erase_status,1);
 8000fa0:	f107 030f 	add.w	r3, r7, #15
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f91c 	bl	80011e4 <bootloader_uart_write_data>

	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000fac:	e004      	b.n	8000fb8 <bootloader_handle_flash_erase_cmd+0xb0>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000fb0:	f7ff fcb0 	bl	8000914 <printmsg>
		bootloader_send_nack();
 8000fb4:	f7ff fcf2 	bl	800099c <bootloader_send_nack>
}
 8000fb8:	bf00      	nop
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	08004034 	.word	0x08004034
 8000fc4:	20000128 	.word	0x20000128
 8000fc8:	08003f88 	.word	0x08003f88
 8000fcc:	08004064 	.word	0x08004064
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	08004098 	.word	0x08004098
 8000fd8:	08004014 	.word	0x08004014

08000fdc <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *pBuffer){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid 		= ADDR_VALID;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status 	= 0x00;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum = 0, len = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	77bb      	strb	r3, [r7, #30]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	799b      	ldrb	r3, [r3, #6]
 8000ffe:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) (&pBuffer[2]));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001006:	61bb      	str	r3, [r7, #24]
	chksum = pBuffer[len];
 8001008:	7f7b      	ldrb	r3, [r7, #29]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	77bb      	strb	r3, [r7, #30]

	printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8001012:	482e      	ldr	r0, [pc, #184]	; (80010cc <bootloader_handle_mem_write_cmd+0xf0>)
 8001014:	f7ff fc7e 	bl	8000914 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <bootloader_handle_mem_write_cmd+0xf4>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) );
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3b04      	subs	r3, #4
 8001024:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <bootloader_handle_mem_write_cmd+0xf4>)
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)){
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3b04      	subs	r3, #4
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4619      	mov	r1, r3
 8001034:	4826      	ldr	r0, [pc, #152]	; (80010d0 <bootloader_handle_mem_write_cmd+0xf4>)
 8001036:	f7ff fcc3 	bl	80009c0 <bootloader_verify_crc>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d13b      	bne.n	80010b8 <bootloader_handle_mem_write_cmd+0xdc>

	        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8001040:	4824      	ldr	r0, [pc, #144]	; (80010d4 <bootloader_handle_mem_write_cmd+0xf8>)
 8001042:	f7ff fc67 	bl	8000914 <printmsg>

	        bootloader_send_ack(pBuffer[0],1);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fc8b 	bl	8000968 <bootloader_send_ack>

	        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	4820      	ldr	r0, [pc, #128]	; (80010d8 <bootloader_handle_mem_write_cmd+0xfc>)
 8001056:	f7ff fc5d 	bl	8000914 <printmsg>

			if( verify_address(mem_address) == ADDR_VALID ){
 800105a:	69b8      	ldr	r0, [r7, #24]
 800105c:	f7ff fd0a 	bl	8000a74 <verify_address>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d11c      	bne.n	80010a0 <bootloader_handle_mem_write_cmd+0xc4>

	            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8001066:	481d      	ldr	r0, [pc, #116]	; (80010dc <bootloader_handle_mem_write_cmd+0x100>)
 8001068:	f7ff fc54 	bl	8000914 <printmsg>

	            //glow the led to indicate bootloader is currently writing to memory
	            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2120      	movs	r1, #32
 8001070:	481b      	ldr	r0, [pc, #108]	; (80010e0 <bootloader_handle_mem_write_cmd+0x104>)
 8001072:	f001 f85b 	bl	800212c <HAL_GPIO_WritePin>
	            //execute mem write
	            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3307      	adds	r3, #7
 800107a:	7f3a      	ldrb	r2, [r7, #28]
 800107c:	69b9      	ldr	r1, [r7, #24]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd7d 	bl	8000b7e <execute_mem_write>
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
	            //turn off the led to indicate memory write is over
	            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2120      	movs	r1, #32
 800108c:	4814      	ldr	r0, [pc, #80]	; (80010e0 <bootloader_handle_mem_write_cmd+0x104>)
 800108e:	f001 f84d 	bl	800212c <HAL_GPIO_WritePin>

	            //inform host about the status
	            bootloader_uart_write_data(&write_status,1);
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	2101      	movs	r1, #1
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f8a3 	bl	80011e4 <bootloader_uart_write_data>

		}else{
	        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
	        bootloader_send_nack();
		}
}
 800109e:	e010      	b.n	80010c2 <bootloader_handle_mem_write_cmd+0xe6>
	            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 80010a0:	4810      	ldr	r0, [pc, #64]	; (80010e4 <bootloader_handle_mem_write_cmd+0x108>)
 80010a2:	f7ff fc37 	bl	8000914 <printmsg>
	            write_status = ADDR_INVALID;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
	            bootloader_uart_write_data(&write_status,1);
 80010aa:	f107 030f 	add.w	r3, r7, #15
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f897 	bl	80011e4 <bootloader_uart_write_data>
}
 80010b6:	e004      	b.n	80010c2 <bootloader_handle_mem_write_cmd+0xe6>
	        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <bootloader_handle_mem_write_cmd+0x10c>)
 80010ba:	f7ff fc2b 	bl	8000914 <printmsg>
	        bootloader_send_nack();
 80010be:	f7ff fc6d 	bl	800099c <bootloader_send_nack>
}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	080040c0 	.word	0x080040c0
 80010d0:	20000128 	.word	0x20000128
 80010d4:	08003f88 	.word	0x08003f88
 80010d8:	080040f0 	.word	0x080040f0
 80010dc:	08004118 	.word	0x08004118
 80010e0:	40020000 	.word	0x40020000
 80010e4:	08004140 	.word	0x08004140
 80010e8:	08004014 	.word	0x08004014

080010ec <bootloader_handle_en_rw_protect>:

void bootloader_handle_en_rw_protect(uint8_t *pBuffer){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <bootloader_handle_mem_read>:
void bootloader_handle_mem_read (uint8_t *pBuffer){
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <bootloader_handle_read_sector_protection_status>:
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer){
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

	uint16_t status = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	81fb      	strh	r3, [r7, #14]

	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8001120:	4820      	ldr	r0, [pc, #128]	; (80011a4 <bootloader_handle_read_sector_protection_status+0x90>)
 8001122:	f7ff fbf7 	bl	8000914 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <bootloader_handle_read_sector_protection_status+0x94>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) );
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3b04      	subs	r3, #4
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <bootloader_handle_read_sector_protection_status+0x94>)
 8001134:	4413      	add	r3, r2
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)){
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3b04      	subs	r3, #4
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4619      	mov	r1, r3
 8001142:	4819      	ldr	r0, [pc, #100]	; (80011a8 <bootloader_handle_read_sector_protection_status+0x94>)
 8001144:	f7ff fc3c 	bl	80009c0 <bootloader_verify_crc>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d120      	bne.n	8001190 <bootloader_handle_read_sector_protection_status+0x7c>

		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800114e:	4817      	ldr	r0, [pc, #92]	; (80011ac <bootloader_handle_read_sector_protection_status+0x98>)
 8001150:	f7ff fbe0 	bl	8000914 <printmsg>

		bootloader_send_ack(pBuffer[0],1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fc04 	bl	8000968 <bootloader_send_ack>
		printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <bootloader_handle_read_sector_protection_status+0x9c>)
 8001162:	f7ff fbd7 	bl	8000914 <printmsg>

		//glow the led to indicate bootloader is currently writing to memory
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <bootloader_handle_read_sector_protection_status+0xa0>)
 800116c:	f000 ffde 	bl	800212c <HAL_GPIO_WritePin>
		//check status of each flash sector
		status = check_sector_status();
 8001170:	f7ff fd32 	bl	8000bd8 <check_sector_status>
 8001174:	4603      	mov	r3, r0
 8001176:	81fb      	strh	r3, [r7, #14]
		//turn off the led to indicate memory write is over
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2120      	movs	r1, #32
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <bootloader_handle_read_sector_protection_status+0xa0>)
 800117e:	f000 ffd5 	bl	800212c <HAL_GPIO_WritePin>

		//inform host about the status
		bootloader_uart_write_data((uint8_t*) &status,2);
 8001182:	f107 030e 	add.w	r3, r7, #14
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f82b 	bl	80011e4 <bootloader_uart_write_data>

		}else{
			printmsg("BL_DEBUG_MSG:checksum fail !!\n");
			bootloader_send_nack();
		}
}
 800118e:	e004      	b.n	800119a <bootloader_handle_read_sector_protection_status+0x86>
			printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8001190:	4809      	ldr	r0, [pc, #36]	; (80011b8 <bootloader_handle_read_sector_protection_status+0xa4>)
 8001192:	f7ff fbbf 	bl	8000914 <printmsg>
			bootloader_send_nack();
 8001196:	f7ff fc01 	bl	800099c <bootloader_send_nack>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	0800416c 	.word	0x0800416c
 80011a8:	20000128 	.word	0x20000128
 80011ac:	08003f88 	.word	0x08003f88
 80011b0:	08004118 	.word	0x08004118
 80011b4:	40020000 	.word	0x40020000
 80011b8:	08004014 	.word	0x08004014

080011bc <bootloader_handle_read_otp>:
void bootloader_handle_read_otp(uint8_t *pBuffer){
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <bootloader_handle_dis_rw_protect>:
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <bootloader_uart_write_data+0x24>)
 80011fa:	f001 fc3a 	bl	8002a72 <HAL_UART_Transmit>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200000e8 	.word	0x200000e8

0800120c <get_bootloader_version>:

// Returns the macro value
uint8_t get_bootloader_version(void){
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return (uint8_t) BL_VERSION;
 8001210:	2310      	movs	r3, #16
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_CRC_MspInit+0x3c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d10d      	bne.n	800129a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_CRC_MspInit+0x40>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_CRC_MspInit+0x40>)
 8001288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_CRC_MspInit+0x40>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023000 	.word	0x40023000
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a32      	ldr	r2, [pc, #200]	; (8001398 <HAL_UART_MspInit+0xe8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12c      	bne.n	800132c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_UART_MspInit+0xec>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a30      	ldr	r2, [pc, #192]	; (800139c <HAL_UART_MspInit+0xec>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <HAL_UART_MspInit+0xec>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <HAL_UART_MspInit+0xec>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a29      	ldr	r2, [pc, #164]	; (800139c <HAL_UART_MspInit+0xec>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <HAL_UART_MspInit+0xec>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800130a:	230c      	movs	r3, #12
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131a:	2307      	movs	r3, #7
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <HAL_UART_MspInit+0xf0>)
 8001326:	f000 fd4f 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800132a:	e031      	b.n	8001390 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <HAL_UART_MspInit+0xf4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12c      	bne.n	8001390 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_UART_MspInit+0xec>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_UART_MspInit+0xec>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_UART_MspInit+0xec>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_UART_MspInit+0xec>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_UART_MspInit+0xec>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_UART_MspInit+0xec>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800136e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001380:	2307      	movs	r3, #7
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 800138c:	f000 fd1c 	bl	8001dc8 <HAL_GPIO_Init>
}
 8001390:	bf00      	nop
 8001392:	3730      	adds	r7, #48	; 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40004400 	.word	0x40004400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40004800 	.word	0x40004800
 80013a8:	40020800 	.word	0x40020800

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001400:	f000 f8c0 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <_sbrk+0x50>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x16>
		heap_end = &end;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <_sbrk+0x50>)
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <_sbrk+0x54>)
 800141c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <_sbrk+0x50>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <_sbrk+0x50>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	466a      	mov	r2, sp
 800142e:	4293      	cmp	r3, r2
 8001430:	d907      	bls.n	8001442 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001432:	f002 f823 	bl	800347c <__errno>
 8001436:	4602      	mov	r2, r0
 8001438:	230c      	movs	r3, #12
 800143a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	e006      	b.n	8001450 <_sbrk+0x48>
	}

	heap_end += incr;
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <_sbrk+0x50>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a03      	ldr	r2, [pc, #12]	; (8001458 <_sbrk+0x50>)
 800144c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000094 	.word	0x20000094
 800145c:	20000218 	.word	0x20000218

08001460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <SystemInit+0x28>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <SystemInit+0x28>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SystemInit+0x28>)
 8001476:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147a:	609a      	str	r2, [r3, #8]
#endif
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001490:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001492:	e003      	b.n	800149c <LoopCopyDataInit>

08001494 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001496:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001498:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800149a:	3104      	adds	r1, #4

0800149c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800149c:	480b      	ldr	r0, [pc, #44]	; (80014cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014a4:	d3f6      	bcc.n	8001494 <CopyDataInit>
  ldr  r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014a8:	e002      	b.n	80014b0 <LoopFillZerobss>

080014aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014ac:	f842 3b04 	str.w	r3, [r2], #4

080014b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014b4:	d3f9      	bcc.n	80014aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014b6:	f7ff ffd3 	bl	8001460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f001 ffe5 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff f85f 	bl	8000580 <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014c8:	08004208 	.word	0x08004208
  ldr  r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80014d4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80014d8:	20000218 	.word	0x20000218

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f90d 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fe82 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f917 	bl	8001776 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f8ed 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000008 	.word	0x20000008
 800157c:	20000010 	.word	0x20000010
 8001580:	2000000c 	.word	0x2000000c

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000010 	.word	0x20000010
 80015a8:	200001f0 	.word	0x200001f0

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200001f0 	.word	0x200001f0

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff47 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff5c 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffb0 	bl	80016e4 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e00e      	b.n	80017be <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	795b      	ldrb	r3, [r3, #5]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d105      	bne.n	80017b6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fd5b 	bl	800126c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b087      	sub	sp, #28
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2202      	movs	r2, #2
 80017da:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	441a      	add	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3f0      	bcc.n	80017e2 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800180e:	693b      	ldr	r3, [r7, #16]
}
 8001810:	4618      	mov	r0, r3
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_FLASH_Program+0xa0>)
 8001830:	7e1b      	ldrb	r3, [r3, #24]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_FLASH_Program+0x1e>
 8001836:	2302      	movs	r3, #2
 8001838:	e03b      	b.n	80018b2 <HAL_FLASH_Program+0x96>
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_FLASH_Program+0xa0>)
 800183c:	2201      	movs	r2, #1
 800183e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001840:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001844:	f000 f870 	bl	8001928 <FLASH_WaitForLastOperation>
 8001848:	4603      	mov	r3, r0
 800184a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d12b      	bne.n	80018aa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001858:	783b      	ldrb	r3, [r7, #0]
 800185a:	4619      	mov	r1, r3
 800185c:	68b8      	ldr	r0, [r7, #8]
 800185e:	f000 f919 	bl	8001a94 <FLASH_Program_Byte>
 8001862:	e016      	b.n	8001892 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d105      	bne.n	8001876 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800186a:	883b      	ldrh	r3, [r7, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f000 f8ec 	bl	8001a4c <FLASH_Program_HalfWord>
 8001874:	e00d      	b.n	8001892 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d105      	bne.n	8001888 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f000 f8c1 	bl	8001a08 <FLASH_Program_Word>
 8001886:	e004      	b.n	8001892 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f000 f88b 	bl	80019a8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001892:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001896:	f000 f847 	bl	8001928 <FLASH_WaitForLastOperation>
 800189a:	4603      	mov	r3, r0
 800189c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_FLASH_Program+0xa4>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_FLASH_Program+0xa4>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_FLASH_Program+0xa0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	761a      	strb	r2, [r3, #24]
  
  return status;
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001f4 	.word	0x200001f4
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_FLASH_Unlock+0x38>)
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	da0b      	bge.n	80018ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_FLASH_Unlock+0x38>)
 80018d8:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_FLASH_Unlock+0x3c>)
 80018da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_FLASH_Unlock+0x38>)
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_FLASH_Unlock+0x40>)
 80018e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_FLASH_Unlock+0x38>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da01      	bge.n	80018ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	45670123 	.word	0x45670123
 8001904:	cdef89ab 	.word	0xcdef89ab

08001908 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_FLASH_Lock+0x1c>)
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_FLASH_Lock+0x1c>)
 8001912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001916:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40023c00 	.word	0x40023c00

08001928 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <FLASH_WaitForLastOperation+0x78>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800193a:	f7ff fe37 	bl	80015ac <HAL_GetTick>
 800193e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001940:	e010      	b.n	8001964 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d00c      	beq.n	8001964 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <FLASH_WaitForLastOperation+0x38>
 8001950:	f7ff fe2c 	bl	80015ac <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d201      	bcs.n	8001964 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e019      	b.n	8001998 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <FLASH_WaitForLastOperation+0x7c>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e8      	bne.n	8001942 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <FLASH_WaitForLastOperation+0x7c>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <FLASH_WaitForLastOperation+0x7c>)
 800197e:	2201      	movs	r2, #1
 8001980:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <FLASH_WaitForLastOperation+0x7c>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800198e:	f000 f8a3 	bl	8001ad8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
  
}  
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200001f4 	.word	0x200001f4
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019a8:	b490      	push	{r4, r7}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <FLASH_Program_DoubleWord+0x5c>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <FLASH_Program_DoubleWord+0x5c>)
 80019ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <FLASH_Program_DoubleWord+0x5c>)
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <FLASH_Program_DoubleWord+0x5c>)
 80019c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <FLASH_Program_DoubleWord+0x5c>)
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <FLASH_Program_DoubleWord+0x5c>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80019de:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80019e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f04f 0400 	mov.w	r4, #0
 80019ee:	0013      	movs	r3, r2
 80019f0:	2400      	movs	r4, #0
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	3204      	adds	r2, #4
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc90      	pop	{r4, r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <FLASH_Program_Word+0x40>)
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <FLASH_Program_Word+0x40>)
 8001a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <FLASH_Program_Word+0x40>)
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <FLASH_Program_Word+0x40>)
 8001a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <FLASH_Program_Word+0x40>)
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <FLASH_Program_Word+0x40>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <FLASH_Program_HalfWord+0x44>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <FLASH_Program_HalfWord+0x44>)
 8001a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <FLASH_Program_HalfWord+0x44>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <FLASH_Program_HalfWord+0x44>)
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <FLASH_Program_HalfWord+0x44>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <FLASH_Program_HalfWord+0x44>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	801a      	strh	r2, [r3, #0]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023c00 	.word	0x40023c00

08001a94 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <FLASH_Program_Byte+0x40>)
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <FLASH_Program_Byte+0x40>)
 8001aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <FLASH_Program_Byte+0x40>)
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <FLASH_Program_Byte+0x40>)
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <FLASH_Program_Byte+0x40>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <FLASH_Program_Byte+0x40>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	701a      	strb	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00

08001ad8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001af2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001af6:	2210      	movs	r2, #16
 8001af8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001b10:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001b14:	2220      	movs	r2, #32
 8001b16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001b2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f043 0302 	orr.w	r3, r3, #2
 8001b4a:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001b4c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f043 0320 	orr.w	r3, r3, #32
 8001b68:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <FLASH_SetErrorCode+0xa8>)
 8001b6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <FLASH_SetErrorCode+0xa4>)
 8001b6e:	2202      	movs	r2, #2
 8001b70:	60da      	str	r2, [r3, #12]
  }
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40023c00 	.word	0x40023c00
 8001b80:	200001f4 	.word	0x200001f4

08001b84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_FLASHEx_Erase+0xd8>)
 8001b98:	7e1b      	ldrb	r3, [r3, #24]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_FLASHEx_Erase+0x1e>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e058      	b.n	8001c54 <HAL_FLASHEx_Erase+0xd0>
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_FLASHEx_Erase+0xd8>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ba8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bac:	f7ff febc 	bl	8001928 <FLASH_WaitForLastOperation>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d148      	bne.n	8001c4c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d115      	bne.n	8001bf6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 f844 	bl	8001c64 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001be0:	f7ff fea2 	bl	8001928 <FLASH_WaitForLastOperation>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_FLASHEx_Erase+0xdc>)
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_FLASHEx_Erase+0xdc>)
 8001bee:	f023 0304 	bic.w	r3, r3, #4
 8001bf2:	6113      	str	r3, [r2, #16]
 8001bf4:	e028      	b.n	8001c48 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	e01c      	b.n	8001c38 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4619      	mov	r1, r3
 8001c06:	68b8      	ldr	r0, [r7, #8]
 8001c08:	f000 f850 	bl	8001cac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c10:	f7ff fe8a 	bl	8001928 <FLASH_WaitForLastOperation>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_FLASHEx_Erase+0xdc>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_FLASHEx_Erase+0xdc>)
 8001c1e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001c22:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	601a      	str	r2, [r3, #0]
          break;
 8001c30:	e00a      	b.n	8001c48 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3301      	adds	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4413      	add	r3, r2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3da      	bcc.n	8001bfe <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001c48:	f000 f878 	bl	8001d3c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_FLASHEx_Erase+0xd8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	761a      	strb	r2, [r3, #24]

  return status;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200001f4 	.word	0x200001f4
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <FLASH_MassErase+0x44>)
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <FLASH_MassErase+0x44>)
 8001c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <FLASH_MassErase+0x44>)
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <FLASH_MassErase+0x44>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <FLASH_MassErase+0x44>)
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	4313      	orrs	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <FLASH_MassErase+0x44>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6113      	str	r3, [r2, #16]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e010      	b.n	8001cea <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d103      	bne.n	8001cd6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e009      	b.n	8001cea <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d103      	bne.n	8001ce4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e002      	b.n	8001cea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ce4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	490f      	ldr	r1, [pc, #60]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001d08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <FLASH_Erase_Sector+0x8c>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2a:	6113      	str	r3, [r2, #16]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d017      	beq.n	8001d7c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d56:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d6e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d017      	beq.n	8001db8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d92:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001d9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001daa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <FLASH_FlushCaches+0x88>)
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	6013      	str	r3, [r2, #0]
  }
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e16b      	b.n	80020bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 815a 	bne.w	80020b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d00b      	beq.n	8001e22 <HAL_GPIO_Init+0x5a>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e16:	2b11      	cmp	r3, #17
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d130      	bne.n	8001e84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 0201 	and.w	r2, r3, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0xfc>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80b4 	beq.w	80020b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_GPIO_Init+0x308>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a5e      	ldr	r2, [pc, #376]	; (80020d0 <HAL_GPIO_Init+0x308>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_GPIO_Init+0x308>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6a:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a51      	ldr	r2, [pc, #324]	; (80020d8 <HAL_GPIO_Init+0x310>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <HAL_GPIO_Init+0x226>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_GPIO_Init+0x314>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d025      	beq.n	8001fea <HAL_GPIO_Init+0x222>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4f      	ldr	r2, [pc, #316]	; (80020e0 <HAL_GPIO_Init+0x318>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_Init+0x21e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4e      	ldr	r2, [pc, #312]	; (80020e4 <HAL_GPIO_Init+0x31c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x21a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4d      	ldr	r2, [pc, #308]	; (80020e8 <HAL_GPIO_Init+0x320>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x216>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4c      	ldr	r2, [pc, #304]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x212>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4b      	ldr	r2, [pc, #300]	; (80020f0 <HAL_GPIO_Init+0x328>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x20e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <HAL_GPIO_Init+0x32c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x20a>
 8001fce:	2307      	movs	r3, #7
 8001fd0:	e00e      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	e00c      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	e00a      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fda:	2305      	movs	r3, #5
 8001fdc:	e008      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002000:	4934      	ldr	r1, [pc, #208]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002032:	4a31      	ldr	r2, [pc, #196]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_GPIO_Init+0x330>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800205c:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <HAL_GPIO_Init+0x330>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002086:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_GPIO_Init+0x330>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b0:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <HAL_GPIO_Init+0x330>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b0f      	cmp	r3, #15
 80020c0:	f67f ae90 	bls.w	8001de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	3724      	adds	r7, #36	; 0x24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40021400 	.word	0x40021400
 80020f0:	40021800 	.word	0x40021800
 80020f4:	40021c00 	.word	0x40021c00
 80020f8:	40013c00 	.word	0x40013c00

080020fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	e001      	b.n	800211e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002148:	e003      	b.n	8002152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e25b      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d075      	beq.n	800226a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800217e:	4ba3      	ldr	r3, [pc, #652]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4ba0      	ldr	r3, [pc, #640]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002192:	2b08      	cmp	r3, #8
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b9d      	ldr	r3, [pc, #628]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b99      	ldr	r3, [pc, #612]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05b      	beq.n	8002268 <HAL_RCC_OscConfig+0x108>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e236      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x74>
 80021c6:	4b91      	ldr	r3, [pc, #580]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a90      	ldr	r2, [pc, #576]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b8b      	ldr	r3, [pc, #556]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a8a      	ldr	r2, [pc, #552]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a87      	ldr	r2, [pc, #540]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021f8:	4b84      	ldr	r3, [pc, #528]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a83      	ldr	r2, [pc, #524]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b81      	ldr	r3, [pc, #516]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a80      	ldr	r2, [pc, #512]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f9c8 	bl	80015ac <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff f9c4 	bl	80015ac <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1fb      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff f9b4 	bl	80015ac <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff f9b0 	bl	80015ac <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1e7      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b6c      	ldr	r3, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0xe8>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1bb      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b56      	ldr	r3, [pc, #344]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4952      	ldr	r1, [pc, #328]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <HAL_RCC_OscConfig+0x2b0>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff f969 	bl	80015ac <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff f965 	bl	80015ac <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e19c      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4940      	ldr	r1, [pc, #256]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_RCC_OscConfig+0x2b0>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff f948 	bl	80015ac <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002320:	f7ff f944 	bl	80015ac <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e17b      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d030      	beq.n	80023ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_RCC_OscConfig+0x2b4>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7ff f928 	bl	80015ac <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002360:	f7ff f924 	bl	80015ac <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e15b      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x200>
 800237e:	e015      	b.n	80023ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_OscConfig+0x2b4>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7ff f911 	bl	80015ac <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238e:	f7ff f90d 	bl	80015ac <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e144      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a0 	beq.w	80024fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a0e      	ldr	r2, [pc, #56]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d121      	bne.n	800243a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7ff f8d3 	bl	80015ac <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e011      	b.n	800242e <HAL_RCC_OscConfig+0x2ce>
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	42470000 	.word	0x42470000
 8002414:	42470e80 	.word	0x42470e80
 8002418:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f7ff f8c6 	bl	80015ac <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0fd      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b81      	ldr	r3, [pc, #516]	; (8002634 <HAL_RCC_OscConfig+0x4d4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d106      	bne.n	8002450 <HAL_RCC_OscConfig+0x2f0>
 8002442:	4b7d      	ldr	r3, [pc, #500]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a7c      	ldr	r2, [pc, #496]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x32a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x312>
 8002458:	4b77      	ldr	r3, [pc, #476]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a76      	ldr	r2, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	4b74      	ldr	r3, [pc, #464]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a73      	ldr	r2, [pc, #460]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x32a>
 8002472:	4b71      	ldr	r3, [pc, #452]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a70      	ldr	r2, [pc, #448]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b6e      	ldr	r3, [pc, #440]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a6d      	ldr	r2, [pc, #436]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7ff f88b 	bl	80015ac <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff f887 	bl	80015ac <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0bc      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b61      	ldr	r3, [pc, #388]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x33a>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff f875 	bl	80015ac <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff f871 	bl	80015ac <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0a6      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b56      	ldr	r3, [pc, #344]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b52      	ldr	r3, [pc, #328]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a51      	ldr	r2, [pc, #324]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8092 	beq.w	8002628 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002504:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d05c      	beq.n	80025ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d141      	bne.n	800259c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b48      	ldr	r3, [pc, #288]	; (800263c <HAL_RCC_OscConfig+0x4dc>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff f845 	bl	80015ac <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff f841 	bl	80015ac <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e078      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002538:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	019b      	lsls	r3, r3, #6
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	3b01      	subs	r3, #1
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	4933      	ldr	r1, [pc, #204]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x4dc>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f81a 	bl	80015ac <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff f816 	bl	80015ac <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e04d      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x41c>
 800259a:	e045      	b.n	8002628 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_RCC_OscConfig+0x4dc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7ff f803 	bl	80015ac <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe ffff 	bl	80015ac <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e036      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025bc:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x44a>
 80025c8:	e02e      	b.n	8002628 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e029      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_RCC_OscConfig+0x4d8>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d115      	bne.n	8002624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002604:	4293      	cmp	r3, r2
 8002606:	d10d      	bne.n	8002624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d106      	bne.n	8002624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40007000 	.word	0x40007000
 8002638:	40023800 	.word	0x40023800
 800263c:	42470060 	.word	0x42470060

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0cc      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d90c      	bls.n	800267c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d044      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d119      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e067      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b37      	ldr	r3, [pc, #220]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4934      	ldr	r1, [pc, #208]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7fe ff3c 	bl	80015ac <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe ff38 	bl	80015ac <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e04f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4601      	mov	r1, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	fa21 f303 	lsr.w	r3, r1, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fe9c 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	080041ac 	.word	0x080041ac
 8002804:	20000008 	.word	0x20000008
 8002808:	2000000c 	.word	0x2000000c

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	2300      	movs	r3, #0
 800281c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002822:	4b50      	ldr	r3, [pc, #320]	; (8002964 <HAL_RCC_GetSysClockFreq+0x158>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d007      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x32>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d008      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x38>
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 808d 	bne.w	8002952 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCC_GetSysClockFreq+0x15c>)
 800283a:	60bb      	str	r3, [r7, #8]
       break;
 800283c:	e08c      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800283e:	4b4b      	ldr	r3, [pc, #300]	; (800296c <HAL_RCC_GetSysClockFreq+0x160>)
 8002840:	60bb      	str	r3, [r7, #8]
      break;
 8002842:	e089      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002844:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_GetSysClockFreq+0x158>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800284c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284e:	4b45      	ldr	r3, [pc, #276]	; (8002964 <HAL_RCC_GetSysClockFreq+0x158>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d023      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285a:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_RCC_GetSysClockFreq+0x158>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	099b      	lsrs	r3, r3, #6
 8002860:	f04f 0400 	mov.w	r4, #0
 8002864:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	ea03 0501 	and.w	r5, r3, r1
 8002870:	ea04 0602 	and.w	r6, r4, r2
 8002874:	4a3d      	ldr	r2, [pc, #244]	; (800296c <HAL_RCC_GetSysClockFreq+0x160>)
 8002876:	fb02 f106 	mul.w	r1, r2, r6
 800287a:	2200      	movs	r2, #0
 800287c:	fb02 f205 	mul.w	r2, r2, r5
 8002880:	440a      	add	r2, r1
 8002882:	493a      	ldr	r1, [pc, #232]	; (800296c <HAL_RCC_GetSysClockFreq+0x160>)
 8002884:	fba5 0101 	umull	r0, r1, r5, r1
 8002888:	1853      	adds	r3, r2, r1
 800288a:	4619      	mov	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f04f 0400 	mov.w	r4, #0
 8002892:	461a      	mov	r2, r3
 8002894:	4623      	mov	r3, r4
 8002896:	f7fd fcf3 	bl	8000280 <__aeabi_uldivmod>
 800289a:	4603      	mov	r3, r0
 800289c:	460c      	mov	r4, r1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e049      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCC_GetSysClockFreq+0x158>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	f04f 0400 	mov.w	r4, #0
 80028ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	ea03 0501 	and.w	r5, r3, r1
 80028b8:	ea04 0602 	and.w	r6, r4, r2
 80028bc:	4629      	mov	r1, r5
 80028be:	4632      	mov	r2, r6
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	0154      	lsls	r4, r2, #5
 80028ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ce:	014b      	lsls	r3, r1, #5
 80028d0:	4619      	mov	r1, r3
 80028d2:	4622      	mov	r2, r4
 80028d4:	1b49      	subs	r1, r1, r5
 80028d6:	eb62 0206 	sbc.w	r2, r2, r6
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	f04f 0400 	mov.w	r4, #0
 80028e2:	0194      	lsls	r4, r2, #6
 80028e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028e8:	018b      	lsls	r3, r1, #6
 80028ea:	1a5b      	subs	r3, r3, r1
 80028ec:	eb64 0402 	sbc.w	r4, r4, r2
 80028f0:	f04f 0100 	mov.w	r1, #0
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	00e2      	lsls	r2, r4, #3
 80028fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028fe:	00d9      	lsls	r1, r3, #3
 8002900:	460b      	mov	r3, r1
 8002902:	4614      	mov	r4, r2
 8002904:	195b      	adds	r3, r3, r5
 8002906:	eb44 0406 	adc.w	r4, r4, r6
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	02a2      	lsls	r2, r4, #10
 8002914:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002918:	0299      	lsls	r1, r3, #10
 800291a:	460b      	mov	r3, r1
 800291c:	4614      	mov	r4, r2
 800291e:	4618      	mov	r0, r3
 8002920:	4621      	mov	r1, r4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f04f 0400 	mov.w	r4, #0
 8002928:	461a      	mov	r2, r3
 800292a:	4623      	mov	r3, r4
 800292c:	f7fd fca8 	bl	8000280 <__aeabi_uldivmod>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_GetSysClockFreq+0x158>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	3301      	adds	r3, #1
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	60bb      	str	r3, [r7, #8]
      break;
 8002950:	e002      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002954:	60bb      	str	r3, [r7, #8]
      break;
 8002956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002958:	68bb      	ldr	r3, [r7, #8]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	00f42400 	.word	0x00f42400
 800296c:	017d7840 	.word	0x017d7840

08002970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_RCC_GetHCLKFreq+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000008 	.word	0x20000008

08002988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800298c:	f7ff fff0 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 8002990:	4601      	mov	r1, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0a9b      	lsrs	r3, r3, #10
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4a03      	ldr	r2, [pc, #12]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	080041bc 	.word	0x080041bc

080029b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029b4:	f7ff ffdc 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 80029b8:	4601      	mov	r1, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0b5b      	lsrs	r3, r3, #13
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4a03      	ldr	r2, [pc, #12]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	080041bc 	.word	0x080041bc

080029d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e03f      	b.n	8002a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fc56 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2224      	movs	r2, #36	; 0x24
 8002a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f9b1 	bl	8002d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b088      	sub	sp, #32
 8002a76:	af02      	add	r7, sp, #8
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	f040 8083 	bne.w	8002b9a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_UART_Transmit+0x2e>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e07b      	b.n	8002b9c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Transmit+0x40>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e074      	b.n	8002b9c <HAL_UART_Transmit+0x12a>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2221      	movs	r2, #33	; 0x21
 8002ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fd70 	bl	80015ac <HAL_GetTick>
 8002acc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ae2:	e042      	b.n	8002b6a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d122      	bne.n	8002b42 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2200      	movs	r2, #0
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f8f2 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e042      	b.n	8002b9c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b28:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3302      	adds	r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	e017      	b.n	8002b6a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	e013      	b.n	8002b6a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f8cf 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e01f      	b.n	8002b9c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	60ba      	str	r2, [r7, #8]
 8002b62:	781a      	ldrb	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1b7      	bne.n	8002ae4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2140      	movs	r1, #64	; 0x40
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f8b6 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e006      	b.n	8002b9c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	f040 8090 	bne.w	8002ce6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_UART_Receive+0x2e>
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e088      	b.n	8002ce8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_UART_Receive+0x40>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e081      	b.n	8002ce8 <HAL_UART_Receive+0x144>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2222      	movs	r2, #34	; 0x22
 8002bf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002bfa:	f7fe fcd7 	bl	80015ac <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	88fa      	ldrh	r2, [r7, #6]
 8002c04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c14:	e05c      	b.n	8002cd0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d12b      	bne.n	8002c86 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2120      	movs	r1, #32
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f859 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e04f      	b.n	8002ce8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3302      	adds	r3, #2
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	e030      	b.n	8002cd0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	e024      	b.n	8002cd0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2120      	movs	r1, #32
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f82d 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e023      	b.n	8002ce8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	60ba      	str	r2, [r7, #8]
 8002cb4:	b2ca      	uxtb	r2, r1
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e00a      	b.n	8002cd0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1c59      	adds	r1, r3, #1
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d19d      	bne.n	8002c16 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d00:	e02c      	b.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d028      	beq.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d10:	f7fe fc4c 	bl	80015ac <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d21d      	bcs.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e00f      	b.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d0c3      	beq.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002dc6:	f023 030c 	bic.w	r3, r3, #12
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	68f9      	ldr	r1, [r7, #12]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df2:	f040 818b 	bne.w	800310c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4ac1      	ldr	r2, [pc, #772]	; (8003100 <UART_SetConfig+0x37c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d005      	beq.n	8002e0c <UART_SetConfig+0x88>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4abf      	ldr	r2, [pc, #764]	; (8003104 <UART_SetConfig+0x380>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f040 80bd 	bne.w	8002f86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e0c:	f7ff fdd0 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8002e10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	461d      	mov	r5, r3
 8002e16:	f04f 0600 	mov.w	r6, #0
 8002e1a:	46a8      	mov	r8, r5
 8002e1c:	46b1      	mov	r9, r6
 8002e1e:	eb18 0308 	adds.w	r3, r8, r8
 8002e22:	eb49 0409 	adc.w	r4, r9, r9
 8002e26:	4698      	mov	r8, r3
 8002e28:	46a1      	mov	r9, r4
 8002e2a:	eb18 0805 	adds.w	r8, r8, r5
 8002e2e:	eb49 0906 	adc.w	r9, r9, r6
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e46:	4688      	mov	r8, r1
 8002e48:	4691      	mov	r9, r2
 8002e4a:	eb18 0005 	adds.w	r0, r8, r5
 8002e4e:	eb49 0106 	adc.w	r1, r9, r6
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	461d      	mov	r5, r3
 8002e58:	f04f 0600 	mov.w	r6, #0
 8002e5c:	196b      	adds	r3, r5, r5
 8002e5e:	eb46 0406 	adc.w	r4, r6, r6
 8002e62:	461a      	mov	r2, r3
 8002e64:	4623      	mov	r3, r4
 8002e66:	f7fd fa0b 	bl	8000280 <__aeabi_uldivmod>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4ba5      	ldr	r3, [pc, #660]	; (8003108 <UART_SetConfig+0x384>)
 8002e72:	fba3 2302 	umull	r2, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	461d      	mov	r5, r3
 8002e80:	f04f 0600 	mov.w	r6, #0
 8002e84:	46a9      	mov	r9, r5
 8002e86:	46b2      	mov	sl, r6
 8002e88:	eb19 0309 	adds.w	r3, r9, r9
 8002e8c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e90:	4699      	mov	r9, r3
 8002e92:	46a2      	mov	sl, r4
 8002e94:	eb19 0905 	adds.w	r9, r9, r5
 8002e98:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ea8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eb0:	4689      	mov	r9, r1
 8002eb2:	4692      	mov	sl, r2
 8002eb4:	eb19 0005 	adds.w	r0, r9, r5
 8002eb8:	eb4a 0106 	adc.w	r1, sl, r6
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	461d      	mov	r5, r3
 8002ec2:	f04f 0600 	mov.w	r6, #0
 8002ec6:	196b      	adds	r3, r5, r5
 8002ec8:	eb46 0406 	adc.w	r4, r6, r6
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4623      	mov	r3, r4
 8002ed0:	f7fd f9d6 	bl	8000280 <__aeabi_uldivmod>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b8b      	ldr	r3, [pc, #556]	; (8003108 <UART_SetConfig+0x384>)
 8002edc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	2164      	movs	r1, #100	; 0x64
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	3332      	adds	r3, #50	; 0x32
 8002eee:	4a86      	ldr	r2, [pc, #536]	; (8003108 <UART_SetConfig+0x384>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002efc:	4498      	add	r8, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	461d      	mov	r5, r3
 8002f02:	f04f 0600 	mov.w	r6, #0
 8002f06:	46a9      	mov	r9, r5
 8002f08:	46b2      	mov	sl, r6
 8002f0a:	eb19 0309 	adds.w	r3, r9, r9
 8002f0e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f12:	4699      	mov	r9, r3
 8002f14:	46a2      	mov	sl, r4
 8002f16:	eb19 0905 	adds.w	r9, r9, r5
 8002f1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f32:	4689      	mov	r9, r1
 8002f34:	4692      	mov	sl, r2
 8002f36:	eb19 0005 	adds.w	r0, r9, r5
 8002f3a:	eb4a 0106 	adc.w	r1, sl, r6
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	461d      	mov	r5, r3
 8002f44:	f04f 0600 	mov.w	r6, #0
 8002f48:	196b      	adds	r3, r5, r5
 8002f4a:	eb46 0406 	adc.w	r4, r6, r6
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4623      	mov	r3, r4
 8002f52:	f7fd f995 	bl	8000280 <__aeabi_uldivmod>
 8002f56:	4603      	mov	r3, r0
 8002f58:	460c      	mov	r4, r1
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <UART_SetConfig+0x384>)
 8002f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2164      	movs	r1, #100	; 0x64
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	3332      	adds	r3, #50	; 0x32
 8002f70:	4a65      	ldr	r2, [pc, #404]	; (8003108 <UART_SetConfig+0x384>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	f003 0207 	and.w	r2, r3, #7
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4442      	add	r2, r8
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	e26f      	b.n	8003466 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f86:	f7ff fcff 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8002f8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	461d      	mov	r5, r3
 8002f90:	f04f 0600 	mov.w	r6, #0
 8002f94:	46a8      	mov	r8, r5
 8002f96:	46b1      	mov	r9, r6
 8002f98:	eb18 0308 	adds.w	r3, r8, r8
 8002f9c:	eb49 0409 	adc.w	r4, r9, r9
 8002fa0:	4698      	mov	r8, r3
 8002fa2:	46a1      	mov	r9, r4
 8002fa4:	eb18 0805 	adds.w	r8, r8, r5
 8002fa8:	eb49 0906 	adc.w	r9, r9, r6
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fc0:	4688      	mov	r8, r1
 8002fc2:	4691      	mov	r9, r2
 8002fc4:	eb18 0005 	adds.w	r0, r8, r5
 8002fc8:	eb49 0106 	adc.w	r1, r9, r6
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	461d      	mov	r5, r3
 8002fd2:	f04f 0600 	mov.w	r6, #0
 8002fd6:	196b      	adds	r3, r5, r5
 8002fd8:	eb46 0406 	adc.w	r4, r6, r6
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	f7fd f94e 	bl	8000280 <__aeabi_uldivmod>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <UART_SetConfig+0x384>)
 8002fec:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	461d      	mov	r5, r3
 8002ffa:	f04f 0600 	mov.w	r6, #0
 8002ffe:	46a9      	mov	r9, r5
 8003000:	46b2      	mov	sl, r6
 8003002:	eb19 0309 	adds.w	r3, r9, r9
 8003006:	eb4a 040a 	adc.w	r4, sl, sl
 800300a:	4699      	mov	r9, r3
 800300c:	46a2      	mov	sl, r4
 800300e:	eb19 0905 	adds.w	r9, r9, r5
 8003012:	eb4a 0a06 	adc.w	sl, sl, r6
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800302a:	4689      	mov	r9, r1
 800302c:	4692      	mov	sl, r2
 800302e:	eb19 0005 	adds.w	r0, r9, r5
 8003032:	eb4a 0106 	adc.w	r1, sl, r6
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	461d      	mov	r5, r3
 800303c:	f04f 0600 	mov.w	r6, #0
 8003040:	196b      	adds	r3, r5, r5
 8003042:	eb46 0406 	adc.w	r4, r6, r6
 8003046:	461a      	mov	r2, r3
 8003048:	4623      	mov	r3, r4
 800304a:	f7fd f919 	bl	8000280 <__aeabi_uldivmod>
 800304e:	4603      	mov	r3, r0
 8003050:	460c      	mov	r4, r1
 8003052:	461a      	mov	r2, r3
 8003054:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <UART_SetConfig+0x384>)
 8003056:	fba3 1302 	umull	r1, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2164      	movs	r1, #100	; 0x64
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	3332      	adds	r3, #50	; 0x32
 8003068:	4a27      	ldr	r2, [pc, #156]	; (8003108 <UART_SetConfig+0x384>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003076:	4498      	add	r8, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	461d      	mov	r5, r3
 800307c:	f04f 0600 	mov.w	r6, #0
 8003080:	46a9      	mov	r9, r5
 8003082:	46b2      	mov	sl, r6
 8003084:	eb19 0309 	adds.w	r3, r9, r9
 8003088:	eb4a 040a 	adc.w	r4, sl, sl
 800308c:	4699      	mov	r9, r3
 800308e:	46a2      	mov	sl, r4
 8003090:	eb19 0905 	adds.w	r9, r9, r5
 8003094:	eb4a 0a06 	adc.w	sl, sl, r6
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030ac:	4689      	mov	r9, r1
 80030ae:	4692      	mov	sl, r2
 80030b0:	eb19 0005 	adds.w	r0, r9, r5
 80030b4:	eb4a 0106 	adc.w	r1, sl, r6
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	461d      	mov	r5, r3
 80030be:	f04f 0600 	mov.w	r6, #0
 80030c2:	196b      	adds	r3, r5, r5
 80030c4:	eb46 0406 	adc.w	r4, r6, r6
 80030c8:	461a      	mov	r2, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	f7fd f8d8 	bl	8000280 <__aeabi_uldivmod>
 80030d0:	4603      	mov	r3, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <UART_SetConfig+0x384>)
 80030d8:	fba3 1302 	umull	r1, r3, r3, r2
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	2164      	movs	r1, #100	; 0x64
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	3332      	adds	r3, #50	; 0x32
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <UART_SetConfig+0x384>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	f003 0207 	and.w	r2, r3, #7
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4442      	add	r2, r8
 80030fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030fe:	e1b2      	b.n	8003466 <UART_SetConfig+0x6e2>
 8003100:	40011000 	.word	0x40011000
 8003104:	40011400 	.word	0x40011400
 8003108:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4ad7      	ldr	r2, [pc, #860]	; (8003470 <UART_SetConfig+0x6ec>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d005      	beq.n	8003122 <UART_SetConfig+0x39e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4ad6      	ldr	r2, [pc, #856]	; (8003474 <UART_SetConfig+0x6f0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	f040 80d1 	bne.w	80032c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003122:	f7ff fc45 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8003126:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	469a      	mov	sl, r3
 800312c:	f04f 0b00 	mov.w	fp, #0
 8003130:	46d0      	mov	r8, sl
 8003132:	46d9      	mov	r9, fp
 8003134:	eb18 0308 	adds.w	r3, r8, r8
 8003138:	eb49 0409 	adc.w	r4, r9, r9
 800313c:	4698      	mov	r8, r3
 800313e:	46a1      	mov	r9, r4
 8003140:	eb18 080a 	adds.w	r8, r8, sl
 8003144:	eb49 090b 	adc.w	r9, r9, fp
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003154:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003158:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800315c:	4688      	mov	r8, r1
 800315e:	4691      	mov	r9, r2
 8003160:	eb1a 0508 	adds.w	r5, sl, r8
 8003164:	eb4b 0609 	adc.w	r6, fp, r9
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4619      	mov	r1, r3
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	f04f 0400 	mov.w	r4, #0
 800317a:	0094      	lsls	r4, r2, #2
 800317c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003180:	008b      	lsls	r3, r1, #2
 8003182:	461a      	mov	r2, r3
 8003184:	4623      	mov	r3, r4
 8003186:	4628      	mov	r0, r5
 8003188:	4631      	mov	r1, r6
 800318a:	f7fd f879 	bl	8000280 <__aeabi_uldivmod>
 800318e:	4603      	mov	r3, r0
 8003190:	460c      	mov	r4, r1
 8003192:	461a      	mov	r2, r3
 8003194:	4bb8      	ldr	r3, [pc, #736]	; (8003478 <UART_SetConfig+0x6f4>)
 8003196:	fba3 2302 	umull	r2, r3, r3, r2
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	469b      	mov	fp, r3
 80031a4:	f04f 0c00 	mov.w	ip, #0
 80031a8:	46d9      	mov	r9, fp
 80031aa:	46e2      	mov	sl, ip
 80031ac:	eb19 0309 	adds.w	r3, r9, r9
 80031b0:	eb4a 040a 	adc.w	r4, sl, sl
 80031b4:	4699      	mov	r9, r3
 80031b6:	46a2      	mov	sl, r4
 80031b8:	eb19 090b 	adds.w	r9, r9, fp
 80031bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031d4:	4689      	mov	r9, r1
 80031d6:	4692      	mov	sl, r2
 80031d8:	eb1b 0509 	adds.w	r5, fp, r9
 80031dc:	eb4c 060a 	adc.w	r6, ip, sl
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	f04f 0400 	mov.w	r4, #0
 80031f2:	0094      	lsls	r4, r2, #2
 80031f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031f8:	008b      	lsls	r3, r1, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	4623      	mov	r3, r4
 80031fe:	4628      	mov	r0, r5
 8003200:	4631      	mov	r1, r6
 8003202:	f7fd f83d 	bl	8000280 <__aeabi_uldivmod>
 8003206:	4603      	mov	r3, r0
 8003208:	460c      	mov	r4, r1
 800320a:	461a      	mov	r2, r3
 800320c:	4b9a      	ldr	r3, [pc, #616]	; (8003478 <UART_SetConfig+0x6f4>)
 800320e:	fba3 1302 	umull	r1, r3, r3, r2
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2164      	movs	r1, #100	; 0x64
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	3332      	adds	r3, #50	; 0x32
 8003220:	4a95      	ldr	r2, [pc, #596]	; (8003478 <UART_SetConfig+0x6f4>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322c:	4498      	add	r8, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	469b      	mov	fp, r3
 8003232:	f04f 0c00 	mov.w	ip, #0
 8003236:	46d9      	mov	r9, fp
 8003238:	46e2      	mov	sl, ip
 800323a:	eb19 0309 	adds.w	r3, r9, r9
 800323e:	eb4a 040a 	adc.w	r4, sl, sl
 8003242:	4699      	mov	r9, r3
 8003244:	46a2      	mov	sl, r4
 8003246:	eb19 090b 	adds.w	r9, r9, fp
 800324a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800325e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003262:	4689      	mov	r9, r1
 8003264:	4692      	mov	sl, r2
 8003266:	eb1b 0509 	adds.w	r5, fp, r9
 800326a:	eb4c 060a 	adc.w	r6, ip, sl
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4619      	mov	r1, r3
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	f04f 0400 	mov.w	r4, #0
 8003280:	0094      	lsls	r4, r2, #2
 8003282:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003286:	008b      	lsls	r3, r1, #2
 8003288:	461a      	mov	r2, r3
 800328a:	4623      	mov	r3, r4
 800328c:	4628      	mov	r0, r5
 800328e:	4631      	mov	r1, r6
 8003290:	f7fc fff6 	bl	8000280 <__aeabi_uldivmod>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	461a      	mov	r2, r3
 800329a:	4b77      	ldr	r3, [pc, #476]	; (8003478 <UART_SetConfig+0x6f4>)
 800329c:	fba3 1302 	umull	r1, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	2164      	movs	r1, #100	; 0x64
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	3332      	adds	r3, #50	; 0x32
 80032ae:	4a72      	ldr	r2, [pc, #456]	; (8003478 <UART_SetConfig+0x6f4>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4442      	add	r2, r8
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	e0d0      	b.n	8003466 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7ff fb60 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 80032c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	469a      	mov	sl, r3
 80032ce:	f04f 0b00 	mov.w	fp, #0
 80032d2:	46d0      	mov	r8, sl
 80032d4:	46d9      	mov	r9, fp
 80032d6:	eb18 0308 	adds.w	r3, r8, r8
 80032da:	eb49 0409 	adc.w	r4, r9, r9
 80032de:	4698      	mov	r8, r3
 80032e0:	46a1      	mov	r9, r4
 80032e2:	eb18 080a 	adds.w	r8, r8, sl
 80032e6:	eb49 090b 	adc.w	r9, r9, fp
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032fe:	4688      	mov	r8, r1
 8003300:	4691      	mov	r9, r2
 8003302:	eb1a 0508 	adds.w	r5, sl, r8
 8003306:	eb4b 0609 	adc.w	r6, fp, r9
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4619      	mov	r1, r3
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	0094      	lsls	r4, r2, #2
 800331e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003322:	008b      	lsls	r3, r1, #2
 8003324:	461a      	mov	r2, r3
 8003326:	4623      	mov	r3, r4
 8003328:	4628      	mov	r0, r5
 800332a:	4631      	mov	r1, r6
 800332c:	f7fc ffa8 	bl	8000280 <__aeabi_uldivmod>
 8003330:	4603      	mov	r3, r0
 8003332:	460c      	mov	r4, r1
 8003334:	461a      	mov	r2, r3
 8003336:	4b50      	ldr	r3, [pc, #320]	; (8003478 <UART_SetConfig+0x6f4>)
 8003338:	fba3 2302 	umull	r2, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	469b      	mov	fp, r3
 8003346:	f04f 0c00 	mov.w	ip, #0
 800334a:	46d9      	mov	r9, fp
 800334c:	46e2      	mov	sl, ip
 800334e:	eb19 0309 	adds.w	r3, r9, r9
 8003352:	eb4a 040a 	adc.w	r4, sl, sl
 8003356:	4699      	mov	r9, r3
 8003358:	46a2      	mov	sl, r4
 800335a:	eb19 090b 	adds.w	r9, r9, fp
 800335e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800336e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003372:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003376:	4689      	mov	r9, r1
 8003378:	4692      	mov	sl, r2
 800337a:	eb1b 0509 	adds.w	r5, fp, r9
 800337e:	eb4c 060a 	adc.w	r6, ip, sl
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4619      	mov	r1, r3
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	f04f 0400 	mov.w	r4, #0
 8003394:	0094      	lsls	r4, r2, #2
 8003396:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800339a:	008b      	lsls	r3, r1, #2
 800339c:	461a      	mov	r2, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	4628      	mov	r0, r5
 80033a2:	4631      	mov	r1, r6
 80033a4:	f7fc ff6c 	bl	8000280 <__aeabi_uldivmod>
 80033a8:	4603      	mov	r3, r0
 80033aa:	460c      	mov	r4, r1
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b32      	ldr	r3, [pc, #200]	; (8003478 <UART_SetConfig+0x6f4>)
 80033b0:	fba3 1302 	umull	r1, r3, r3, r2
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	2164      	movs	r1, #100	; 0x64
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	3332      	adds	r3, #50	; 0x32
 80033c2:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <UART_SetConfig+0x6f4>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ce:	4498      	add	r8, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	469b      	mov	fp, r3
 80033d4:	f04f 0c00 	mov.w	ip, #0
 80033d8:	46d9      	mov	r9, fp
 80033da:	46e2      	mov	sl, ip
 80033dc:	eb19 0309 	adds.w	r3, r9, r9
 80033e0:	eb4a 040a 	adc.w	r4, sl, sl
 80033e4:	4699      	mov	r9, r3
 80033e6:	46a2      	mov	sl, r4
 80033e8:	eb19 090b 	adds.w	r9, r9, fp
 80033ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003404:	4689      	mov	r9, r1
 8003406:	4692      	mov	sl, r2
 8003408:	eb1b 0509 	adds.w	r5, fp, r9
 800340c:	eb4c 060a 	adc.w	r6, ip, sl
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4619      	mov	r1, r3
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	f04f 0400 	mov.w	r4, #0
 8003422:	0094      	lsls	r4, r2, #2
 8003424:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003428:	008b      	lsls	r3, r1, #2
 800342a:	461a      	mov	r2, r3
 800342c:	4623      	mov	r3, r4
 800342e:	4628      	mov	r0, r5
 8003430:	4631      	mov	r1, r6
 8003432:	f7fc ff25 	bl	8000280 <__aeabi_uldivmod>
 8003436:	4603      	mov	r3, r0
 8003438:	460c      	mov	r4, r1
 800343a:	461a      	mov	r2, r3
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <UART_SetConfig+0x6f4>)
 800343e:	fba3 1302 	umull	r1, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2164      	movs	r1, #100	; 0x64
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	; 0x32
 8003450:	4a09      	ldr	r2, [pc, #36]	; (8003478 <UART_SetConfig+0x6f4>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4442      	add	r2, r8
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	e7ff      	b.n	8003466 <UART_SetConfig+0x6e2>
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003470:	40011000 	.word	0x40011000
 8003474:	40011400 	.word	0x40011400
 8003478:	51eb851f 	.word	0x51eb851f

0800347c <__errno>:
 800347c:	4b01      	ldr	r3, [pc, #4]	; (8003484 <__errno+0x8>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000014 	.word	0x20000014

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	4e0d      	ldr	r6, [pc, #52]	; (80034c0 <__libc_init_array+0x38>)
 800348c:	4c0d      	ldr	r4, [pc, #52]	; (80034c4 <__libc_init_array+0x3c>)
 800348e:	1ba4      	subs	r4, r4, r6
 8003490:	10a4      	asrs	r4, r4, #2
 8003492:	2500      	movs	r5, #0
 8003494:	42a5      	cmp	r5, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	4e0b      	ldr	r6, [pc, #44]	; (80034c8 <__libc_init_array+0x40>)
 800349a:	4c0c      	ldr	r4, [pc, #48]	; (80034cc <__libc_init_array+0x44>)
 800349c:	f000 fc26 	bl	8003cec <_init>
 80034a0:	1ba4      	subs	r4, r4, r6
 80034a2:	10a4      	asrs	r4, r4, #2
 80034a4:	2500      	movs	r5, #0
 80034a6:	42a5      	cmp	r5, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034b0:	4798      	blx	r3
 80034b2:	3501      	adds	r5, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ba:	4798      	blx	r3
 80034bc:	3501      	adds	r5, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	08004200 	.word	0x08004200
 80034c4:	08004200 	.word	0x08004200
 80034c8:	08004200 	.word	0x08004200
 80034cc:	08004204 	.word	0x08004204

080034d0 <memset>:
 80034d0:	4402      	add	r2, r0
 80034d2:	4603      	mov	r3, r0
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d100      	bne.n	80034da <memset+0xa>
 80034d8:	4770      	bx	lr
 80034da:	f803 1b01 	strb.w	r1, [r3], #1
 80034de:	e7f9      	b.n	80034d4 <memset+0x4>

080034e0 <_vsiprintf_r>:
 80034e0:	b500      	push	{lr}
 80034e2:	b09b      	sub	sp, #108	; 0x6c
 80034e4:	9100      	str	r1, [sp, #0]
 80034e6:	9104      	str	r1, [sp, #16]
 80034e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034ec:	9105      	str	r1, [sp, #20]
 80034ee:	9102      	str	r1, [sp, #8]
 80034f0:	4905      	ldr	r1, [pc, #20]	; (8003508 <_vsiprintf_r+0x28>)
 80034f2:	9103      	str	r1, [sp, #12]
 80034f4:	4669      	mov	r1, sp
 80034f6:	f000 f86d 	bl	80035d4 <_svfiprintf_r>
 80034fa:	9b00      	ldr	r3, [sp, #0]
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	b01b      	add	sp, #108	; 0x6c
 8003502:	f85d fb04 	ldr.w	pc, [sp], #4
 8003506:	bf00      	nop
 8003508:	ffff0208 	.word	0xffff0208

0800350c <vsiprintf>:
 800350c:	4613      	mov	r3, r2
 800350e:	460a      	mov	r2, r1
 8003510:	4601      	mov	r1, r0
 8003512:	4802      	ldr	r0, [pc, #8]	; (800351c <vsiprintf+0x10>)
 8003514:	6800      	ldr	r0, [r0, #0]
 8003516:	f7ff bfe3 	b.w	80034e0 <_vsiprintf_r>
 800351a:	bf00      	nop
 800351c:	20000014 	.word	0x20000014

08003520 <__ssputs_r>:
 8003520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	688e      	ldr	r6, [r1, #8]
 8003526:	429e      	cmp	r6, r3
 8003528:	4682      	mov	sl, r0
 800352a:	460c      	mov	r4, r1
 800352c:	4690      	mov	r8, r2
 800352e:	4699      	mov	r9, r3
 8003530:	d837      	bhi.n	80035a2 <__ssputs_r+0x82>
 8003532:	898a      	ldrh	r2, [r1, #12]
 8003534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003538:	d031      	beq.n	800359e <__ssputs_r+0x7e>
 800353a:	6825      	ldr	r5, [r4, #0]
 800353c:	6909      	ldr	r1, [r1, #16]
 800353e:	1a6f      	subs	r7, r5, r1
 8003540:	6965      	ldr	r5, [r4, #20]
 8003542:	2302      	movs	r3, #2
 8003544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003548:	fb95 f5f3 	sdiv	r5, r5, r3
 800354c:	f109 0301 	add.w	r3, r9, #1
 8003550:	443b      	add	r3, r7
 8003552:	429d      	cmp	r5, r3
 8003554:	bf38      	it	cc
 8003556:	461d      	movcc	r5, r3
 8003558:	0553      	lsls	r3, r2, #21
 800355a:	d530      	bpl.n	80035be <__ssputs_r+0x9e>
 800355c:	4629      	mov	r1, r5
 800355e:	f000 fb2b 	bl	8003bb8 <_malloc_r>
 8003562:	4606      	mov	r6, r0
 8003564:	b950      	cbnz	r0, 800357c <__ssputs_r+0x5c>
 8003566:	230c      	movs	r3, #12
 8003568:	f8ca 3000 	str.w	r3, [sl]
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003572:	81a3      	strh	r3, [r4, #12]
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357c:	463a      	mov	r2, r7
 800357e:	6921      	ldr	r1, [r4, #16]
 8003580:	f000 faa8 	bl	8003ad4 <memcpy>
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	6126      	str	r6, [r4, #16]
 8003592:	6165      	str	r5, [r4, #20]
 8003594:	443e      	add	r6, r7
 8003596:	1bed      	subs	r5, r5, r7
 8003598:	6026      	str	r6, [r4, #0]
 800359a:	60a5      	str	r5, [r4, #8]
 800359c:	464e      	mov	r6, r9
 800359e:	454e      	cmp	r6, r9
 80035a0:	d900      	bls.n	80035a4 <__ssputs_r+0x84>
 80035a2:	464e      	mov	r6, r9
 80035a4:	4632      	mov	r2, r6
 80035a6:	4641      	mov	r1, r8
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	f000 fa9e 	bl	8003aea <memmove>
 80035ae:	68a3      	ldr	r3, [r4, #8]
 80035b0:	1b9b      	subs	r3, r3, r6
 80035b2:	60a3      	str	r3, [r4, #8]
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	441e      	add	r6, r3
 80035b8:	6026      	str	r6, [r4, #0]
 80035ba:	2000      	movs	r0, #0
 80035bc:	e7dc      	b.n	8003578 <__ssputs_r+0x58>
 80035be:	462a      	mov	r2, r5
 80035c0:	f000 fb54 	bl	8003c6c <_realloc_r>
 80035c4:	4606      	mov	r6, r0
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d1e2      	bne.n	8003590 <__ssputs_r+0x70>
 80035ca:	6921      	ldr	r1, [r4, #16]
 80035cc:	4650      	mov	r0, sl
 80035ce:	f000 faa5 	bl	8003b1c <_free_r>
 80035d2:	e7c8      	b.n	8003566 <__ssputs_r+0x46>

080035d4 <_svfiprintf_r>:
 80035d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d8:	461d      	mov	r5, r3
 80035da:	898b      	ldrh	r3, [r1, #12]
 80035dc:	061f      	lsls	r7, r3, #24
 80035de:	b09d      	sub	sp, #116	; 0x74
 80035e0:	4680      	mov	r8, r0
 80035e2:	460c      	mov	r4, r1
 80035e4:	4616      	mov	r6, r2
 80035e6:	d50f      	bpl.n	8003608 <_svfiprintf_r+0x34>
 80035e8:	690b      	ldr	r3, [r1, #16]
 80035ea:	b96b      	cbnz	r3, 8003608 <_svfiprintf_r+0x34>
 80035ec:	2140      	movs	r1, #64	; 0x40
 80035ee:	f000 fae3 	bl	8003bb8 <_malloc_r>
 80035f2:	6020      	str	r0, [r4, #0]
 80035f4:	6120      	str	r0, [r4, #16]
 80035f6:	b928      	cbnz	r0, 8003604 <_svfiprintf_r+0x30>
 80035f8:	230c      	movs	r3, #12
 80035fa:	f8c8 3000 	str.w	r3, [r8]
 80035fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003602:	e0c8      	b.n	8003796 <_svfiprintf_r+0x1c2>
 8003604:	2340      	movs	r3, #64	; 0x40
 8003606:	6163      	str	r3, [r4, #20]
 8003608:	2300      	movs	r3, #0
 800360a:	9309      	str	r3, [sp, #36]	; 0x24
 800360c:	2320      	movs	r3, #32
 800360e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003612:	2330      	movs	r3, #48	; 0x30
 8003614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003618:	9503      	str	r5, [sp, #12]
 800361a:	f04f 0b01 	mov.w	fp, #1
 800361e:	4637      	mov	r7, r6
 8003620:	463d      	mov	r5, r7
 8003622:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003626:	b10b      	cbz	r3, 800362c <_svfiprintf_r+0x58>
 8003628:	2b25      	cmp	r3, #37	; 0x25
 800362a:	d13e      	bne.n	80036aa <_svfiprintf_r+0xd6>
 800362c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003630:	d00b      	beq.n	800364a <_svfiprintf_r+0x76>
 8003632:	4653      	mov	r3, sl
 8003634:	4632      	mov	r2, r6
 8003636:	4621      	mov	r1, r4
 8003638:	4640      	mov	r0, r8
 800363a:	f7ff ff71 	bl	8003520 <__ssputs_r>
 800363e:	3001      	adds	r0, #1
 8003640:	f000 80a4 	beq.w	800378c <_svfiprintf_r+0x1b8>
 8003644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003646:	4453      	add	r3, sl
 8003648:	9309      	str	r3, [sp, #36]	; 0x24
 800364a:	783b      	ldrb	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 809d 	beq.w	800378c <_svfiprintf_r+0x1b8>
 8003652:	2300      	movs	r3, #0
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800365c:	9304      	str	r3, [sp, #16]
 800365e:	9307      	str	r3, [sp, #28]
 8003660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003664:	931a      	str	r3, [sp, #104]	; 0x68
 8003666:	462f      	mov	r7, r5
 8003668:	2205      	movs	r2, #5
 800366a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800366e:	4850      	ldr	r0, [pc, #320]	; (80037b0 <_svfiprintf_r+0x1dc>)
 8003670:	f7fc fdb6 	bl	80001e0 <memchr>
 8003674:	9b04      	ldr	r3, [sp, #16]
 8003676:	b9d0      	cbnz	r0, 80036ae <_svfiprintf_r+0xda>
 8003678:	06d9      	lsls	r1, r3, #27
 800367a:	bf44      	itt	mi
 800367c:	2220      	movmi	r2, #32
 800367e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003682:	071a      	lsls	r2, r3, #28
 8003684:	bf44      	itt	mi
 8003686:	222b      	movmi	r2, #43	; 0x2b
 8003688:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800368c:	782a      	ldrb	r2, [r5, #0]
 800368e:	2a2a      	cmp	r2, #42	; 0x2a
 8003690:	d015      	beq.n	80036be <_svfiprintf_r+0xea>
 8003692:	9a07      	ldr	r2, [sp, #28]
 8003694:	462f      	mov	r7, r5
 8003696:	2000      	movs	r0, #0
 8003698:	250a      	movs	r5, #10
 800369a:	4639      	mov	r1, r7
 800369c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036a0:	3b30      	subs	r3, #48	; 0x30
 80036a2:	2b09      	cmp	r3, #9
 80036a4:	d94d      	bls.n	8003742 <_svfiprintf_r+0x16e>
 80036a6:	b1b8      	cbz	r0, 80036d8 <_svfiprintf_r+0x104>
 80036a8:	e00f      	b.n	80036ca <_svfiprintf_r+0xf6>
 80036aa:	462f      	mov	r7, r5
 80036ac:	e7b8      	b.n	8003620 <_svfiprintf_r+0x4c>
 80036ae:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <_svfiprintf_r+0x1dc>)
 80036b0:	1a80      	subs	r0, r0, r2
 80036b2:	fa0b f000 	lsl.w	r0, fp, r0
 80036b6:	4318      	orrs	r0, r3
 80036b8:	9004      	str	r0, [sp, #16]
 80036ba:	463d      	mov	r5, r7
 80036bc:	e7d3      	b.n	8003666 <_svfiprintf_r+0x92>
 80036be:	9a03      	ldr	r2, [sp, #12]
 80036c0:	1d11      	adds	r1, r2, #4
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	9103      	str	r1, [sp, #12]
 80036c6:	2a00      	cmp	r2, #0
 80036c8:	db01      	blt.n	80036ce <_svfiprintf_r+0xfa>
 80036ca:	9207      	str	r2, [sp, #28]
 80036cc:	e004      	b.n	80036d8 <_svfiprintf_r+0x104>
 80036ce:	4252      	negs	r2, r2
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	9207      	str	r2, [sp, #28]
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	783b      	ldrb	r3, [r7, #0]
 80036da:	2b2e      	cmp	r3, #46	; 0x2e
 80036dc:	d10c      	bne.n	80036f8 <_svfiprintf_r+0x124>
 80036de:	787b      	ldrb	r3, [r7, #1]
 80036e0:	2b2a      	cmp	r3, #42	; 0x2a
 80036e2:	d133      	bne.n	800374c <_svfiprintf_r+0x178>
 80036e4:	9b03      	ldr	r3, [sp, #12]
 80036e6:	1d1a      	adds	r2, r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	9203      	str	r2, [sp, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bfb8      	it	lt
 80036f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80036f4:	3702      	adds	r7, #2
 80036f6:	9305      	str	r3, [sp, #20]
 80036f8:	4d2e      	ldr	r5, [pc, #184]	; (80037b4 <_svfiprintf_r+0x1e0>)
 80036fa:	7839      	ldrb	r1, [r7, #0]
 80036fc:	2203      	movs	r2, #3
 80036fe:	4628      	mov	r0, r5
 8003700:	f7fc fd6e 	bl	80001e0 <memchr>
 8003704:	b138      	cbz	r0, 8003716 <_svfiprintf_r+0x142>
 8003706:	2340      	movs	r3, #64	; 0x40
 8003708:	1b40      	subs	r0, r0, r5
 800370a:	fa03 f000 	lsl.w	r0, r3, r0
 800370e:	9b04      	ldr	r3, [sp, #16]
 8003710:	4303      	orrs	r3, r0
 8003712:	3701      	adds	r7, #1
 8003714:	9304      	str	r3, [sp, #16]
 8003716:	7839      	ldrb	r1, [r7, #0]
 8003718:	4827      	ldr	r0, [pc, #156]	; (80037b8 <_svfiprintf_r+0x1e4>)
 800371a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800371e:	2206      	movs	r2, #6
 8003720:	1c7e      	adds	r6, r7, #1
 8003722:	f7fc fd5d 	bl	80001e0 <memchr>
 8003726:	2800      	cmp	r0, #0
 8003728:	d038      	beq.n	800379c <_svfiprintf_r+0x1c8>
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <_svfiprintf_r+0x1e8>)
 800372c:	bb13      	cbnz	r3, 8003774 <_svfiprintf_r+0x1a0>
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	3307      	adds	r3, #7
 8003732:	f023 0307 	bic.w	r3, r3, #7
 8003736:	3308      	adds	r3, #8
 8003738:	9303      	str	r3, [sp, #12]
 800373a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800373c:	444b      	add	r3, r9
 800373e:	9309      	str	r3, [sp, #36]	; 0x24
 8003740:	e76d      	b.n	800361e <_svfiprintf_r+0x4a>
 8003742:	fb05 3202 	mla	r2, r5, r2, r3
 8003746:	2001      	movs	r0, #1
 8003748:	460f      	mov	r7, r1
 800374a:	e7a6      	b.n	800369a <_svfiprintf_r+0xc6>
 800374c:	2300      	movs	r3, #0
 800374e:	3701      	adds	r7, #1
 8003750:	9305      	str	r3, [sp, #20]
 8003752:	4619      	mov	r1, r3
 8003754:	250a      	movs	r5, #10
 8003756:	4638      	mov	r0, r7
 8003758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800375c:	3a30      	subs	r2, #48	; 0x30
 800375e:	2a09      	cmp	r2, #9
 8003760:	d903      	bls.n	800376a <_svfiprintf_r+0x196>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0c8      	beq.n	80036f8 <_svfiprintf_r+0x124>
 8003766:	9105      	str	r1, [sp, #20]
 8003768:	e7c6      	b.n	80036f8 <_svfiprintf_r+0x124>
 800376a:	fb05 2101 	mla	r1, r5, r1, r2
 800376e:	2301      	movs	r3, #1
 8003770:	4607      	mov	r7, r0
 8003772:	e7f0      	b.n	8003756 <_svfiprintf_r+0x182>
 8003774:	ab03      	add	r3, sp, #12
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4622      	mov	r2, r4
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <_svfiprintf_r+0x1ec>)
 800377c:	a904      	add	r1, sp, #16
 800377e:	4640      	mov	r0, r8
 8003780:	f3af 8000 	nop.w
 8003784:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003788:	4681      	mov	r9, r0
 800378a:	d1d6      	bne.n	800373a <_svfiprintf_r+0x166>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	065b      	lsls	r3, r3, #25
 8003790:	f53f af35 	bmi.w	80035fe <_svfiprintf_r+0x2a>
 8003794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003796:	b01d      	add	sp, #116	; 0x74
 8003798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800379c:	ab03      	add	r3, sp, #12
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4622      	mov	r2, r4
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <_svfiprintf_r+0x1ec>)
 80037a4:	a904      	add	r1, sp, #16
 80037a6:	4640      	mov	r0, r8
 80037a8:	f000 f882 	bl	80038b0 <_printf_i>
 80037ac:	e7ea      	b.n	8003784 <_svfiprintf_r+0x1b0>
 80037ae:	bf00      	nop
 80037b0:	080041c4 	.word	0x080041c4
 80037b4:	080041ca 	.word	0x080041ca
 80037b8:	080041ce 	.word	0x080041ce
 80037bc:	00000000 	.word	0x00000000
 80037c0:	08003521 	.word	0x08003521

080037c4 <_printf_common>:
 80037c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c8:	4691      	mov	r9, r2
 80037ca:	461f      	mov	r7, r3
 80037cc:	688a      	ldr	r2, [r1, #8]
 80037ce:	690b      	ldr	r3, [r1, #16]
 80037d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037d4:	4293      	cmp	r3, r2
 80037d6:	bfb8      	it	lt
 80037d8:	4613      	movlt	r3, r2
 80037da:	f8c9 3000 	str.w	r3, [r9]
 80037de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037e2:	4606      	mov	r6, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	b112      	cbz	r2, 80037ee <_printf_common+0x2a>
 80037e8:	3301      	adds	r3, #1
 80037ea:	f8c9 3000 	str.w	r3, [r9]
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	0699      	lsls	r1, r3, #26
 80037f2:	bf42      	ittt	mi
 80037f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037f8:	3302      	addmi	r3, #2
 80037fa:	f8c9 3000 	strmi.w	r3, [r9]
 80037fe:	6825      	ldr	r5, [r4, #0]
 8003800:	f015 0506 	ands.w	r5, r5, #6
 8003804:	d107      	bne.n	8003816 <_printf_common+0x52>
 8003806:	f104 0a19 	add.w	sl, r4, #25
 800380a:	68e3      	ldr	r3, [r4, #12]
 800380c:	f8d9 2000 	ldr.w	r2, [r9]
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	42ab      	cmp	r3, r5
 8003814:	dc28      	bgt.n	8003868 <_printf_common+0xa4>
 8003816:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	3300      	adds	r3, #0
 800381e:	bf18      	it	ne
 8003820:	2301      	movne	r3, #1
 8003822:	0692      	lsls	r2, r2, #26
 8003824:	d42d      	bmi.n	8003882 <_printf_common+0xbe>
 8003826:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800382a:	4639      	mov	r1, r7
 800382c:	4630      	mov	r0, r6
 800382e:	47c0      	blx	r8
 8003830:	3001      	adds	r0, #1
 8003832:	d020      	beq.n	8003876 <_printf_common+0xb2>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	68e5      	ldr	r5, [r4, #12]
 8003838:	f8d9 2000 	ldr.w	r2, [r9]
 800383c:	f003 0306 	and.w	r3, r3, #6
 8003840:	2b04      	cmp	r3, #4
 8003842:	bf08      	it	eq
 8003844:	1aad      	subeq	r5, r5, r2
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	6922      	ldr	r2, [r4, #16]
 800384a:	bf0c      	ite	eq
 800384c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003850:	2500      	movne	r5, #0
 8003852:	4293      	cmp	r3, r2
 8003854:	bfc4      	itt	gt
 8003856:	1a9b      	subgt	r3, r3, r2
 8003858:	18ed      	addgt	r5, r5, r3
 800385a:	f04f 0900 	mov.w	r9, #0
 800385e:	341a      	adds	r4, #26
 8003860:	454d      	cmp	r5, r9
 8003862:	d11a      	bne.n	800389a <_printf_common+0xd6>
 8003864:	2000      	movs	r0, #0
 8003866:	e008      	b.n	800387a <_printf_common+0xb6>
 8003868:	2301      	movs	r3, #1
 800386a:	4652      	mov	r2, sl
 800386c:	4639      	mov	r1, r7
 800386e:	4630      	mov	r0, r6
 8003870:	47c0      	blx	r8
 8003872:	3001      	adds	r0, #1
 8003874:	d103      	bne.n	800387e <_printf_common+0xba>
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387e:	3501      	adds	r5, #1
 8003880:	e7c3      	b.n	800380a <_printf_common+0x46>
 8003882:	18e1      	adds	r1, r4, r3
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	2030      	movs	r0, #48	; 0x30
 8003888:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800388c:	4422      	add	r2, r4
 800388e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003892:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003896:	3302      	adds	r3, #2
 8003898:	e7c5      	b.n	8003826 <_printf_common+0x62>
 800389a:	2301      	movs	r3, #1
 800389c:	4622      	mov	r2, r4
 800389e:	4639      	mov	r1, r7
 80038a0:	4630      	mov	r0, r6
 80038a2:	47c0      	blx	r8
 80038a4:	3001      	adds	r0, #1
 80038a6:	d0e6      	beq.n	8003876 <_printf_common+0xb2>
 80038a8:	f109 0901 	add.w	r9, r9, #1
 80038ac:	e7d8      	b.n	8003860 <_printf_common+0x9c>
	...

080038b0 <_printf_i>:
 80038b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038b8:	460c      	mov	r4, r1
 80038ba:	7e09      	ldrb	r1, [r1, #24]
 80038bc:	b085      	sub	sp, #20
 80038be:	296e      	cmp	r1, #110	; 0x6e
 80038c0:	4617      	mov	r7, r2
 80038c2:	4606      	mov	r6, r0
 80038c4:	4698      	mov	r8, r3
 80038c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038c8:	f000 80b3 	beq.w	8003a32 <_printf_i+0x182>
 80038cc:	d822      	bhi.n	8003914 <_printf_i+0x64>
 80038ce:	2963      	cmp	r1, #99	; 0x63
 80038d0:	d036      	beq.n	8003940 <_printf_i+0x90>
 80038d2:	d80a      	bhi.n	80038ea <_printf_i+0x3a>
 80038d4:	2900      	cmp	r1, #0
 80038d6:	f000 80b9 	beq.w	8003a4c <_printf_i+0x19c>
 80038da:	2958      	cmp	r1, #88	; 0x58
 80038dc:	f000 8083 	beq.w	80039e6 <_printf_i+0x136>
 80038e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038e8:	e032      	b.n	8003950 <_printf_i+0xa0>
 80038ea:	2964      	cmp	r1, #100	; 0x64
 80038ec:	d001      	beq.n	80038f2 <_printf_i+0x42>
 80038ee:	2969      	cmp	r1, #105	; 0x69
 80038f0:	d1f6      	bne.n	80038e0 <_printf_i+0x30>
 80038f2:	6820      	ldr	r0, [r4, #0]
 80038f4:	6813      	ldr	r3, [r2, #0]
 80038f6:	0605      	lsls	r5, r0, #24
 80038f8:	f103 0104 	add.w	r1, r3, #4
 80038fc:	d52a      	bpl.n	8003954 <_printf_i+0xa4>
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	da03      	bge.n	800390e <_printf_i+0x5e>
 8003906:	222d      	movs	r2, #45	; 0x2d
 8003908:	425b      	negs	r3, r3
 800390a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800390e:	486f      	ldr	r0, [pc, #444]	; (8003acc <_printf_i+0x21c>)
 8003910:	220a      	movs	r2, #10
 8003912:	e039      	b.n	8003988 <_printf_i+0xd8>
 8003914:	2973      	cmp	r1, #115	; 0x73
 8003916:	f000 809d 	beq.w	8003a54 <_printf_i+0x1a4>
 800391a:	d808      	bhi.n	800392e <_printf_i+0x7e>
 800391c:	296f      	cmp	r1, #111	; 0x6f
 800391e:	d020      	beq.n	8003962 <_printf_i+0xb2>
 8003920:	2970      	cmp	r1, #112	; 0x70
 8003922:	d1dd      	bne.n	80038e0 <_printf_i+0x30>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	f043 0320 	orr.w	r3, r3, #32
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	e003      	b.n	8003936 <_printf_i+0x86>
 800392e:	2975      	cmp	r1, #117	; 0x75
 8003930:	d017      	beq.n	8003962 <_printf_i+0xb2>
 8003932:	2978      	cmp	r1, #120	; 0x78
 8003934:	d1d4      	bne.n	80038e0 <_printf_i+0x30>
 8003936:	2378      	movs	r3, #120	; 0x78
 8003938:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800393c:	4864      	ldr	r0, [pc, #400]	; (8003ad0 <_printf_i+0x220>)
 800393e:	e055      	b.n	80039ec <_printf_i+0x13c>
 8003940:	6813      	ldr	r3, [r2, #0]
 8003942:	1d19      	adds	r1, r3, #4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6011      	str	r1, [r2, #0]
 8003948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800394c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003950:	2301      	movs	r3, #1
 8003952:	e08c      	b.n	8003a6e <_printf_i+0x1be>
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6011      	str	r1, [r2, #0]
 8003958:	f010 0f40 	tst.w	r0, #64	; 0x40
 800395c:	bf18      	it	ne
 800395e:	b21b      	sxthne	r3, r3
 8003960:	e7cf      	b.n	8003902 <_printf_i+0x52>
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	6825      	ldr	r5, [r4, #0]
 8003966:	1d18      	adds	r0, r3, #4
 8003968:	6010      	str	r0, [r2, #0]
 800396a:	0628      	lsls	r0, r5, #24
 800396c:	d501      	bpl.n	8003972 <_printf_i+0xc2>
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	e002      	b.n	8003978 <_printf_i+0xc8>
 8003972:	0668      	lsls	r0, r5, #25
 8003974:	d5fb      	bpl.n	800396e <_printf_i+0xbe>
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	4854      	ldr	r0, [pc, #336]	; (8003acc <_printf_i+0x21c>)
 800397a:	296f      	cmp	r1, #111	; 0x6f
 800397c:	bf14      	ite	ne
 800397e:	220a      	movne	r2, #10
 8003980:	2208      	moveq	r2, #8
 8003982:	2100      	movs	r1, #0
 8003984:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003988:	6865      	ldr	r5, [r4, #4]
 800398a:	60a5      	str	r5, [r4, #8]
 800398c:	2d00      	cmp	r5, #0
 800398e:	f2c0 8095 	blt.w	8003abc <_printf_i+0x20c>
 8003992:	6821      	ldr	r1, [r4, #0]
 8003994:	f021 0104 	bic.w	r1, r1, #4
 8003998:	6021      	str	r1, [r4, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d13d      	bne.n	8003a1a <_printf_i+0x16a>
 800399e:	2d00      	cmp	r5, #0
 80039a0:	f040 808e 	bne.w	8003ac0 <_printf_i+0x210>
 80039a4:	4665      	mov	r5, ip
 80039a6:	2a08      	cmp	r2, #8
 80039a8:	d10b      	bne.n	80039c2 <_printf_i+0x112>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	07db      	lsls	r3, r3, #31
 80039ae:	d508      	bpl.n	80039c2 <_printf_i+0x112>
 80039b0:	6923      	ldr	r3, [r4, #16]
 80039b2:	6862      	ldr	r2, [r4, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	bfde      	ittt	le
 80039b8:	2330      	movle	r3, #48	; 0x30
 80039ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039c2:	ebac 0305 	sub.w	r3, ip, r5
 80039c6:	6123      	str	r3, [r4, #16]
 80039c8:	f8cd 8000 	str.w	r8, [sp]
 80039cc:	463b      	mov	r3, r7
 80039ce:	aa03      	add	r2, sp, #12
 80039d0:	4621      	mov	r1, r4
 80039d2:	4630      	mov	r0, r6
 80039d4:	f7ff fef6 	bl	80037c4 <_printf_common>
 80039d8:	3001      	adds	r0, #1
 80039da:	d14d      	bne.n	8003a78 <_printf_i+0x1c8>
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	b005      	add	sp, #20
 80039e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039e6:	4839      	ldr	r0, [pc, #228]	; (8003acc <_printf_i+0x21c>)
 80039e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039ec:	6813      	ldr	r3, [r2, #0]
 80039ee:	6821      	ldr	r1, [r4, #0]
 80039f0:	1d1d      	adds	r5, r3, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6015      	str	r5, [r2, #0]
 80039f6:	060a      	lsls	r2, r1, #24
 80039f8:	d50b      	bpl.n	8003a12 <_printf_i+0x162>
 80039fa:	07ca      	lsls	r2, r1, #31
 80039fc:	bf44      	itt	mi
 80039fe:	f041 0120 	orrmi.w	r1, r1, #32
 8003a02:	6021      	strmi	r1, [r4, #0]
 8003a04:	b91b      	cbnz	r3, 8003a0e <_printf_i+0x15e>
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	f022 0220 	bic.w	r2, r2, #32
 8003a0c:	6022      	str	r2, [r4, #0]
 8003a0e:	2210      	movs	r2, #16
 8003a10:	e7b7      	b.n	8003982 <_printf_i+0xd2>
 8003a12:	064d      	lsls	r5, r1, #25
 8003a14:	bf48      	it	mi
 8003a16:	b29b      	uxthmi	r3, r3
 8003a18:	e7ef      	b.n	80039fa <_printf_i+0x14a>
 8003a1a:	4665      	mov	r5, ip
 8003a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a20:	fb02 3311 	mls	r3, r2, r1, r3
 8003a24:	5cc3      	ldrb	r3, [r0, r3]
 8003a26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	d1f5      	bne.n	8003a1c <_printf_i+0x16c>
 8003a30:	e7b9      	b.n	80039a6 <_printf_i+0xf6>
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	6825      	ldr	r5, [r4, #0]
 8003a36:	6961      	ldr	r1, [r4, #20]
 8003a38:	1d18      	adds	r0, r3, #4
 8003a3a:	6010      	str	r0, [r2, #0]
 8003a3c:	0628      	lsls	r0, r5, #24
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	d501      	bpl.n	8003a46 <_printf_i+0x196>
 8003a42:	6019      	str	r1, [r3, #0]
 8003a44:	e002      	b.n	8003a4c <_printf_i+0x19c>
 8003a46:	066a      	lsls	r2, r5, #25
 8003a48:	d5fb      	bpl.n	8003a42 <_printf_i+0x192>
 8003a4a:	8019      	strh	r1, [r3, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	4665      	mov	r5, ip
 8003a52:	e7b9      	b.n	80039c8 <_printf_i+0x118>
 8003a54:	6813      	ldr	r3, [r2, #0]
 8003a56:	1d19      	adds	r1, r3, #4
 8003a58:	6011      	str	r1, [r2, #0]
 8003a5a:	681d      	ldr	r5, [r3, #0]
 8003a5c:	6862      	ldr	r2, [r4, #4]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4628      	mov	r0, r5
 8003a62:	f7fc fbbd 	bl	80001e0 <memchr>
 8003a66:	b108      	cbz	r0, 8003a6c <_printf_i+0x1bc>
 8003a68:	1b40      	subs	r0, r0, r5
 8003a6a:	6060      	str	r0, [r4, #4]
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	6123      	str	r3, [r4, #16]
 8003a70:	2300      	movs	r3, #0
 8003a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a76:	e7a7      	b.n	80039c8 <_printf_i+0x118>
 8003a78:	6923      	ldr	r3, [r4, #16]
 8003a7a:	462a      	mov	r2, r5
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	4630      	mov	r0, r6
 8003a80:	47c0      	blx	r8
 8003a82:	3001      	adds	r0, #1
 8003a84:	d0aa      	beq.n	80039dc <_printf_i+0x12c>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	079b      	lsls	r3, r3, #30
 8003a8a:	d413      	bmi.n	8003ab4 <_printf_i+0x204>
 8003a8c:	68e0      	ldr	r0, [r4, #12]
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	4298      	cmp	r0, r3
 8003a92:	bfb8      	it	lt
 8003a94:	4618      	movlt	r0, r3
 8003a96:	e7a3      	b.n	80039e0 <_printf_i+0x130>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	464a      	mov	r2, r9
 8003a9c:	4639      	mov	r1, r7
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	47c0      	blx	r8
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d09a      	beq.n	80039dc <_printf_i+0x12c>
 8003aa6:	3501      	adds	r5, #1
 8003aa8:	68e3      	ldr	r3, [r4, #12]
 8003aaa:	9a03      	ldr	r2, [sp, #12]
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	42ab      	cmp	r3, r5
 8003ab0:	dcf2      	bgt.n	8003a98 <_printf_i+0x1e8>
 8003ab2:	e7eb      	b.n	8003a8c <_printf_i+0x1dc>
 8003ab4:	2500      	movs	r5, #0
 8003ab6:	f104 0919 	add.w	r9, r4, #25
 8003aba:	e7f5      	b.n	8003aa8 <_printf_i+0x1f8>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ac      	bne.n	8003a1a <_printf_i+0x16a>
 8003ac0:	7803      	ldrb	r3, [r0, #0]
 8003ac2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ac6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aca:	e76c      	b.n	80039a6 <_printf_i+0xf6>
 8003acc:	080041d5 	.word	0x080041d5
 8003ad0:	080041e6 	.word	0x080041e6

08003ad4 <memcpy>:
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	1e43      	subs	r3, r0, #1
 8003ad8:	440a      	add	r2, r1
 8003ada:	4291      	cmp	r1, r2
 8003adc:	d100      	bne.n	8003ae0 <memcpy+0xc>
 8003ade:	bd10      	pop	{r4, pc}
 8003ae0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ae8:	e7f7      	b.n	8003ada <memcpy+0x6>

08003aea <memmove>:
 8003aea:	4288      	cmp	r0, r1
 8003aec:	b510      	push	{r4, lr}
 8003aee:	eb01 0302 	add.w	r3, r1, r2
 8003af2:	d807      	bhi.n	8003b04 <memmove+0x1a>
 8003af4:	1e42      	subs	r2, r0, #1
 8003af6:	4299      	cmp	r1, r3
 8003af8:	d00a      	beq.n	8003b10 <memmove+0x26>
 8003afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003afe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b02:	e7f8      	b.n	8003af6 <memmove+0xc>
 8003b04:	4283      	cmp	r3, r0
 8003b06:	d9f5      	bls.n	8003af4 <memmove+0xa>
 8003b08:	1881      	adds	r1, r0, r2
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	42d3      	cmn	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memmove+0x28>
 8003b10:	bd10      	pop	{r4, pc}
 8003b12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b16:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b1a:	e7f7      	b.n	8003b0c <memmove+0x22>

08003b1c <_free_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4605      	mov	r5, r0
 8003b20:	2900      	cmp	r1, #0
 8003b22:	d045      	beq.n	8003bb0 <_free_r+0x94>
 8003b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b28:	1f0c      	subs	r4, r1, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bfb8      	it	lt
 8003b2e:	18e4      	addlt	r4, r4, r3
 8003b30:	f000 f8d2 	bl	8003cd8 <__malloc_lock>
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <_free_r+0x98>)
 8003b36:	6813      	ldr	r3, [r2, #0]
 8003b38:	4610      	mov	r0, r2
 8003b3a:	b933      	cbnz	r3, 8003b4a <_free_r+0x2e>
 8003b3c:	6063      	str	r3, [r4, #4]
 8003b3e:	6014      	str	r4, [r2, #0]
 8003b40:	4628      	mov	r0, r5
 8003b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b46:	f000 b8c8 	b.w	8003cda <__malloc_unlock>
 8003b4a:	42a3      	cmp	r3, r4
 8003b4c:	d90c      	bls.n	8003b68 <_free_r+0x4c>
 8003b4e:	6821      	ldr	r1, [r4, #0]
 8003b50:	1862      	adds	r2, r4, r1
 8003b52:	4293      	cmp	r3, r2
 8003b54:	bf04      	itt	eq
 8003b56:	681a      	ldreq	r2, [r3, #0]
 8003b58:	685b      	ldreq	r3, [r3, #4]
 8003b5a:	6063      	str	r3, [r4, #4]
 8003b5c:	bf04      	itt	eq
 8003b5e:	1852      	addeq	r2, r2, r1
 8003b60:	6022      	streq	r2, [r4, #0]
 8003b62:	6004      	str	r4, [r0, #0]
 8003b64:	e7ec      	b.n	8003b40 <_free_r+0x24>
 8003b66:	4613      	mov	r3, r2
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	b10a      	cbz	r2, 8003b70 <_free_r+0x54>
 8003b6c:	42a2      	cmp	r2, r4
 8003b6e:	d9fa      	bls.n	8003b66 <_free_r+0x4a>
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	1858      	adds	r0, r3, r1
 8003b74:	42a0      	cmp	r0, r4
 8003b76:	d10b      	bne.n	8003b90 <_free_r+0x74>
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	4401      	add	r1, r0
 8003b7c:	1858      	adds	r0, r3, r1
 8003b7e:	4282      	cmp	r2, r0
 8003b80:	6019      	str	r1, [r3, #0]
 8003b82:	d1dd      	bne.n	8003b40 <_free_r+0x24>
 8003b84:	6810      	ldr	r0, [r2, #0]
 8003b86:	6852      	ldr	r2, [r2, #4]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	4401      	add	r1, r0
 8003b8c:	6019      	str	r1, [r3, #0]
 8003b8e:	e7d7      	b.n	8003b40 <_free_r+0x24>
 8003b90:	d902      	bls.n	8003b98 <_free_r+0x7c>
 8003b92:	230c      	movs	r3, #12
 8003b94:	602b      	str	r3, [r5, #0]
 8003b96:	e7d3      	b.n	8003b40 <_free_r+0x24>
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	1821      	adds	r1, r4, r0
 8003b9c:	428a      	cmp	r2, r1
 8003b9e:	bf04      	itt	eq
 8003ba0:	6811      	ldreq	r1, [r2, #0]
 8003ba2:	6852      	ldreq	r2, [r2, #4]
 8003ba4:	6062      	str	r2, [r4, #4]
 8003ba6:	bf04      	itt	eq
 8003ba8:	1809      	addeq	r1, r1, r0
 8003baa:	6021      	streq	r1, [r4, #0]
 8003bac:	605c      	str	r4, [r3, #4]
 8003bae:	e7c7      	b.n	8003b40 <_free_r+0x24>
 8003bb0:	bd38      	pop	{r3, r4, r5, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000098 	.word	0x20000098

08003bb8 <_malloc_r>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	1ccd      	adds	r5, r1, #3
 8003bbc:	f025 0503 	bic.w	r5, r5, #3
 8003bc0:	3508      	adds	r5, #8
 8003bc2:	2d0c      	cmp	r5, #12
 8003bc4:	bf38      	it	cc
 8003bc6:	250c      	movcc	r5, #12
 8003bc8:	2d00      	cmp	r5, #0
 8003bca:	4606      	mov	r6, r0
 8003bcc:	db01      	blt.n	8003bd2 <_malloc_r+0x1a>
 8003bce:	42a9      	cmp	r1, r5
 8003bd0:	d903      	bls.n	8003bda <_malloc_r+0x22>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	6033      	str	r3, [r6, #0]
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	bd70      	pop	{r4, r5, r6, pc}
 8003bda:	f000 f87d 	bl	8003cd8 <__malloc_lock>
 8003bde:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <_malloc_r+0xac>)
 8003be0:	6814      	ldr	r4, [r2, #0]
 8003be2:	4621      	mov	r1, r4
 8003be4:	b991      	cbnz	r1, 8003c0c <_malloc_r+0x54>
 8003be6:	4c20      	ldr	r4, [pc, #128]	; (8003c68 <_malloc_r+0xb0>)
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	b91b      	cbnz	r3, 8003bf4 <_malloc_r+0x3c>
 8003bec:	4630      	mov	r0, r6
 8003bee:	f000 f863 	bl	8003cb8 <_sbrk_r>
 8003bf2:	6020      	str	r0, [r4, #0]
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 f85e 	bl	8003cb8 <_sbrk_r>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d124      	bne.n	8003c4a <_malloc_r+0x92>
 8003c00:	230c      	movs	r3, #12
 8003c02:	6033      	str	r3, [r6, #0]
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f868 	bl	8003cda <__malloc_unlock>
 8003c0a:	e7e4      	b.n	8003bd6 <_malloc_r+0x1e>
 8003c0c:	680b      	ldr	r3, [r1, #0]
 8003c0e:	1b5b      	subs	r3, r3, r5
 8003c10:	d418      	bmi.n	8003c44 <_malloc_r+0x8c>
 8003c12:	2b0b      	cmp	r3, #11
 8003c14:	d90f      	bls.n	8003c36 <_malloc_r+0x7e>
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	50cd      	str	r5, [r1, r3]
 8003c1a:	18cc      	adds	r4, r1, r3
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f000 f85c 	bl	8003cda <__malloc_unlock>
 8003c22:	f104 000b 	add.w	r0, r4, #11
 8003c26:	1d23      	adds	r3, r4, #4
 8003c28:	f020 0007 	bic.w	r0, r0, #7
 8003c2c:	1ac3      	subs	r3, r0, r3
 8003c2e:	d0d3      	beq.n	8003bd8 <_malloc_r+0x20>
 8003c30:	425a      	negs	r2, r3
 8003c32:	50e2      	str	r2, [r4, r3]
 8003c34:	e7d0      	b.n	8003bd8 <_malloc_r+0x20>
 8003c36:	428c      	cmp	r4, r1
 8003c38:	684b      	ldr	r3, [r1, #4]
 8003c3a:	bf16      	itet	ne
 8003c3c:	6063      	strne	r3, [r4, #4]
 8003c3e:	6013      	streq	r3, [r2, #0]
 8003c40:	460c      	movne	r4, r1
 8003c42:	e7eb      	b.n	8003c1c <_malloc_r+0x64>
 8003c44:	460c      	mov	r4, r1
 8003c46:	6849      	ldr	r1, [r1, #4]
 8003c48:	e7cc      	b.n	8003be4 <_malloc_r+0x2c>
 8003c4a:	1cc4      	adds	r4, r0, #3
 8003c4c:	f024 0403 	bic.w	r4, r4, #3
 8003c50:	42a0      	cmp	r0, r4
 8003c52:	d005      	beq.n	8003c60 <_malloc_r+0xa8>
 8003c54:	1a21      	subs	r1, r4, r0
 8003c56:	4630      	mov	r0, r6
 8003c58:	f000 f82e 	bl	8003cb8 <_sbrk_r>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d0cf      	beq.n	8003c00 <_malloc_r+0x48>
 8003c60:	6025      	str	r5, [r4, #0]
 8003c62:	e7db      	b.n	8003c1c <_malloc_r+0x64>
 8003c64:	20000098 	.word	0x20000098
 8003c68:	2000009c 	.word	0x2000009c

08003c6c <_realloc_r>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	4607      	mov	r7, r0
 8003c70:	4614      	mov	r4, r2
 8003c72:	460e      	mov	r6, r1
 8003c74:	b921      	cbnz	r1, 8003c80 <_realloc_r+0x14>
 8003c76:	4611      	mov	r1, r2
 8003c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c7c:	f7ff bf9c 	b.w	8003bb8 <_malloc_r>
 8003c80:	b922      	cbnz	r2, 8003c8c <_realloc_r+0x20>
 8003c82:	f7ff ff4b 	bl	8003b1c <_free_r>
 8003c86:	4625      	mov	r5, r4
 8003c88:	4628      	mov	r0, r5
 8003c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c8c:	f000 f826 	bl	8003cdc <_malloc_usable_size_r>
 8003c90:	42a0      	cmp	r0, r4
 8003c92:	d20f      	bcs.n	8003cb4 <_realloc_r+0x48>
 8003c94:	4621      	mov	r1, r4
 8003c96:	4638      	mov	r0, r7
 8003c98:	f7ff ff8e 	bl	8003bb8 <_malloc_r>
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d0f2      	beq.n	8003c88 <_realloc_r+0x1c>
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	f7ff ff15 	bl	8003ad4 <memcpy>
 8003caa:	4631      	mov	r1, r6
 8003cac:	4638      	mov	r0, r7
 8003cae:	f7ff ff35 	bl	8003b1c <_free_r>
 8003cb2:	e7e9      	b.n	8003c88 <_realloc_r+0x1c>
 8003cb4:	4635      	mov	r5, r6
 8003cb6:	e7e7      	b.n	8003c88 <_realloc_r+0x1c>

08003cb8 <_sbrk_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4c06      	ldr	r4, [pc, #24]	; (8003cd4 <_sbrk_r+0x1c>)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	6023      	str	r3, [r4, #0]
 8003cc4:	f7fd fba0 	bl	8001408 <_sbrk>
 8003cc8:	1c43      	adds	r3, r0, #1
 8003cca:	d102      	bne.n	8003cd2 <_sbrk_r+0x1a>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	b103      	cbz	r3, 8003cd2 <_sbrk_r+0x1a>
 8003cd0:	602b      	str	r3, [r5, #0]
 8003cd2:	bd38      	pop	{r3, r4, r5, pc}
 8003cd4:	20000214 	.word	0x20000214

08003cd8 <__malloc_lock>:
 8003cd8:	4770      	bx	lr

08003cda <__malloc_unlock>:
 8003cda:	4770      	bx	lr

08003cdc <_malloc_usable_size_r>:
 8003cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce0:	1f18      	subs	r0, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bfbc      	itt	lt
 8003ce6:	580b      	ldrlt	r3, [r1, r0]
 8003ce8:	18c0      	addlt	r0, r0, r3
 8003cea:	4770      	bx	lr

08003cec <_init>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr

08003cf8 <_fini>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr
