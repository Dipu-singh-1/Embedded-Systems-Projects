
TEST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004118  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d0  080042d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000010  080042e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080042e8  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebaa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000219e  00000000  00000000  0002ebea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  00030d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  00031868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002182b  00000000  00000000  00032250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c64  00000000  00000000  00053a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca197  00000000  00000000  0005d6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c88  00000000  00000000  001278f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004288 	.word	0x08004288

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004288 	.word	0x08004288

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <return_capital>:
/* USER CODE BEGIN 0 */
char *user_data = "Hello World\r\n";
char data_user='\0';

char return_capital(char x)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	if( x >= 'a' && x <= 'z')
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b60      	cmp	r3, #96	; 0x60
 80004e6:	d905      	bls.n	80004f4 <return_capital+0x1c>
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b7a      	cmp	r3, #122	; 0x7a
 80004ec:	d802      	bhi.n	80004f4 <return_capital+0x1c>
	{
		x = x - ('a'- 'A');
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	3b20      	subs	r3, #32
 80004f2:	71fb      	strb	r3, [r7, #7]
	}

	return x;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b09b      	sub	sp, #108	; 0x6c
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t cnt=0;
 800050a:	2300      	movs	r3, #0
 800050c:	667b      	str	r3, [r7, #100]	; 0x64
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fb37 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f843 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8ed 	bl	80006f4 <MX_GPIO_Init>
  //MX_I2C1_Init();
  //MX_I2S3_Init();
  //MX_SPI1_Init();
  //MX_USB_HOST_Init();
  MX_USART2_UART_Init();
 800051a:	f000 f8c1 	bl	80006a0 <MX_USART2_UART_Init>
  //MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t*)user_data, strlen(user_data), HAL_MAX_DELAY);
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <main+0x8c>)
 8000520:	681c      	ldr	r4, [r3, #0]
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <main+0x8c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe4e 	bl	80001c8 <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	b29a      	uxth	r2, r3
 8000530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000534:	4621      	mov	r1, r4
 8000536:	4817      	ldr	r0, [pc, #92]	; (8000594 <main+0x90>)
 8000538:	f002 fd4d 	bl	8002fd6 <HAL_UART_Transmit>
  while(data_user != '\r')
 800053c:	e015      	b.n	800056a <main+0x66>
    {
  	  HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 800053e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000542:	2201      	movs	r2, #1
 8000544:	4914      	ldr	r1, [pc, #80]	; (8000598 <main+0x94>)
 8000546:	4813      	ldr	r0, [pc, #76]	; (8000594 <main+0x90>)
 8000548:	f002 fdde 	bl	8003108 <HAL_UART_Receive>
  	  data_buf[cnt]=return_capital(data_user);
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <main+0x94>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ffc1 	bl	80004d8 <return_capital>
 8000556:	4603      	mov	r3, r0
 8000558:	4619      	mov	r1, r3
 800055a:	463a      	mov	r2, r7
 800055c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800055e:	4413      	add	r3, r2
 8000560:	460a      	mov	r2, r1
 8000562:	701a      	strb	r2, [r3, #0]
  	  cnt++;
 8000564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000566:	3301      	adds	r3, #1
 8000568:	667b      	str	r3, [r7, #100]	; 0x64
  while(data_user != '\r')
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <main+0x94>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b0d      	cmp	r3, #13
 8000570:	d1e5      	bne.n	800053e <main+0x3a>
    }

    data_buf[cnt] = 10; //add new line or line feed character
 8000572:	463a      	mov	r2, r7
 8000574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000576:	4413      	add	r3, r2
 8000578:	220a      	movs	r2, #10
 800057a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)data_buf, cnt, HAL_MAX_DELAY);
 800057c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800057e:	b29a      	uxth	r2, r3
 8000580:	4639      	mov	r1, r7
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <main+0x90>)
 8000588:	f002 fd25 	bl	8002fd6 <HAL_UART_Transmit>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x88>
 800058e:	bf00      	nop
 8000590:	20000000 	.word	0x20000000
 8000594:	2000011c 	.word	0x2000011c
 8000598:	2000002c 	.word	0x2000002c

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fe64 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <SystemClock_Config+0xfc>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a30      	ldr	r2, [pc, #192]	; (8000698 <SystemClock_Config+0xfc>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <SystemClock_Config+0xfc>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemClock_Config+0x100>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemClock_Config+0x100>)
 80005f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0x100>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061a:	2308      	movs	r3, #8
 800061c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800061e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000622:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000628:	2307      	movs	r3, #7
 800062a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000630:	4618      	mov	r0, r3
 8000632:	f001 ff3f 	bl	80024b4 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800063c:	f000 f958 	bl	80008f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	2105      	movs	r1, #5
 800065e:	4618      	mov	r0, r3
 8000660:	f002 f998 	bl	8002994 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800066a:	f000 f941 	bl	80008f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800066e:	2301      	movs	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000672:	23c0      	movs	r3, #192	; 0xc0
 8000674:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fb7a 	bl	8002d78 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800068a:	f000 f931 	bl	80008f0 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3760      	adds	r7, #96	; 0x60
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f002 fc30 	bl	8002f3c <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f905 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000011c 	.word	0x2000011c
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4b71      	ldr	r3, [pc, #452]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a70      	ldr	r2, [pc, #448]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b6e      	ldr	r3, [pc, #440]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b6a      	ldr	r3, [pc, #424]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a69      	ldr	r2, [pc, #420]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b63      	ldr	r3, [pc, #396]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a62      	ldr	r2, [pc, #392]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b60      	ldr	r3, [pc, #384]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b5c      	ldr	r3, [pc, #368]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a5b      	ldr	r2, [pc, #364]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b59      	ldr	r3, [pc, #356]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b55      	ldr	r3, [pc, #340]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a54      	ldr	r2, [pc, #336]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b52      	ldr	r3, [pc, #328]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b4e      	ldr	r3, [pc, #312]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a4d      	ldr	r2, [pc, #308]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b4b      	ldr	r3, [pc, #300]	; (80008d4 <MX_GPIO_Init+0x1e0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	4848      	ldr	r0, [pc, #288]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 80007b8:	f000 fcd4 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	4846      	ldr	r0, [pc, #280]	; (80008dc <MX_GPIO_Init+0x1e8>)
 80007c2:	f000 fccf 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007cc:	4844      	ldr	r0, [pc, #272]	; (80008e0 <MX_GPIO_Init+0x1ec>)
 80007ce:	f000 fcc9 	bl	8001164 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007d2:	2308      	movs	r3, #8
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	483b      	ldr	r0, [pc, #236]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 80007ea:	f000 fb21 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4835      	ldr	r0, [pc, #212]	; (80008dc <MX_GPIO_Init+0x1e8>)
 8000806:	f000 fb13 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800081a:	2305      	movs	r3, #5
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	482d      	ldr	r0, [pc, #180]	; (80008dc <MX_GPIO_Init+0x1e8>)
 8000826:	f000 fb03 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800082e:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <MX_GPIO_Init+0x1f0>)
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	482a      	ldr	r0, [pc, #168]	; (80008e8 <MX_GPIO_Init+0x1f4>)
 800083e:	f000 faf7 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000842:	2304      	movs	r3, #4
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4825      	ldr	r0, [pc, #148]	; (80008ec <MX_GPIO_Init+0x1f8>)
 8000856:	f000 faeb 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800085a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086c:	2305      	movs	r3, #5
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	481d      	ldr	r0, [pc, #116]	; (80008ec <MX_GPIO_Init+0x1f8>)
 8000878:	f000 fada 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800087c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000880:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4812      	ldr	r0, [pc, #72]	; (80008e0 <MX_GPIO_Init+0x1ec>)
 8000896:	f000 facb 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800089a:	2320      	movs	r3, #32
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_GPIO_Init+0x1ec>)
 80008ae:	f000 fabf 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_GPIO_Init+0x1f0>)
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 80008c6:	f000 fab3 	bl	8000e30 <HAL_GPIO_Init>

}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	; 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	10120000 	.word	0x10120000
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 fa42 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a42      	ldr	r2, [pc, #264]	; (8000a78 <HAL_UART_MspInit+0x128>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12c      	bne.n	80009cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a40      	ldr	r2, [pc, #256]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a39      	ldr	r2, [pc, #228]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	482e      	ldr	r0, [pc, #184]	; (8000a80 <HAL_UART_MspInit+0x130>)
 80009c6:	f000 fa33 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ca:	e050      	b.n	8000a6e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <HAL_UART_MspInit+0x134>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d14b      	bne.n	8000a6e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a27      	ldr	r2, [pc, #156]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_UART_MspInit+0x12c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4810      	ldr	r0, [pc, #64]	; (8000a88 <HAL_UART_MspInit+0x138>)
 8000a48:	f000 f9f2 	bl	8000e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <HAL_UART_MspInit+0x13c>)
 8000a6a:	f000 f9e1 	bl	8000e30 <HAL_GPIO_Init>
}
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40004800 	.word	0x40004800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40020c00 	.word	0x40020c00

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f89e 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <OTG_FS_IRQHandler+0x10>)
 8000af2:	f000 fb50 	bl	8001196 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200001a8 	.word	0x200001a8

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SystemInit+0x28>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <SystemInit+0x28>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SystemInit+0x28>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b32:	e003      	b.n	8000b3c <LoopCopyDataInit>

08000b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b3a:	3104      	adds	r1, #4

08000b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b44:	d3f6      	bcc.n	8000b34 <CopyDataInit>
  ldr  r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b48:	e002      	b.n	8000b50 <LoopFillZerobss>

08000b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b4c:	f842 3b04 	str.w	r3, [r2], #4

08000b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b54:	d3f9      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd3 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f003 fb69 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fcd1 	bl	8000504 <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b68:	080042d8 	.word	0x080042d8
  ldr  r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b70:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b74:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b78:	2000046c 	.word	0x2000046c

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f90d 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fea4 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f917 	bl	8000e16 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	f000 f8ed 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000004 	.word	0x20000004
 8000c1c:	2000000c 	.word	0x2000000c
 8000c20:	20000008 	.word	0x20000008

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	200001a4 	.word	0x200001a4

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200001a4 	.word	0x200001a4

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff5c 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffb0 	bl	8000d84 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e16b      	b.n	8001124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 815a 	bne.w	800111e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00b      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d007      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7e:	2b11      	cmp	r3, #17
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0xfc>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80b4 	beq.w	800111e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5e      	ldr	r2, [pc, #376]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a5a      	ldr	r2, [pc, #360]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a51      	ldr	r2, [pc, #324]	; (8001140 <HAL_GPIO_Init+0x310>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a50      	ldr	r2, [pc, #320]	; (8001144 <HAL_GPIO_Init+0x314>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4f      	ldr	r2, [pc, #316]	; (8001148 <HAL_GPIO_Init+0x318>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	; (800114c <HAL_GPIO_Init+0x31c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	; (8001150 <HAL_GPIO_Init+0x320>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	; (8001158 <HAL_GPIO_Init+0x328>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <HAL_GPIO_Init+0x32c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x20a>
 8001036:	2307      	movs	r3, #7
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103a:	2308      	movs	r3, #8
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4934      	ldr	r1, [pc, #208]	; (800113c <HAL_GPIO_Init+0x30c>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_GPIO_Init+0x330>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a31      	ldr	r2, [pc, #196]	; (8001160 <HAL_GPIO_Init+0x330>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_GPIO_Init+0x330>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae90 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	3724      	adds	r7, #36	; 0x24
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40013c00 	.word	0x40013c00

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001180:	e003      	b.n	800118a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fcbd 	bl	8003b2c <USB_GetMode>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 80f1 	bne.w	800139c <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fca1 	bl	8003b06 <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80e7 	beq.w	800139a <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fc98 	bl	8003b06 <USB_ReadInterrupts>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011e0:	d104      	bne.n	80011ec <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011ea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fc88 	bl	8003b06 <USB_ReadInterrupts>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001200:	d104      	bne.n	800120c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800120a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fc78 	bl	8003b06 <USB_ReadInterrupts>
 8001216:	4603      	mov	r3, r0
 8001218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800121c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001220:	d104      	bne.n	800122c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800122a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fc68 	bl	8003b06 <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	d103      	bne.n	8001248 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2202      	movs	r2, #2
 8001246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fc5a 	bl	8003b06 <USB_ReadInterrupts>
 8001252:	4603      	mov	r3, r0
 8001254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800125c:	d117      	bne.n	800128e <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800126c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001270:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f002 ff42 	bl	80040fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fc62 	bl	8003b48 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800128c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fc37 	bl	8003b06 <USB_ReadInterrupts>
 8001298:	4603      	mov	r3, r0
 800129a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800129e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a2:	d102      	bne.n	80012aa <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f001 f875 	bl	8002394 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fc29 	bl	8003b06 <USB_ReadInterrupts>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d106      	bne.n	80012cc <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f002 ff00 	bl	80040c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2208      	movs	r2, #8
 80012ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fc18 	bl	8003b06 <USB_ReadInterrupts>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012e0:	d138      	bne.n	8001354 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fca1 	bl	8003c2e <USB_HC_ReadInterrupt>
 80012ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e025      	b.n	8001340 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d018      	beq.n	800133a <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	015a      	lsls	r2, r3, #5
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800131a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800131e:	d106      	bne.n	800132e <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4619      	mov	r1, r3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f87b 	bl	8001422 <HCD_HC_IN_IRQHandler>
 800132c:	e005      	b.n	800133a <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4619      	mov	r1, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fc0b 	bl	8001b50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	429a      	cmp	r2, r3
 8001348:	d3d4      	bcc.n	80012f4 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fbd4 	bl	8003b06 <USB_ReadInterrupts>
 800135e:	4603      	mov	r3, r0
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b10      	cmp	r3, #16
 8001366:	d101      	bne.n	800136c <HAL_HCD_IRQHandler+0x1d6>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_HCD_IRQHandler+0x1d8>
 800136c:	2300      	movs	r3, #0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d014      	beq.n	800139c <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0210 	bic.w	r2, r2, #16
 8001380:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 ff5a 	bl	800223c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0210 	orr.w	r2, r2, #16
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	e000      	b.n	800139c <HAL_HCD_IRQHandler+0x206>
      return;
 800139a:	bf00      	nop
    }
  }
}
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_HCD_Start+0x16>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e013      	b.n	80013e0 <HAL_HCD_Start+0x3e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fb0b 	bl	80039e0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2101      	movs	r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fbf3 	bl	8003bbc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_HCD_Stop+0x16>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e00d      	b.n	800141a <HAL_HCD_Stop+0x32>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fd1f 	bl	8003e4e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	015a      	lsls	r2, r3, #5
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4413      	add	r3, r2
 8001444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b04      	cmp	r3, #4
 8001450:	d119      	bne.n	8001486 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4413      	add	r3, r2
 800145a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800145e:	461a      	mov	r2, r3
 8001460:	2304      	movs	r3, #4
 8001462:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	015a      	lsls	r2, r3, #5
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4413      	add	r3, r2
 800146c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	0151      	lsls	r1, r2, #5
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	440a      	add	r2, r1
 800147a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	60d3      	str	r3, [r2, #12]
 8001484:	e095      	b.n	80015b2 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4413      	add	r3, r2
 800148e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0320 	and.w	r3, r3, #32
 8001498:	2b20      	cmp	r3, #32
 800149a:	d109      	bne.n	80014b0 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a8:	461a      	mov	r2, r3
 80014aa:	2320      	movs	r3, #32
 80014ac:	6093      	str	r3, [r2, #8]
 80014ae:	e080      	b.n	80015b2 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	015a      	lsls	r2, r3, #5
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d134      	bne.n	8001530 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	0151      	lsls	r1, r2, #5
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	440a      	add	r2, r1
 80014dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	335d      	adds	r3, #93	; 0x5d
 80014f6:	2205      	movs	r2, #5
 80014f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4413      	add	r3, r2
 8001502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001506:	461a      	mov	r2, r3
 8001508:	2310      	movs	r3, #16
 800150a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001518:	461a      	mov	r2, r3
 800151a:	2308      	movs	r3, #8
 800151c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fb91 	bl	8003c50 <USB_HC_Halt>
 800152e:	e040      	b.n	80015b2 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4413      	add	r3, r2
 8001538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001546:	d134      	bne.n	80015b2 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4413      	add	r3, r2
 8001550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	0151      	lsls	r1, r2, #5
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	440a      	add	r2, r1
 800155e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fb6c 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	015a      	lsls	r2, r3, #5
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001584:	461a      	mov	r2, r3
 8001586:	2310      	movs	r3, #16
 8001588:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	335d      	adds	r3, #93	; 0x5d
 800159a:	2208      	movs	r2, #8
 800159c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015aa:	461a      	mov	r2, r3
 80015ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	015a      	lsls	r2, r3, #5
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c8:	d122      	bne.n	8001610 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	0151      	lsls	r1, r2, #5
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	440a      	add	r2, r1
 80015e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fb2b 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4413      	add	r3, r2
 8001602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001606:	461a      	mov	r2, r3
 8001608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800160e:	e29b      	b.n	8001b48 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4413      	add	r3, r2
 8001618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b01      	cmp	r3, #1
 8001624:	f040 80c1 	bne.w	80017aa <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01b      	beq.n	8001668 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	3348      	adds	r3, #72	; 0x48
 8001640:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	0159      	lsls	r1, r3, #5
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	440b      	add	r3, r1
 800164a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001654:	1ad1      	subs	r1, r2, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4403      	add	r3, r0
 8001664:	334c      	adds	r3, #76	; 0x4c
 8001666:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	335d      	adds	r3, #93	; 0x5d
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	3358      	adds	r3, #88	; 0x58
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4413      	add	r3, r2
 8001698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800169c:	461a      	mov	r2, r3
 800169e:	2301      	movs	r3, #1
 80016a0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	333f      	adds	r3, #63	; 0x3f
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00a      	beq.n	80016ce <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	333f      	adds	r3, #63	; 0x3f
 80016c8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d121      	bne.n	8001712 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	015a      	lsls	r2, r3, #5
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	0151      	lsls	r1, r2, #5
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	440a      	add	r2, r1
 80016e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 faa9 	bl	8003c50 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4413      	add	r3, r2
 8001706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800170a:	461a      	mov	r2, r3
 800170c:	2310      	movs	r3, #16
 800170e:	6093      	str	r3, [r2, #8]
 8001710:	e034      	b.n	800177c <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	333f      	adds	r3, #63	; 0x3f
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d129      	bne.n	800177c <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4413      	add	r3, r2
 8001730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	0151      	lsls	r1, r2, #5
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	440a      	add	r2, r1
 800173e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001746:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	335c      	adds	r3, #92	; 0x5c
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	b2d8      	uxtb	r0, r3
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	335c      	adds	r3, #92	; 0x5c
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	4601      	mov	r1, r0
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f002 fcce 	bl	8004118 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	3350      	adds	r3, #80	; 0x50
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	f083 0301 	eor.w	r3, r3, #1
 8001792:	b2d8      	uxtb	r0, r3
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	3350      	adds	r3, #80	; 0x50
 80017a4:	4602      	mov	r2, r0
 80017a6:	701a      	strb	r2, [r3, #0]
}
 80017a8:	e1ce      	b.n	8001b48 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b02      	cmp	r3, #2
 80017be:	f040 80f1 	bne.w	80019a4 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	0151      	lsls	r1, r2, #5
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	440a      	add	r2, r1
 80017d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017dc:	f023 0302 	bic.w	r3, r3, #2
 80017e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	335d      	adds	r3, #93	; 0x5d
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d10a      	bne.n	800180e <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	335c      	adds	r3, #92	; 0x5c
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e0b0      	b.n	8001970 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	335d      	adds	r3, #93	; 0x5d
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d10a      	bne.n	800183a <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	335c      	adds	r3, #92	; 0x5c
 8001834:	2205      	movs	r2, #5
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	e09a      	b.n	8001970 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	335d      	adds	r3, #93	; 0x5d
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b06      	cmp	r3, #6
 800184e:	d00a      	beq.n	8001866 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	335d      	adds	r3, #93	; 0x5d
 8001860:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001862:	2b08      	cmp	r3, #8
 8001864:	d156      	bne.n	8001914 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3358      	adds	r3, #88	; 0x58
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1c59      	adds	r1, r3, #1
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4403      	add	r3, r0
 8001888:	3358      	adds	r3, #88	; 0x58
 800188a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	3358      	adds	r3, #88	; 0x58
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d914      	bls.n	80018cc <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	3358      	adds	r3, #88	; 0x58
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	335c      	adds	r3, #92	; 0x5c
 80018c6:	2204      	movs	r2, #4
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	e009      	b.n	80018e0 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	335c      	adds	r3, #92	; 0x5c
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	015a      	lsls	r2, r3, #5
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	015a      	lsls	r2, r3, #5
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4413      	add	r3, r2
 8001908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e02d      	b.n	8001970 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	335d      	adds	r3, #93	; 0x5d
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d122      	bne.n	8001970 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	335c      	adds	r3, #92	; 0x5c
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4413      	add	r3, r2
 8001946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001954:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800195c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4413      	add	r3, r2
 8001966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197c:	461a      	mov	r2, r3
 800197e:	2302      	movs	r3, #2
 8001980:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	b2d8      	uxtb	r0, r3
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	335c      	adds	r3, #92	; 0x5c
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4601      	mov	r1, r0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f002 fbbb 	bl	8004118 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80019a2:	e0d1      	b.n	8001b48 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	2b80      	cmp	r3, #128	; 0x80
 80019b8:	d13e      	bne.n	8001a38 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	0151      	lsls	r1, r2, #5
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	440a      	add	r2, r1
 80019d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3358      	adds	r3, #88	; 0x58
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	1c59      	adds	r1, r3, #1
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4403      	add	r3, r0
 80019fc:	3358      	adds	r3, #88	; 0x58
 80019fe:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	335d      	adds	r3, #93	; 0x5d
 8001a10:	2206      	movs	r2, #6
 8001a12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 f916 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a30:	461a      	mov	r2, r3
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	6093      	str	r3, [r2, #8]
}
 8001a36:	e087      	b.n	8001b48 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d17c      	bne.n	8001b48 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	333f      	adds	r3, #63	; 0x3f
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d122      	bne.n	8001aaa <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3358      	adds	r3, #88	; 0x58
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	0151      	lsls	r1, r2, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	440a      	add	r2, r1
 8001a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 f8d4 	bl	8003c50 <USB_HC_Halt>
 8001aa8:	e045      	b.n	8001b36 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	333f      	adds	r3, #63	; 0x3f
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	333f      	adds	r3, #63	; 0x3f
 8001ad0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d12f      	bne.n	8001b36 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	3358      	adds	r3, #88	; 0x58
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d121      	bne.n	8001b36 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	335d      	adds	r3, #93	; 0x5d
 8001b02:	2203      	movs	r2, #3
 8001b04:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	0151      	lsls	r1, r2, #5
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	440a      	add	r2, r1
 8001b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 f88d 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b42:	461a      	mov	r2, r3
 8001b44:	2310      	movs	r3, #16
 8001b46:	6093      	str	r3, [r2, #8]
}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d119      	bne.n	8001bb4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2304      	movs	r3, #4
 8001b90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	0151      	lsls	r1, r2, #5
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	440a      	add	r2, r1
 8001ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001bb2:	e33e      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d141      	bne.n	8001c4e <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2320      	movs	r3, #32
 8001bda:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	333d      	adds	r3, #61	; 0x3d
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	f040 831f 	bne.w	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	333d      	adds	r3, #61	; 0x3d
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	335c      	adds	r3, #92	; 0x5c
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	0151      	lsls	r1, r2, #5
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	440a      	add	r2, r1
 8001c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 f802 	bl	8003c50 <USB_HC_Halt>
}
 8001c4c:	e2f1      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d13f      	bne.n	8001ce4 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	335d      	adds	r3, #93	; 0x5d
 8001c74:	2204      	movs	r2, #4
 8001c76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	333d      	adds	r3, #61	; 0x3d
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3358      	adds	r3, #88	; 0x58
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	0151      	lsls	r1, r2, #5
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	440a      	add	r2, r1
 8001cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 ffc0 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2340      	movs	r3, #64	; 0x40
 8001ce0:	6093      	str	r3, [r2, #8]
}
 8001ce2:	e2a6      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cfa:	d122      	bne.n	8001d42 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	0151      	lsls	r1, r2, #5
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	440a      	add	r2, r1
 8001d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 ff92 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d3e:	6093      	str	r3, [r2, #8]
}
 8001d40:	e277      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d135      	bne.n	8001dc4 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	440b      	add	r3, r1
 8001d66:	3358      	adds	r3, #88	; 0x58
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	0151      	lsls	r1, r2, #5
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	440a      	add	r2, r1
 8001d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 ff5a 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	461a      	mov	r2, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	335d      	adds	r3, #93	; 0x5d
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
}
 8001dc2:	e236      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d12b      	bne.n	8001e32 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	461a      	mov	r2, r3
 8001de8:	2308      	movs	r3, #8
 8001dea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	0151      	lsls	r1, r2, #5
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	440a      	add	r2, r1
 8001e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 ff1a 	bl	8003c50 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	335d      	adds	r3, #93	; 0x5d
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	701a      	strb	r2, [r3, #0]
}
 8001e30:	e1ff      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d155      	bne.n	8001ef4 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3358      	adds	r3, #88	; 0x58
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	335d      	adds	r3, #93	; 0x5d
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	333d      	adds	r3, #61	; 0x3d
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d114      	bne.n	8001eb0 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	333c      	adds	r3, #60	; 0x3c
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	333d      	adds	r3, #61	; 0x3d
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	0151      	lsls	r1, r2, #5
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	440a      	add	r2, r1
 8001ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 feb8 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2310      	movs	r3, #16
 8001ef0:	6093      	str	r3, [r2, #8]
}
 8001ef2:	e19e      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d12b      	bne.n	8001f62 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	0151      	lsls	r1, r2, #5
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	440a      	add	r2, r1
 8001f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 fe8b 	bl	8003c50 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	335d      	adds	r3, #93	; 0x5d
 8001f4a:	2206      	movs	r2, #6
 8001f4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	6093      	str	r3, [r2, #8]
}
 8001f60:	e167      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f78:	d135      	bne.n	8001fe6 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	0151      	lsls	r1, r2, #5
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	440a      	add	r2, r1
 8001f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 fe53 	bl	8003c50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2310      	movs	r3, #16
 8001fba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	335d      	adds	r3, #93	; 0x5d
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	701a      	strb	r2, [r3, #0]
}
 8001fe4:	e125      	b.n	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	f040 811a 	bne.w	8002232 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	0151      	lsls	r1, r2, #5
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	440a      	add	r2, r1
 8002014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002018:	f023 0302 	bic.w	r3, r3, #2
 800201c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	335d      	adds	r3, #93	; 0x5d
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d137      	bne.n	80020a4 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	335c      	adds	r3, #92	; 0x5c
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	333f      	adds	r3, #63	; 0x3f
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d00b      	beq.n	8002076 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	333f      	adds	r3, #63	; 0x3f
 800206e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002070:	2b03      	cmp	r3, #3
 8002072:	f040 80c5 	bne.w	8002200 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	3351      	adds	r3, #81	; 0x51
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	f083 0301 	eor.w	r3, r3, #1
 800208c:	b2d8      	uxtb	r0, r3
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3351      	adds	r3, #81	; 0x51
 800209e:	4602      	mov	r2, r0
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e0ad      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	335d      	adds	r3, #93	; 0x5d
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d10a      	bne.n	80020d0 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	335c      	adds	r3, #92	; 0x5c
 80020ca:	2202      	movs	r2, #2
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e097      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	335d      	adds	r3, #93	; 0x5d
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d10a      	bne.n	80020fc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	335c      	adds	r3, #92	; 0x5c
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e081      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	335d      	adds	r3, #93	; 0x5d
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d10a      	bne.n	8002128 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	335c      	adds	r3, #92	; 0x5c
 8002122:	2205      	movs	r2, #5
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e06b      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	335d      	adds	r3, #93	; 0x5d
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b06      	cmp	r3, #6
 800213c:	d00a      	beq.n	8002154 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	335d      	adds	r3, #93	; 0x5d
 800214e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002150:	2b08      	cmp	r3, #8
 8002152:	d155      	bne.n	8002200 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	3358      	adds	r3, #88	; 0x58
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1c59      	adds	r1, r3, #1
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4403      	add	r3, r0
 8002176:	3358      	adds	r3, #88	; 0x58
 8002178:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	3358      	adds	r3, #88	; 0x58
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d914      	bls.n	80021ba <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3358      	adds	r3, #88	; 0x58
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	335c      	adds	r3, #92	; 0x5c
 80021b4:	2204      	movs	r2, #4
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e009      	b.n	80021ce <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	335c      	adds	r3, #92	; 0x5c
 80021ca:	2202      	movs	r2, #2
 80021cc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021e4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	461a      	mov	r2, r3
 800220e:	2302      	movs	r3, #2
 8002210:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	b2d8      	uxtb	r0, r3
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	335c      	adds	r3, #92	; 0x5c
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4601      	mov	r1, r0
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f001 ff73 	bl	8004118 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	0c5b      	lsrs	r3, r3, #17
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002270:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d003      	beq.n	8002280 <HCD_RXQLVL_IRQHandler+0x44>
 8002278:	2b05      	cmp	r3, #5
 800227a:	f000 8082 	beq.w	8002382 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800227e:	e083      	b.n	8002388 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d07f      	beq.n	8002386 <HCD_RXQLVL_IRQHandler+0x14a>
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	3344      	adds	r3, #68	; 0x44
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d074      	beq.n	8002386 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3344      	adds	r3, #68	; 0x44
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	b292      	uxth	r2, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f001 fbfc 	bl	8003ab4 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	3344      	adds	r3, #68	; 0x44
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	18d1      	adds	r1, r2, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4403      	add	r3, r0
 80022e0:	3344      	adds	r3, #68	; 0x44
 80022e2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	334c      	adds	r3, #76	; 0x4c
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	18d1      	adds	r1, r2, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4403      	add	r3, r0
 8002308:	334c      	adds	r3, #76	; 0x4c
 800230a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	4413      	add	r3, r2
 8002314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HCD_RXQLVL_IRQHandler+0x154>)
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d031      	beq.n	8002386 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002338:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002340:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3350      	adds	r3, #80	; 0x50
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2d8      	uxtb	r0, r3
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	3350      	adds	r3, #80	; 0x50
 800237c:	4602      	mov	r2, r0
 800237e:	701a      	strb	r2, [r3, #0]
      break;
 8002380:	e001      	b.n	8002386 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002382:	bf00      	nop
 8002384:	e000      	b.n	8002388 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002386:	bf00      	nop
  }
}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	; 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	1ff80000 	.word	0x1ff80000

08002394 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d113      	bne.n	80023f4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d10a      	bne.n	80023ec <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023e4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f001 fe7a 	bl	80040e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d147      	bne.n	800248e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b04      	cmp	r3, #4
 800240e:	d129      	bne.n	8002464 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d113      	bne.n	8002440 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800241e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002422:	d106      	bne.n	8002432 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2102      	movs	r1, #2
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fb8c 	bl	8003b48 <USB_InitFSLSPClkSel>
 8002430:	e011      	b.n	8002456 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f001 fb85 	bl	8003b48 <USB_InitFSLSPClkSel>
 800243e:	e00a      	b.n	8002456 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800244e:	461a      	mov	r2, r3
 8002450:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002454:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f001 fe6c 	bl	8004134 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f001 fe3f 	bl	80040e0 <HAL_HCD_Connect_Callback>
 8002462:	e014      	b.n	800248e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f001 fe73 	bl	8004150 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002478:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800247c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800248c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b20      	cmp	r3, #32
 8002496:	d103      	bne.n	80024a0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f043 0320 	orr.w	r3, r3, #32
 800249e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e25b      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d075      	beq.n	80025be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d2:	4ba3      	ldr	r3, [pc, #652]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d00c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4ba0      	ldr	r3, [pc, #640]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ea:	4b9d      	ldr	r3, [pc, #628]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f6:	d10b      	bne.n	8002510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	4b99      	ldr	r3, [pc, #612]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d05b      	beq.n	80025bc <HAL_RCC_OscConfig+0x108>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d157      	bne.n	80025bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e236      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d106      	bne.n	8002528 <HAL_RCC_OscConfig+0x74>
 800251a:	4b91      	ldr	r3, [pc, #580]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a90      	ldr	r2, [pc, #576]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e01d      	b.n	8002564 <HAL_RCC_OscConfig+0xb0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0x98>
 8002532:	4b8b      	ldr	r3, [pc, #556]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a8a      	ldr	r2, [pc, #552]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a87      	ldr	r2, [pc, #540]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0xb0>
 800254c:	4b84      	ldr	r3, [pc, #528]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a83      	ldr	r2, [pc, #524]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a80      	ldr	r2, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fb6e 	bl	8000c4c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fb6a 	bl	8000c4c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1fb      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0xc0>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fb5a 	bl	8000c4c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fb56 	bl	8000c4c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1e7      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	4b6c      	ldr	r3, [pc, #432]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0xe8>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b62      	ldr	r3, [pc, #392]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d11c      	bne.n	800261c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b5f      	ldr	r3, [pc, #380]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x152>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e1bb      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b56      	ldr	r3, [pc, #344]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4952      	ldr	r1, [pc, #328]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	e03a      	b.n	8002692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002624:	4b4f      	ldr	r3, [pc, #316]	; (8002764 <HAL_RCC_OscConfig+0x2b0>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fb0f 	bl	8000c4c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe fb0b 	bl	8000c4c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e19c      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b43      	ldr	r3, [pc, #268]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4940      	ldr	r1, [pc, #256]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_OscConfig+0x2b0>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe faee 	bl	8000c4c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe faea 	bl	8000c4c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e17b      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d030      	beq.n	8002700 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_RCC_OscConfig+0x2b4>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe face 	bl	8000c4c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b4:	f7fe faca 	bl	8000c4c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e15b      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x200>
 80026d2:	e015      	b.n	8002700 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_RCC_OscConfig+0x2b4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7fe fab7 	bl	8000c4c <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fe fab3 	bl	8000c4c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e144      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a0 	beq.w	800284e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x2b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d121      	bne.n	800278e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_RCC_OscConfig+0x2b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_RCC_OscConfig+0x2b8>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7fe fa79 	bl	8000c4c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e011      	b.n	8002782 <HAL_RCC_OscConfig+0x2ce>
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	42470000 	.word	0x42470000
 8002768:	42470e80 	.word	0x42470e80
 800276c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7fe fa6c 	bl	8000c4c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0fd      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b81      	ldr	r3, [pc, #516]	; (8002988 <HAL_RCC_OscConfig+0x4d4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d106      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2f0>
 8002796:	4b7d      	ldr	r3, [pc, #500]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a7c      	ldr	r2, [pc, #496]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	e01c      	b.n	80027de <HAL_RCC_OscConfig+0x32a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x312>
 80027ac:	4b77      	ldr	r3, [pc, #476]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a76      	ldr	r2, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	4b74      	ldr	r3, [pc, #464]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a73      	ldr	r2, [pc, #460]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x32a>
 80027c6:	4b71      	ldr	r3, [pc, #452]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a70      	ldr	r2, [pc, #448]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	4b6e      	ldr	r3, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a6d      	ldr	r2, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7fe fa31 	bl	8000c4c <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fa2d 	bl	8000c4c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0bc      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	4b61      	ldr	r3, [pc, #388]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCC_OscConfig+0x33a>
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe fa1b 	bl	8000c4c <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fa17 	bl	8000c4c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0a6      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4b56      	ldr	r3, [pc, #344]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b52      	ldr	r3, [pc, #328]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a51      	ldr	r2, [pc, #324]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8092 	beq.w	800297c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d05c      	beq.n	800291e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d141      	bne.n	80028f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_RCC_OscConfig+0x4dc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe f9eb 	bl	8000c4c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe f9e7 	bl	8000c4c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e078      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	019b      	lsls	r3, r3, #6
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	4933      	ldr	r1, [pc, #204]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_RCC_OscConfig+0x4dc>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe f9c0 	bl	8000c4c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fe f9bc 	bl	8000c4c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04d      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x41c>
 80028ee:	e045      	b.n	800297c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x4dc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe f9a9 	bl	8000c4c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe f9a5 	bl	8000c4c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e036      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x44a>
 800291c:	e02e      	b.n	800297c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e029      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	429a      	cmp	r2, r3
 800293c:	d11c      	bne.n	8002978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d115      	bne.n	8002978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002952:	4013      	ands	r3, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002958:	4293      	cmp	r3, r2
 800295a:	d10d      	bne.n	8002978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d106      	bne.n	8002978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40007000 	.word	0x40007000
 800298c:	40023800 	.word	0x40023800
 8002990:	42470060 	.word	0x42470060

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cc      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d90c      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e067      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4934      	ldr	r1, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7fe f8e2 	bl	8000c4c <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fe f8de 	bl	8000c4c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20c      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4601      	mov	r1, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe f842 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	080042b0 	.word	0x080042b0
 8002b58:	20000004 	.word	0x20000004
 8002b5c:	20000008 	.word	0x20000008

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d007      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x32>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d008      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x38>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 80b4 	bne.w	8002cf4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b5e      	ldr	r3, [pc, #376]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b8e:	60bb      	str	r3, [r7, #8]
       break;
 8002b90:	e0b3      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b92:	4b5e      	ldr	r3, [pc, #376]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b94:	60bb      	str	r3, [r7, #8]
      break;
 8002b96:	e0b0      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba2:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d04a      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b55      	ldr	r3, [pc, #340]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	f04f 0400 	mov.w	r4, #0
 8002bb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	ea03 0501 	and.w	r5, r3, r1
 8002bc4:	ea04 0602 	and.w	r6, r4, r2
 8002bc8:	4629      	mov	r1, r5
 8002bca:	4632      	mov	r2, r6
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	f04f 0400 	mov.w	r4, #0
 8002bd4:	0154      	lsls	r4, r2, #5
 8002bd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bda:	014b      	lsls	r3, r1, #5
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4622      	mov	r2, r4
 8002be0:	1b49      	subs	r1, r1, r5
 8002be2:	eb62 0206 	sbc.w	r2, r2, r6
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	f04f 0400 	mov.w	r4, #0
 8002bee:	0194      	lsls	r4, r2, #6
 8002bf0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bf4:	018b      	lsls	r3, r1, #6
 8002bf6:	1a5b      	subs	r3, r3, r1
 8002bf8:	eb64 0402 	sbc.w	r4, r4, r2
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	00e2      	lsls	r2, r4, #3
 8002c06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c0a:	00d9      	lsls	r1, r3, #3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4614      	mov	r4, r2
 8002c10:	195b      	adds	r3, r3, r5
 8002c12:	eb44 0406 	adc.w	r4, r4, r6
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	0262      	lsls	r2, r4, #9
 8002c20:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c24:	0259      	lsls	r1, r3, #9
 8002c26:	460b      	mov	r3, r1
 8002c28:	4614      	mov	r4, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f04f 0400 	mov.w	r4, #0
 8002c34:	461a      	mov	r2, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	f7fd face 	bl	80001d8 <__aeabi_uldivmod>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e049      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	f04f 0400 	mov.w	r4, #0
 8002c4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	ea03 0501 	and.w	r5, r3, r1
 8002c5a:	ea04 0602 	and.w	r6, r4, r2
 8002c5e:	4629      	mov	r1, r5
 8002c60:	4632      	mov	r2, r6
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f04f 0400 	mov.w	r4, #0
 8002c6a:	0154      	lsls	r4, r2, #5
 8002c6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c70:	014b      	lsls	r3, r1, #5
 8002c72:	4619      	mov	r1, r3
 8002c74:	4622      	mov	r2, r4
 8002c76:	1b49      	subs	r1, r1, r5
 8002c78:	eb62 0206 	sbc.w	r2, r2, r6
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	f04f 0400 	mov.w	r4, #0
 8002c84:	0194      	lsls	r4, r2, #6
 8002c86:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c8a:	018b      	lsls	r3, r1, #6
 8002c8c:	1a5b      	subs	r3, r3, r1
 8002c8e:	eb64 0402 	sbc.w	r4, r4, r2
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	00e2      	lsls	r2, r4, #3
 8002c9c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ca0:	00d9      	lsls	r1, r3, #3
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4614      	mov	r4, r2
 8002ca6:	195b      	adds	r3, r3, r5
 8002ca8:	eb44 0406 	adc.w	r4, r4, r6
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	02a2      	lsls	r2, r4, #10
 8002cb6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cba:	0299      	lsls	r1, r3, #10
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f04f 0400 	mov.w	r4, #0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4623      	mov	r3, r4
 8002cce:	f7fd fa83 	bl	80001d8 <__aeabi_uldivmod>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	60bb      	str	r3, [r7, #8]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cf6:	60bb      	str	r3, [r7, #8]
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000004 	.word	0x20000004

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff0 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d30:	4601      	mov	r1, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0a9b      	lsrs	r3, r3, #10
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	080042c0 	.word	0x080042c0

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffdc 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d58:	4601      	mov	r1, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0b5b      	lsrs	r3, r3, #13
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4a03      	ldr	r2, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	080042c0 	.word	0x080042c0

08002d78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d035      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002da0:	4b62      	ldr	r3, [pc, #392]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002da6:	f7fd ff51 	bl	8000c4c <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dae:	f7fd ff4d 	bl	8000c4c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0b0      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dc0:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	019a      	lsls	r2, r3, #6
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	071b      	lsls	r3, r3, #28
 8002dd8:	4955      	ldr	r1, [pc, #340]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002de0:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002de6:	f7fd ff31 	bl	8000c4c <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dee:	f7fd ff2d 	bl	8000c4c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e090      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8083 	beq.w	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a43      	ldr	r2, [pc, #268]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e36:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3e      	ldr	r2, [pc, #248]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e42:	f7fd ff03 	bl	8000c4c <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fd feff 	bl	8000c4c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e062      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e5c:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e70:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d02f      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d028      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e86:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d114      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fd fecd 	bl	8000c4c <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fd fec9 	bl	8000c4c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e02a      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ee4:	d10d      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efa:	490d      	ldr	r1, [pc, #52]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	608b      	str	r3, [r1, #8]
 8002f00:	e005      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f0c:	6093      	str	r3, [r2, #8]
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1a:	4905      	ldr	r1, [pc, #20]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	42470068 	.word	0x42470068
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42470e40 	.word	0x42470e40

08002f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e03f      	b.n	8002fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fcf4 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f9b1 	bl	80032e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b088      	sub	sp, #32
 8002fda:	af02      	add	r7, sp, #8
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	f040 8083 	bne.w	80030fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Transmit+0x2e>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e07b      	b.n	8003100 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_UART_Transmit+0x40>
 8003012:	2302      	movs	r3, #2
 8003014:	e074      	b.n	8003100 <HAL_UART_Transmit+0x12a>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2221      	movs	r2, #33	; 0x21
 8003028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800302c:	f7fd fe0e 	bl	8000c4c <HAL_GetTick>
 8003030:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003046:	e042      	b.n	80030ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	d122      	bne.n	80030a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f8f2 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e042      	b.n	8003100 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3302      	adds	r3, #2
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	e017      	b.n	80030ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	e013      	b.n	80030ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8cf 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e01f      	b.n	8003100 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	60ba      	str	r2, [r7, #8]
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1b7      	bne.n	8003048 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	2140      	movs	r1, #64	; 0x40
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f8b6 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e006      	b.n	8003100 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b20      	cmp	r3, #32
 8003126:	f040 8090 	bne.w	800324a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_UART_Receive+0x2e>
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e088      	b.n	800324c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_UART_Receive+0x40>
 8003144:	2302      	movs	r3, #2
 8003146:	e081      	b.n	800324c <HAL_UART_Receive+0x144>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2222      	movs	r2, #34	; 0x22
 800315a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800315e:	f7fd fd75 	bl	8000c4c <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003178:	e05c      	b.n	8003234 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d12b      	bne.n	80031ea <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	2120      	movs	r1, #32
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f859 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e04f      	b.n	800324c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10c      	bne.n	80031d2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3302      	adds	r3, #2
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e030      	b.n	8003234 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	b29a      	uxth	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3301      	adds	r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	e024      	b.n	8003234 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2120      	movs	r1, #32
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f82d 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e023      	b.n	800324c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d108      	bne.n	800321e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	60ba      	str	r2, [r7, #8]
 8003218:	b2ca      	uxtb	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e00a      	b.n	8003234 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d19d      	bne.n	800317a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800324a:	2302      	movs	r3, #2
  }
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003264:	e02c      	b.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800326c:	d028      	beq.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <UART_WaitOnFlagUntilTimeout+0x30>
 8003274:	f7fd fcea 	bl	8000c4c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	429a      	cmp	r2, r3
 8003282:	d21d      	bcs.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003292:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e00f      	b.n	80032e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4013      	ands	r3, r2
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d0c3      	beq.n	8003266 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800332a:	f023 030c 	bic.w	r3, r3, #12
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	68f9      	ldr	r1, [r7, #12]
 8003334:	430b      	orrs	r3, r1
 8003336:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003356:	f040 818b 	bne.w	8003670 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4ac1      	ldr	r2, [pc, #772]	; (8003664 <UART_SetConfig+0x37c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d005      	beq.n	8003370 <UART_SetConfig+0x88>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4abf      	ldr	r2, [pc, #764]	; (8003668 <UART_SetConfig+0x380>)
 800336a:	4293      	cmp	r3, r2
 800336c:	f040 80bd 	bne.w	80034ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7ff fcee 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8003374:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	461d      	mov	r5, r3
 800337a:	f04f 0600 	mov.w	r6, #0
 800337e:	46a8      	mov	r8, r5
 8003380:	46b1      	mov	r9, r6
 8003382:	eb18 0308 	adds.w	r3, r8, r8
 8003386:	eb49 0409 	adc.w	r4, r9, r9
 800338a:	4698      	mov	r8, r3
 800338c:	46a1      	mov	r9, r4
 800338e:	eb18 0805 	adds.w	r8, r8, r5
 8003392:	eb49 0906 	adc.w	r9, r9, r6
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033aa:	4688      	mov	r8, r1
 80033ac:	4691      	mov	r9, r2
 80033ae:	eb18 0005 	adds.w	r0, r8, r5
 80033b2:	eb49 0106 	adc.w	r1, r9, r6
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	461d      	mov	r5, r3
 80033bc:	f04f 0600 	mov.w	r6, #0
 80033c0:	196b      	adds	r3, r5, r5
 80033c2:	eb46 0406 	adc.w	r4, r6, r6
 80033c6:	461a      	mov	r2, r3
 80033c8:	4623      	mov	r3, r4
 80033ca:	f7fc ff05 	bl	80001d8 <__aeabi_uldivmod>
 80033ce:	4603      	mov	r3, r0
 80033d0:	460c      	mov	r4, r1
 80033d2:	461a      	mov	r2, r3
 80033d4:	4ba5      	ldr	r3, [pc, #660]	; (800366c <UART_SetConfig+0x384>)
 80033d6:	fba3 2302 	umull	r2, r3, r3, r2
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	461d      	mov	r5, r3
 80033e4:	f04f 0600 	mov.w	r6, #0
 80033e8:	46a9      	mov	r9, r5
 80033ea:	46b2      	mov	sl, r6
 80033ec:	eb19 0309 	adds.w	r3, r9, r9
 80033f0:	eb4a 040a 	adc.w	r4, sl, sl
 80033f4:	4699      	mov	r9, r3
 80033f6:	46a2      	mov	sl, r4
 80033f8:	eb19 0905 	adds.w	r9, r9, r5
 80033fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003400:	f04f 0100 	mov.w	r1, #0
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800340c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003410:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003414:	4689      	mov	r9, r1
 8003416:	4692      	mov	sl, r2
 8003418:	eb19 0005 	adds.w	r0, r9, r5
 800341c:	eb4a 0106 	adc.w	r1, sl, r6
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	461d      	mov	r5, r3
 8003426:	f04f 0600 	mov.w	r6, #0
 800342a:	196b      	adds	r3, r5, r5
 800342c:	eb46 0406 	adc.w	r4, r6, r6
 8003430:	461a      	mov	r2, r3
 8003432:	4623      	mov	r3, r4
 8003434:	f7fc fed0 	bl	80001d8 <__aeabi_uldivmod>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	461a      	mov	r2, r3
 800343e:	4b8b      	ldr	r3, [pc, #556]	; (800366c <UART_SetConfig+0x384>)
 8003440:	fba3 1302 	umull	r1, r3, r3, r2
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	2164      	movs	r1, #100	; 0x64
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	3332      	adds	r3, #50	; 0x32
 8003452:	4a86      	ldr	r2, [pc, #536]	; (800366c <UART_SetConfig+0x384>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003460:	4498      	add	r8, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	461d      	mov	r5, r3
 8003466:	f04f 0600 	mov.w	r6, #0
 800346a:	46a9      	mov	r9, r5
 800346c:	46b2      	mov	sl, r6
 800346e:	eb19 0309 	adds.w	r3, r9, r9
 8003472:	eb4a 040a 	adc.w	r4, sl, sl
 8003476:	4699      	mov	r9, r3
 8003478:	46a2      	mov	sl, r4
 800347a:	eb19 0905 	adds.w	r9, r9, r5
 800347e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800348e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003492:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003496:	4689      	mov	r9, r1
 8003498:	4692      	mov	sl, r2
 800349a:	eb19 0005 	adds.w	r0, r9, r5
 800349e:	eb4a 0106 	adc.w	r1, sl, r6
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	461d      	mov	r5, r3
 80034a8:	f04f 0600 	mov.w	r6, #0
 80034ac:	196b      	adds	r3, r5, r5
 80034ae:	eb46 0406 	adc.w	r4, r6, r6
 80034b2:	461a      	mov	r2, r3
 80034b4:	4623      	mov	r3, r4
 80034b6:	f7fc fe8f 	bl	80001d8 <__aeabi_uldivmod>
 80034ba:	4603      	mov	r3, r0
 80034bc:	460c      	mov	r4, r1
 80034be:	461a      	mov	r2, r3
 80034c0:	4b6a      	ldr	r3, [pc, #424]	; (800366c <UART_SetConfig+0x384>)
 80034c2:	fba3 1302 	umull	r1, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2164      	movs	r1, #100	; 0x64
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	3332      	adds	r3, #50	; 0x32
 80034d4:	4a65      	ldr	r2, [pc, #404]	; (800366c <UART_SetConfig+0x384>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	f003 0207 	and.w	r2, r3, #7
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4442      	add	r2, r8
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	e26f      	b.n	80039ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ea:	f7ff fc1d 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 80034ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	461d      	mov	r5, r3
 80034f4:	f04f 0600 	mov.w	r6, #0
 80034f8:	46a8      	mov	r8, r5
 80034fa:	46b1      	mov	r9, r6
 80034fc:	eb18 0308 	adds.w	r3, r8, r8
 8003500:	eb49 0409 	adc.w	r4, r9, r9
 8003504:	4698      	mov	r8, r3
 8003506:	46a1      	mov	r9, r4
 8003508:	eb18 0805 	adds.w	r8, r8, r5
 800350c:	eb49 0906 	adc.w	r9, r9, r6
 8003510:	f04f 0100 	mov.w	r1, #0
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800351c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003520:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003524:	4688      	mov	r8, r1
 8003526:	4691      	mov	r9, r2
 8003528:	eb18 0005 	adds.w	r0, r8, r5
 800352c:	eb49 0106 	adc.w	r1, r9, r6
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	461d      	mov	r5, r3
 8003536:	f04f 0600 	mov.w	r6, #0
 800353a:	196b      	adds	r3, r5, r5
 800353c:	eb46 0406 	adc.w	r4, r6, r6
 8003540:	461a      	mov	r2, r3
 8003542:	4623      	mov	r3, r4
 8003544:	f7fc fe48 	bl	80001d8 <__aeabi_uldivmod>
 8003548:	4603      	mov	r3, r0
 800354a:	460c      	mov	r4, r1
 800354c:	461a      	mov	r2, r3
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <UART_SetConfig+0x384>)
 8003550:	fba3 2302 	umull	r2, r3, r3, r2
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	461d      	mov	r5, r3
 800355e:	f04f 0600 	mov.w	r6, #0
 8003562:	46a9      	mov	r9, r5
 8003564:	46b2      	mov	sl, r6
 8003566:	eb19 0309 	adds.w	r3, r9, r9
 800356a:	eb4a 040a 	adc.w	r4, sl, sl
 800356e:	4699      	mov	r9, r3
 8003570:	46a2      	mov	sl, r4
 8003572:	eb19 0905 	adds.w	r9, r9, r5
 8003576:	eb4a 0a06 	adc.w	sl, sl, r6
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003586:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800358a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800358e:	4689      	mov	r9, r1
 8003590:	4692      	mov	sl, r2
 8003592:	eb19 0005 	adds.w	r0, r9, r5
 8003596:	eb4a 0106 	adc.w	r1, sl, r6
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	461d      	mov	r5, r3
 80035a0:	f04f 0600 	mov.w	r6, #0
 80035a4:	196b      	adds	r3, r5, r5
 80035a6:	eb46 0406 	adc.w	r4, r6, r6
 80035aa:	461a      	mov	r2, r3
 80035ac:	4623      	mov	r3, r4
 80035ae:	f7fc fe13 	bl	80001d8 <__aeabi_uldivmod>
 80035b2:	4603      	mov	r3, r0
 80035b4:	460c      	mov	r4, r1
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b2c      	ldr	r3, [pc, #176]	; (800366c <UART_SetConfig+0x384>)
 80035ba:	fba3 1302 	umull	r1, r3, r3, r2
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2164      	movs	r1, #100	; 0x64
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	3332      	adds	r3, #50	; 0x32
 80035cc:	4a27      	ldr	r2, [pc, #156]	; (800366c <UART_SetConfig+0x384>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035da:	4498      	add	r8, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	461d      	mov	r5, r3
 80035e0:	f04f 0600 	mov.w	r6, #0
 80035e4:	46a9      	mov	r9, r5
 80035e6:	46b2      	mov	sl, r6
 80035e8:	eb19 0309 	adds.w	r3, r9, r9
 80035ec:	eb4a 040a 	adc.w	r4, sl, sl
 80035f0:	4699      	mov	r9, r3
 80035f2:	46a2      	mov	sl, r4
 80035f4:	eb19 0905 	adds.w	r9, r9, r5
 80035f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80035fc:	f04f 0100 	mov.w	r1, #0
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003608:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800360c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003610:	4689      	mov	r9, r1
 8003612:	4692      	mov	sl, r2
 8003614:	eb19 0005 	adds.w	r0, r9, r5
 8003618:	eb4a 0106 	adc.w	r1, sl, r6
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	461d      	mov	r5, r3
 8003622:	f04f 0600 	mov.w	r6, #0
 8003626:	196b      	adds	r3, r5, r5
 8003628:	eb46 0406 	adc.w	r4, r6, r6
 800362c:	461a      	mov	r2, r3
 800362e:	4623      	mov	r3, r4
 8003630:	f7fc fdd2 	bl	80001d8 <__aeabi_uldivmod>
 8003634:	4603      	mov	r3, r0
 8003636:	460c      	mov	r4, r1
 8003638:	461a      	mov	r2, r3
 800363a:	4b0c      	ldr	r3, [pc, #48]	; (800366c <UART_SetConfig+0x384>)
 800363c:	fba3 1302 	umull	r1, r3, r3, r2
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	2164      	movs	r1, #100	; 0x64
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	3332      	adds	r3, #50	; 0x32
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <UART_SetConfig+0x384>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	f003 0207 	and.w	r2, r3, #7
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4442      	add	r2, r8
 8003660:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003662:	e1b2      	b.n	80039ca <UART_SetConfig+0x6e2>
 8003664:	40011000 	.word	0x40011000
 8003668:	40011400 	.word	0x40011400
 800366c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4ad7      	ldr	r2, [pc, #860]	; (80039d4 <UART_SetConfig+0x6ec>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d005      	beq.n	8003686 <UART_SetConfig+0x39e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4ad6      	ldr	r2, [pc, #856]	; (80039d8 <UART_SetConfig+0x6f0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	f040 80d1 	bne.w	8003828 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003686:	f7ff fb63 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 800368a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	469a      	mov	sl, r3
 8003690:	f04f 0b00 	mov.w	fp, #0
 8003694:	46d0      	mov	r8, sl
 8003696:	46d9      	mov	r9, fp
 8003698:	eb18 0308 	adds.w	r3, r8, r8
 800369c:	eb49 0409 	adc.w	r4, r9, r9
 80036a0:	4698      	mov	r8, r3
 80036a2:	46a1      	mov	r9, r4
 80036a4:	eb18 080a 	adds.w	r8, r8, sl
 80036a8:	eb49 090b 	adc.w	r9, r9, fp
 80036ac:	f04f 0100 	mov.w	r1, #0
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036c0:	4688      	mov	r8, r1
 80036c2:	4691      	mov	r9, r2
 80036c4:	eb1a 0508 	adds.w	r5, sl, r8
 80036c8:	eb4b 0609 	adc.w	r6, fp, r9
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	f04f 0400 	mov.w	r4, #0
 80036de:	0094      	lsls	r4, r2, #2
 80036e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036e4:	008b      	lsls	r3, r1, #2
 80036e6:	461a      	mov	r2, r3
 80036e8:	4623      	mov	r3, r4
 80036ea:	4628      	mov	r0, r5
 80036ec:	4631      	mov	r1, r6
 80036ee:	f7fc fd73 	bl	80001d8 <__aeabi_uldivmod>
 80036f2:	4603      	mov	r3, r0
 80036f4:	460c      	mov	r4, r1
 80036f6:	461a      	mov	r2, r3
 80036f8:	4bb8      	ldr	r3, [pc, #736]	; (80039dc <UART_SetConfig+0x6f4>)
 80036fa:	fba3 2302 	umull	r2, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	469b      	mov	fp, r3
 8003708:	f04f 0c00 	mov.w	ip, #0
 800370c:	46d9      	mov	r9, fp
 800370e:	46e2      	mov	sl, ip
 8003710:	eb19 0309 	adds.w	r3, r9, r9
 8003714:	eb4a 040a 	adc.w	r4, sl, sl
 8003718:	4699      	mov	r9, r3
 800371a:	46a2      	mov	sl, r4
 800371c:	eb19 090b 	adds.w	r9, r9, fp
 8003720:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003730:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003734:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003738:	4689      	mov	r9, r1
 800373a:	4692      	mov	sl, r2
 800373c:	eb1b 0509 	adds.w	r5, fp, r9
 8003740:	eb4c 060a 	adc.w	r6, ip, sl
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	f04f 0400 	mov.w	r4, #0
 8003756:	0094      	lsls	r4, r2, #2
 8003758:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800375c:	008b      	lsls	r3, r1, #2
 800375e:	461a      	mov	r2, r3
 8003760:	4623      	mov	r3, r4
 8003762:	4628      	mov	r0, r5
 8003764:	4631      	mov	r1, r6
 8003766:	f7fc fd37 	bl	80001d8 <__aeabi_uldivmod>
 800376a:	4603      	mov	r3, r0
 800376c:	460c      	mov	r4, r1
 800376e:	461a      	mov	r2, r3
 8003770:	4b9a      	ldr	r3, [pc, #616]	; (80039dc <UART_SetConfig+0x6f4>)
 8003772:	fba3 1302 	umull	r1, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2164      	movs	r1, #100	; 0x64
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	; 0x32
 8003784:	4a95      	ldr	r2, [pc, #596]	; (80039dc <UART_SetConfig+0x6f4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003790:	4498      	add	r8, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	469b      	mov	fp, r3
 8003796:	f04f 0c00 	mov.w	ip, #0
 800379a:	46d9      	mov	r9, fp
 800379c:	46e2      	mov	sl, ip
 800379e:	eb19 0309 	adds.w	r3, r9, r9
 80037a2:	eb4a 040a 	adc.w	r4, sl, sl
 80037a6:	4699      	mov	r9, r3
 80037a8:	46a2      	mov	sl, r4
 80037aa:	eb19 090b 	adds.w	r9, r9, fp
 80037ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037c6:	4689      	mov	r9, r1
 80037c8:	4692      	mov	sl, r2
 80037ca:	eb1b 0509 	adds.w	r5, fp, r9
 80037ce:	eb4c 060a 	adc.w	r6, ip, sl
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4619      	mov	r1, r3
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	0094      	lsls	r4, r2, #2
 80037e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ea:	008b      	lsls	r3, r1, #2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	4628      	mov	r0, r5
 80037f2:	4631      	mov	r1, r6
 80037f4:	f7fc fcf0 	bl	80001d8 <__aeabi_uldivmod>
 80037f8:	4603      	mov	r3, r0
 80037fa:	460c      	mov	r4, r1
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b77      	ldr	r3, [pc, #476]	; (80039dc <UART_SetConfig+0x6f4>)
 8003800:	fba3 1302 	umull	r1, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	2164      	movs	r1, #100	; 0x64
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	3332      	adds	r3, #50	; 0x32
 8003812:	4a72      	ldr	r2, [pc, #456]	; (80039dc <UART_SetConfig+0x6f4>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	f003 020f 	and.w	r2, r3, #15
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4442      	add	r2, r8
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	e0d0      	b.n	80039ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7ff fa7e 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 800382c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	469a      	mov	sl, r3
 8003832:	f04f 0b00 	mov.w	fp, #0
 8003836:	46d0      	mov	r8, sl
 8003838:	46d9      	mov	r9, fp
 800383a:	eb18 0308 	adds.w	r3, r8, r8
 800383e:	eb49 0409 	adc.w	r4, r9, r9
 8003842:	4698      	mov	r8, r3
 8003844:	46a1      	mov	r9, r4
 8003846:	eb18 080a 	adds.w	r8, r8, sl
 800384a:	eb49 090b 	adc.w	r9, r9, fp
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800385a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800385e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003862:	4688      	mov	r8, r1
 8003864:	4691      	mov	r9, r2
 8003866:	eb1a 0508 	adds.w	r5, sl, r8
 800386a:	eb4b 0609 	adc.w	r6, fp, r9
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4619      	mov	r1, r3
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	f04f 0400 	mov.w	r4, #0
 8003880:	0094      	lsls	r4, r2, #2
 8003882:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003886:	008b      	lsls	r3, r1, #2
 8003888:	461a      	mov	r2, r3
 800388a:	4623      	mov	r3, r4
 800388c:	4628      	mov	r0, r5
 800388e:	4631      	mov	r1, r6
 8003890:	f7fc fca2 	bl	80001d8 <__aeabi_uldivmod>
 8003894:	4603      	mov	r3, r0
 8003896:	460c      	mov	r4, r1
 8003898:	461a      	mov	r2, r3
 800389a:	4b50      	ldr	r3, [pc, #320]	; (80039dc <UART_SetConfig+0x6f4>)
 800389c:	fba3 2302 	umull	r2, r3, r3, r2
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	469b      	mov	fp, r3
 80038aa:	f04f 0c00 	mov.w	ip, #0
 80038ae:	46d9      	mov	r9, fp
 80038b0:	46e2      	mov	sl, ip
 80038b2:	eb19 0309 	adds.w	r3, r9, r9
 80038b6:	eb4a 040a 	adc.w	r4, sl, sl
 80038ba:	4699      	mov	r9, r3
 80038bc:	46a2      	mov	sl, r4
 80038be:	eb19 090b 	adds.w	r9, r9, fp
 80038c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038da:	4689      	mov	r9, r1
 80038dc:	4692      	mov	sl, r2
 80038de:	eb1b 0509 	adds.w	r5, fp, r9
 80038e2:	eb4c 060a 	adc.w	r6, ip, sl
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4619      	mov	r1, r3
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	0094      	lsls	r4, r2, #2
 80038fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038fe:	008b      	lsls	r3, r1, #2
 8003900:	461a      	mov	r2, r3
 8003902:	4623      	mov	r3, r4
 8003904:	4628      	mov	r0, r5
 8003906:	4631      	mov	r1, r6
 8003908:	f7fc fc66 	bl	80001d8 <__aeabi_uldivmod>
 800390c:	4603      	mov	r3, r0
 800390e:	460c      	mov	r4, r1
 8003910:	461a      	mov	r2, r3
 8003912:	4b32      	ldr	r3, [pc, #200]	; (80039dc <UART_SetConfig+0x6f4>)
 8003914:	fba3 1302 	umull	r1, r3, r3, r2
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	2164      	movs	r1, #100	; 0x64
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	3332      	adds	r3, #50	; 0x32
 8003926:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <UART_SetConfig+0x6f4>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003932:	4498      	add	r8, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	469b      	mov	fp, r3
 8003938:	f04f 0c00 	mov.w	ip, #0
 800393c:	46d9      	mov	r9, fp
 800393e:	46e2      	mov	sl, ip
 8003940:	eb19 0309 	adds.w	r3, r9, r9
 8003944:	eb4a 040a 	adc.w	r4, sl, sl
 8003948:	4699      	mov	r9, r3
 800394a:	46a2      	mov	sl, r4
 800394c:	eb19 090b 	adds.w	r9, r9, fp
 8003950:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003960:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003964:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003968:	4689      	mov	r9, r1
 800396a:	4692      	mov	sl, r2
 800396c:	eb1b 0509 	adds.w	r5, fp, r9
 8003970:	eb4c 060a 	adc.w	r6, ip, sl
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4619      	mov	r1, r3
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	0094      	lsls	r4, r2, #2
 8003988:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800398c:	008b      	lsls	r3, r1, #2
 800398e:	461a      	mov	r2, r3
 8003990:	4623      	mov	r3, r4
 8003992:	4628      	mov	r0, r5
 8003994:	4631      	mov	r1, r6
 8003996:	f7fc fc1f 	bl	80001d8 <__aeabi_uldivmod>
 800399a:	4603      	mov	r3, r0
 800399c:	460c      	mov	r4, r1
 800399e:	461a      	mov	r2, r3
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <UART_SetConfig+0x6f4>)
 80039a2:	fba3 1302 	umull	r1, r3, r3, r2
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2164      	movs	r1, #100	; 0x64
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	3332      	adds	r3, #50	; 0x32
 80039b4:	4a09      	ldr	r2, [pc, #36]	; (80039dc <UART_SetConfig+0x6f4>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4442      	add	r2, r8
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	e7ff      	b.n	80039ca <UART_SetConfig+0x6e2>
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d4:	40011000 	.word	0x40011000
 80039d8:	40011400 	.word	0x40011400
 80039dc:	51eb851f 	.word	0x51eb851f

080039e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 0201 	bic.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3301      	adds	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <USB_FlushTxFifo+0x48>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e006      	b.n	8003a5e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d0f0      	beq.n	8003a3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	00030d40 	.word	0x00030d40

08003a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2210      	movs	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3301      	adds	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <USB_FlushRxFifo+0x40>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e006      	b.n	8003aa2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d0f0      	beq.n	8003a82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	00030d40 	.word	0x00030d40

08003ab4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	3303      	adds	r3, #3
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	e00b      	b.n	8003af0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3ef      	bcc.n	8003ad8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003af8:	69fb      	ldr	r3, [r7, #28]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3724      	adds	r7, #36	; 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0301 	and.w	r3, r3, #1
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d107      	bne.n	8003b9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b90:	461a      	mov	r2, r3
 8003b92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003b96:	6053      	str	r3, [r2, #4]
 8003b98:	e009      	b.n	8003bae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d106      	bne.n	8003bae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f241 7370 	movw	r3, #6000	; 0x1770
 8003bac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003be0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <USB_DriveVbus+0x44>
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d106      	bne.n	8003c00 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bfe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0a:	d109      	bne.n	8003c20 <USB_DriveVbus+0x64>
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c1e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	b29b      	uxth	r3, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0c9b      	lsrs	r3, r3, #18
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <USB_HC_Halt+0x3a>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d16c      	bne.n	8003d64 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ca8:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d143      	bne.n	8003d3e <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	0151      	lsls	r1, r2, #5
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	440a      	add	r2, r1
 8003ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cd4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cf4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d14:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d22:	d81d      	bhi.n	8003d60 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d3a:	d0ec      	beq.n	8003d16 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003d3c:	e080      	b.n	8003e40 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	0151      	lsls	r1, r2, #5
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	440a      	add	r2, r1
 8003d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d5c:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003d5e:	e06f      	b.n	8003e40 <USB_HC_Halt+0x1f0>
          break;
 8003d60:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003d62:	e06d      	b.n	8003e40 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d143      	bne.n	8003e1c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003db2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dd2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003df2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3301      	adds	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e00:	d81d      	bhi.n	8003e3e <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e18:	d0ec      	beq.n	8003df4 <USB_HC_Halt+0x1a4>
 8003e1a:	e011      	b.n	8003e40 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	0151      	lsls	r1, r2, #5
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	440a      	add	r2, r1
 8003e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	e000      	b.n	8003e40 <USB_HC_Halt+0x1f0>
          break;
 8003e3e:	bf00      	nop
    }
  }

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff fdcf 	bl	8003a02 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e64:	2110      	movs	r1, #16
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fddc 	bl	8003a24 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fdff 	bl	8003a70 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	e01f      	b.n	8003eb8 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e8e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e96:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e9e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	d9dc      	bls.n	8003e78 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e034      	b.n	8003f2e <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eda:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ee2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eea:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	3301      	adds	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f0a:	d80c      	bhi.n	8003f26 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f22:	d0ec      	beq.n	8003efe <USB_StopHost+0xb0>
 8003f24:	e000      	b.n	8003f28 <USB_StopHost+0xda>
        break;
 8003f26:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b0f      	cmp	r3, #15
 8003f32:	d9c7      	bls.n	8003ec4 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f40:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f48:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fd48 	bl	80039e0 <USB_EnableGlobalInt>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f804 	bl	8003f7e <USBH_HandleSof>
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b0b      	cmp	r3, #11
 8003f8e:	d10a      	bne.n	8003fa6 <USBH_HandleSof+0x28>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8003fbe:	bf00      	nop
}
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8003fda:	bf00      	nop
}
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10f      	bne.n	8004018 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00e      	beq.n	8004028 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004010:	2104      	movs	r1, #4
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
 8004016:	e007      	b.n	8004028 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800401e:	2b01      	cmp	r3, #1
 8004020:	d102      	bne.n	8004028 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8b1 	bl	80041a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	791b      	ldrb	r3, [r3, #4]
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f820 	bl	800408c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	795b      	ldrb	r3, [r3, #5]
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f81a 	bl	800408c <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004070:	2105      	movs	r1, #5
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f878 	bl	800416c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2203      	movs	r2, #3
 8004080:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	2b0a      	cmp	r3, #10
 800409c:	d80b      	bhi.n	80040b6 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	32e0      	adds	r2, #224	; 0xe0
 80040a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	32e0      	adds	r2, #224	; 0xe0
 80040b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff41 	bl	8003f5a <USBH_LL_IncTimer>
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ff79 	bl	8003fe6 <USBH_LL_Connect>
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff ff91 	bl	8004032 <USBH_LL_Disconnect>
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
 8004124:	4613      	mov	r3, r2
 8004126:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff33 	bl	8003fae <USBH_LL_PortEnabled>
} 
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff33 	bl	8003fca <USBH_LL_PortDisabled>
} 
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd f90d 	bl	80013a2 <HAL_HCD_Start>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f822 	bl	80041d8 <USBH_Get_USB_Status>
 8004194:	4603      	mov	r3, r0
 8004196:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004198:	7bbb      	ldrb	r3, [r7, #14]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd f915 	bl	80013e8 <HAL_HCD_Stop>
 80041be:	4603      	mov	r3, r0
 80041c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f807 	bl	80041d8 <USBH_Get_USB_Status>
 80041ca:	4603      	mov	r3, r0
 80041cc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80041ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d817      	bhi.n	800421c <USBH_Get_USB_Status+0x44>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <USBH_Get_USB_Status+0x1c>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004205 	.word	0x08004205
 80041f8:	0800420b 	.word	0x0800420b
 80041fc:	08004211 	.word	0x08004211
 8004200:	08004217 	.word	0x08004217
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	73fb      	strb	r3, [r7, #15]
    break;
 8004208:	e00b      	b.n	8004222 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800420a:	2302      	movs	r3, #2
 800420c:	73fb      	strb	r3, [r7, #15]
    break;
 800420e:	e008      	b.n	8004222 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
    break;
 8004214:	e005      	b.n	8004222 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004216:	2302      	movs	r3, #2
 8004218:	73fb      	strb	r3, [r7, #15]
    break;
 800421a:	e002      	b.n	8004222 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800421c:	2302      	movs	r3, #2
 800421e:	73fb      	strb	r3, [r7, #15]
    break;
 8004220:	bf00      	nop
  }
  return usb_status;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4e0d      	ldr	r6, [pc, #52]	; (8004268 <__libc_init_array+0x38>)
 8004234:	4c0d      	ldr	r4, [pc, #52]	; (800426c <__libc_init_array+0x3c>)
 8004236:	1ba4      	subs	r4, r4, r6
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	2500      	movs	r5, #0
 800423c:	42a5      	cmp	r5, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	4e0b      	ldr	r6, [pc, #44]	; (8004270 <__libc_init_array+0x40>)
 8004242:	4c0c      	ldr	r4, [pc, #48]	; (8004274 <__libc_init_array+0x44>)
 8004244:	f000 f820 	bl	8004288 <_init>
 8004248:	1ba4      	subs	r4, r4, r6
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	2500      	movs	r5, #0
 800424e:	42a5      	cmp	r5, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004258:	4798      	blx	r3
 800425a:	3501      	adds	r5, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004262:	4798      	blx	r3
 8004264:	3501      	adds	r5, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	080042d0 	.word	0x080042d0
 800426c:	080042d0 	.word	0x080042d0
 8004270:	080042d0 	.word	0x080042d0
 8004274:	080042d4 	.word	0x080042d4

08004278 <memset>:
 8004278:	4402      	add	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
