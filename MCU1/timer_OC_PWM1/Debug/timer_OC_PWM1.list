
timer_OC_PWM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c70  08002c70  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c74  08002c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000001c  08002c94  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002c94  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a491  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015c4  00000000  00000000  0002a4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab0  00000000  00000000  0002baa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f8  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206e3  00000000  00000000  0002cf50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076dc  00000000  00000000  0004d633  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7eef  00000000  00000000  00054d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cbfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  0011cc7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c38 	.word	0x08002c38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002c38 	.word	0x08002c38

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SysTick_Handler>:
#include "main.h"
extern TIM_HandleTypeDef htimer2;
extern TIM_HandleTypeDef htimer6;

void SysTick_Handler (void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004cc:	f000 fb60 	bl	8000b90 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d0:	f000 fcac 	bl	8000e2c <HAL_SYSTICK_IRQHandler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <TIM2_IRQHandler+0x10>)
 80004de:	f001 faf3 	bl	8001ac8 <HAL_TIM_IRQHandler>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000003c 	.word	0x2000003c

080004ec <main>:
/*
 * Active the PLL clock which with is 50Mhz of HSE.
 *
 */

int main(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	HAL_Init();
 80004f0:	f000 fafc 	bl	8000aec <HAL_Init>

	/* Active the PLL clock which uses 50Mhz of HSE. */
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80004f4:	2032      	movs	r0, #50	; 0x32
 80004f6:	f000 f82d 	bl	8000554 <SystemClock_Config_HSE>

	GPIO_Init();
 80004fa:	f000 f8bd 	bl	8000678 <GPIO_Init>
	/* Initialize UART2 that uses GPIOA 2 and 3*/
	UART2_Init();
 80004fe:	f000 f8df 	bl	80006c0 <UART2_Init>

	/* Configure Timer2 and PWM*/
	TIMER2_Init();
 8000502:	f000 f903 	bl	800070c <TIMER2_Init>

	/* Starts PWM*/
	if( HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_1) != HAL_OK ){
 8000506:	2100      	movs	r1, #0
 8000508:	4811      	ldr	r0, [pc, #68]	; (8000550 <main+0x64>)
 800050a:	f001 fa9f 	bl	8001a4c <HAL_TIM_PWM_Start>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <main+0x2c>
		Error_handler();
 8000514:	f000 f9da 	bl	80008cc <Error_handler>
	}
	if( HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_2) != HAL_OK ){
 8000518:	2104      	movs	r1, #4
 800051a:	480d      	ldr	r0, [pc, #52]	; (8000550 <main+0x64>)
 800051c:	f001 fa96 	bl	8001a4c <HAL_TIM_PWM_Start>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <main+0x3e>
			Error_handler();
 8000526:	f000 f9d1 	bl	80008cc <Error_handler>
	}
	if( HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_3) != HAL_OK ){
 800052a:	2108      	movs	r1, #8
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <main+0x64>)
 800052e:	f001 fa8d 	bl	8001a4c <HAL_TIM_PWM_Start>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <main+0x50>
			Error_handler();
 8000538:	f000 f9c8 	bl	80008cc <Error_handler>
	}
	if( HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_4) != HAL_OK ){
 800053c:	210c      	movs	r1, #12
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <main+0x64>)
 8000540:	f001 fa84 	bl	8001a4c <HAL_TIM_PWM_Start>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <main+0x62>
			Error_handler();
 800054a:	f000 f9bf 	bl	80008cc <Error_handler>
	}

	while(1);
 800054e:	e7fe      	b.n	800054e <main+0x62>
 8000550:	2000003c 	.word	0x2000003c

08000554 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * FIX system clock!!!!!!
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b096      	sub	sp, #88	; 0x58
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 800055e:	2300      	movs	r3, #0
 8000560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI ;
 8000564:	2303      	movs	r3, #3
 8000566:	623b      	str	r3, [r7, #32]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
	//Osc_Init.LSEState = RCC_LSE_ON;
	Osc_Init.HSIState = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b54      	cmp	r3, #84	; 0x54
 8000580:	d01b      	beq.n	80005ba <SystemClock_Config_HSE+0x66>
 8000582:	2b78      	cmp	r3, #120	; 0x78
 8000584:	d030      	beq.n	80005e8 <SystemClock_Config_HSE+0x94>
 8000586:	2b32      	cmp	r3, #50	; 0x32
 8000588:	d000      	beq.n	800058c <SystemClock_Config_HSE+0x38>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 800058a:	e070      	b.n	800066e <SystemClock_Config_HSE+0x11a>
		  Osc_Init.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 100;
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8000598:	2302      	movs	r3, #2
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
          flash_latency = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80005b8:	e02e      	b.n	8000618 <SystemClock_Config_HSE+0xc4>
		  Osc_Init.PLL.PLLM = 8;
 80005ba:	2308      	movs	r3, #8
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 168;
 80005be:	23a8      	movs	r3, #168	; 0xa8
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
          flash_latency = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80005e6:	e017      	b.n	8000618 <SystemClock_Config_HSE+0xc4>
		  Osc_Init.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 240;
 80005ec:	23f0      	movs	r3, #240	; 0xf0
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]
          flash_latency = 3;
 8000610:	2303      	movs	r3, #3
 8000612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 8000616:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fdad 	bl	800117c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config_HSE+0xd8>
	{
			Error_handler();
 8000628:	f000 f950 	bl	80008cc <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 800062c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4611      	mov	r1, r2
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f810 	bl	800165c <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config_HSE+0xf2>
	{
		Error_handler();
 8000642:	f000 f943 	bl	80008cc <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000646:	f001 f9a1 	bl	800198c <HAL_RCC_GetHCLKFreq>
 800064a:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 800064c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <SystemClock_Config_HSE+0x120>)
 8000650:	fba2 2303 	umull	r2, r3, r2, r3
 8000654:	099b      	lsrs	r3, r3, #6
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fbbf 	bl	8000dda <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800065c:	2004      	movs	r0, #4
 800065e:	f000 fbc9 	bl	8000df4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800066a:	f000 fb8c 	bl	8000d86 <HAL_NVIC_SetPriority>



 }
 800066e:	3758      	adds	r7, #88	; 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	10624dd3 	.word	0x10624dd3

08000678 <GPIO_Init>:

void GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <GPIO_Init+0x40>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <GPIO_Init+0x40>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <GPIO_Init+0x40>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 800069a:	2320      	movs	r3, #32
 800069c:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <GPIO_Init+0x44>)
 80006ac:	f000 fbcc 	bl	8000e48 <HAL_GPIO_Init>
}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000

080006c0 <UART2_Init>:

void UART2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <UART2_Init+0x44>)
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <UART2_Init+0x48>)
 80006c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <UART2_Init+0x44>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <UART2_Init+0x44>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <UART2_Init+0x44>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <UART2_Init+0x44>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <UART2_Init+0x44>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <UART2_Init+0x44>)
 80006ec:	220c      	movs	r2, #12
 80006ee:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <UART2_Init+0x44>)
 80006f2:	f001 feac 	bl	800244e <HAL_UART_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 80006fc:	f000 f8e6 	bl	80008cc <Error_handler>
	}


}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000007c 	.word	0x2000007c
 8000708:	40004400 	.word	0x40004400

0800070c <TIMER2_Init>:


 void TIMER2_Init(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

	 TIM_OC_InitTypeDef tim2PWM_Config;

	 htimer2.Instance = TIM2;
 8000712:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <TIMER2_Init+0xfc>)
 8000714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000718:	601a      	str	r2, [r3, #0]
	  * APB1 clk = 50*10^6 Hz
	  * new_clk = 50*10^6 / 49 = +/- 10000Hz
	  * new_period = 9.8*10^(-7)s
	  * If the desired period is 0.001s, so it needs 10000 new_period
	  */
	 htimer2.Init.Period = 1020-1;
 800071a:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <TIMER2_Init+0xfc>)
 800071c:	f240 32fb 	movw	r2, #1019	; 0x3fb
 8000720:	60da      	str	r2, [r3, #12]
	 // 50Mhz / (Prescaler + 1) =  25Mhz
	 htimer2.Init.Prescaler = 49;
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <TIMER2_Init+0xfc>)
 8000724:	2231      	movs	r2, #49	; 0x31
 8000726:	605a      	str	r2, [r3, #4]

	 if(HAL_TIM_PWM_Init(&htimer2) != HAL_OK){
 8000728:	4837      	ldr	r0, [pc, #220]	; (8000808 <TIMER2_Init+0xfc>)
 800072a:	f001 f963 	bl	80019f4 <HAL_TIM_PWM_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <TIMER2_Init+0x2c>
		 Error_handler();
 8000734:	f000 f8ca 	bl	80008cc <Error_handler>
	 }

	 memset(&tim2PWM_Config, 0, sizeof(tim2PWM_Config));
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	221c      	movs	r2, #28
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fa72 	bl	8002c28 <memset>
	 tim2PWM_Config.OCMode =  TIM_OCMODE_PWM1;
 8000744:	2360      	movs	r3, #96	; 0x60
 8000746:	607b      	str	r3, [r7, #4]
	 // TIM_OCPOLARITY_HIGH --> if osciloscopy is HIGH, then output is HIGH, otherwise LOW.
	 // TIM_OCPOLARITY_LOW --> the output is the inverse of the input
	 tim2PWM_Config.OCPolarity =  TIM_OCPOLARITY_HIGH;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]

	 tim2PWM_Config.Pulse = (htimer2.Init.Period * 25) / 100;
 800074c:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <TIMER2_Init+0xfc>)
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	009a      	lsls	r2, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <TIMER2_Init+0x100>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	095b      	lsrs	r3, r3, #5
 8000762:	60bb      	str	r3, [r7, #8]
	 if(HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_1) != HAL_OK ){
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	4619      	mov	r1, r3
 800076a:	4827      	ldr	r0, [pc, #156]	; (8000808 <TIMER2_Init+0xfc>)
 800076c:	f001 fab4 	bl	8001cd8 <HAL_TIM_PWM_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <TIMER2_Init+0x6e>
		 Error_handler();
 8000776:	f000 f8a9 	bl	80008cc <Error_handler>
	 }

	 tim2PWM_Config.Pulse = (htimer2.Init.Period * 45) / 100;
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <TIMER2_Init+0xfc>)
 800077c:	68da      	ldr	r2, [r3, #12]
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	011a      	lsls	r2, r3, #4
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <TIMER2_Init+0x100>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	60bb      	str	r3, [r7, #8]
	 if( HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_2) != HAL_OK ){
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2204      	movs	r2, #4
 8000796:	4619      	mov	r1, r3
 8000798:	481b      	ldr	r0, [pc, #108]	; (8000808 <TIMER2_Init+0xfc>)
 800079a:	f001 fa9d 	bl	8001cd8 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <TIMER2_Init+0x9c>
		 Error_handler();
 80007a4:	f000 f892 	bl	80008cc <Error_handler>
	 }
	 tim2PWM_Config.Pulse = (htimer2.Init.Period * 75) / 100;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <TIMER2_Init+0xfc>)
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	011a      	lsls	r2, r3, #4
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <TIMER2_Init+0x100>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	095b      	lsrs	r3, r3, #5
 80007be:	60bb      	str	r3, [r7, #8]
	 if( HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_3) != HAL_OK ){
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2208      	movs	r2, #8
 80007c4:	4619      	mov	r1, r3
 80007c6:	4810      	ldr	r0, [pc, #64]	; (8000808 <TIMER2_Init+0xfc>)
 80007c8:	f001 fa86 	bl	8001cd8 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <TIMER2_Init+0xca>
		 Error_handler();
 80007d2:	f000 f87b 	bl	80008cc <Error_handler>
	 }
	 tim2PWM_Config.Pulse = (htimer2.Init.Period * 90) / 100;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <TIMER2_Init+0xfc>)
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	225a      	movs	r2, #90	; 0x5a
 80007dc:	fb02 f303 	mul.w	r3, r2, r3
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <TIMER2_Init+0x100>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	60bb      	str	r3, [r7, #8]
	 if( HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_4) != HAL_OK ){
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	220c      	movs	r2, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <TIMER2_Init+0xfc>)
 80007f2:	f001 fa71 	bl	8001cd8 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <TIMER2_Init+0xf4>
		 Error_handler();
 80007fc:	f000 f866 	bl	80008cc <Error_handler>
	 }
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000003c 	.word	0x2000003c
 800080c:	51eb851f 	.word	0x51eb851f

08000810 <HAL_TIM_OC_DelayElapsedCallback>:


 /*
  * Everytime CNT register == CRRx register, calls HAL_TIM_OC_DelayElapsedCallback
  */
 void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

	 /* It codes doesn't deal with overflow. */

	 /* TIM2_CH1 toggling with frequency = 500Hz */
	 if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7f1b      	ldrb	r3, [r3, #28]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10e      	bne.n	800083e <HAL_TIM_OC_DelayElapsedCallback+0x2e>
		 // get the current value in CCR1 register
		 ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000820:	2100      	movs	r1, #0
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f001 fb1e 	bl	8001e64 <HAL_TIM_ReadCapturedValue>
 8000828:	4602      	mov	r2, r0
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800082c:	601a      	str	r2, [r3, #0]
		 // update the CCR1
		 __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content + pulse1_value);
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000830:	6819      	ldr	r1, [r3, #0]
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	440a      	add	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	 /* TIM2_CH2 toggling with frequency = 1000Hz */
	 if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7f1b      	ldrb	r3, [r3, #28]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d10e      	bne.n	8000864 <HAL_TIM_OC_DelayElapsedCallback+0x54>
		 // get the current value in CCR2 register
	 	ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000846:	2104      	movs	r1, #4
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f001 fb0b 	bl	8001e64 <HAL_TIM_ReadCapturedValue>
 800084e:	4602      	mov	r2, r0
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000852:	601a      	str	r2, [r3, #0]
	 	// update the CCR2
	 	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content + pulse2_value);
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000856:	6819      	ldr	r1, [r3, #0]
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	440a      	add	r2, r1
 8000862:	639a      	str	r2, [r3, #56]	; 0x38
	 }
	 /* TIM2_CH3 toggling with frequency = 2000Hz */
	 if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7f1b      	ldrb	r3, [r3, #28]
 8000868:	2b04      	cmp	r3, #4
 800086a:	d10e      	bne.n	800088a <HAL_TIM_OC_DelayElapsedCallback+0x7a>
		 // get the current value in CCR3 register
	 	ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800086c:	2108      	movs	r1, #8
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f001 faf8 	bl	8001e64 <HAL_TIM_ReadCapturedValue>
 8000874:	4602      	mov	r2, r0
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000878:	601a      	str	r2, [r3, #0]
	 	// update the CCR3
	 	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, ccr_content + pulse3_value);
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800087c:	6819      	ldr	r1, [r3, #0]
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	440a      	add	r2, r1
 8000888:	63da      	str	r2, [r3, #60]	; 0x3c
	 }
	 /* TIM2_CH4 toggling with frequency = 4000Hz */
	 if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7f1b      	ldrb	r3, [r3, #28]
 800088e:	2b08      	cmp	r3, #8
 8000890:	d10e      	bne.n	80008b0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
		 // get the current value in CCR4 register
	 	ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000892:	210c      	movs	r1, #12
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f001 fae5 	bl	8001e64 <HAL_TIM_ReadCapturedValue>
 800089a:	4602      	mov	r2, r0
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800089e:	601a      	str	r2, [r3, #0]
	 	// update the CCR4
	 	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, ccr_content + pulse4_value);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80008a2:	6819      	ldr	r1, [r3, #0]
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	440a      	add	r2, r1
 80008ae:	641a      	str	r2, [r3, #64]	; 0x40
	 }

}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000038 	.word	0x20000038
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000008 	.word	0x20000008
 80008c8:	2000000c 	.word	0x2000000c

080008cc <Error_handler>:

void Error_handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
	while(1);
 80008d0:	e7fe      	b.n	80008d0 <Error_handler+0x4>
	...

080008d4 <HAL_MspInit>:

#include "main.h"
extern TIM_HandleTypeDef htimer2;

void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 fa49 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x40>)
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <HAL_MspInit+0x40>)
 80008e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80008e8:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	f06f 000b 	mvn.w	r0, #11
 80008f2:	f000 fa48 	bl	8000d86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	f06f 000a 	mvn.w	r0, #10
 80008fe:	f000 fa42 	bl	8000d86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	f06f 0009 	mvn.w	r0, #9
 800090a:	f000 fa3c 	bl	8000d86 <HAL_NVIC_SetPriority>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <HAL_UART_MspInit>:

/*
 * HAL_UART_Init calls HAL_UART_MspInit
 */
 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <HAL_UART_MspInit+0x88>)
 800092a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_UART_MspInit+0x88>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000958:	2304      	movs	r3, #4
 800095a:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000968:	2307      	movs	r3, #7
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	480c      	ldr	r0, [pc, #48]	; (80009a4 <HAL_UART_MspInit+0x8c>)
 8000974:	f000 fa68 	bl	8000e48 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000978:	2308      	movs	r3, #8
 800097a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <HAL_UART_MspInit+0x8c>)
 8000984:	f000 fa60 	bl	8000e48 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000988:	2026      	movs	r0, #38	; 0x26
 800098a:	f000 fa18 	bl	8000dbe <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	2026      	movs	r0, #38	; 0x26
 8000994:	f000 f9f7 	bl	8000d86 <HAL_NVIC_SetPriority>

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000

080009a8 <HAL_TIM_PWM_MspInit>:

 /*
  * HAL_TIM_OC_Init calls HAL_TIM_OC_MspInit which must be implemented
  */
 void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef tim2OC_gpios;
	 //1. enable the peripheral clock for the timer2 peripheral
	 __HAL_RCC_TIM2_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_TIM_PWM_MspInit+0xb8>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
	  * PA1 --> TIM2_CH2
	  * PB10 --> TIM2_CH3
	  * PB11 --> TIM2_CH4
	  */

	 tim2OC_gpios.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a04:	2303      	movs	r3, #3
 8000a06:	617b      	str	r3, [r7, #20]
	 tim2OC_gpios.Mode =GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
	 tim2OC_gpios.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
	 tim2OC_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
	 tim2OC_gpios.Alternate =  GPIO_AF1_TIM2;
 8000a14:	2301      	movs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&tim2OC_gpios);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <HAL_TIM_PWM_MspInit+0xbc>)
 8000a20:	f000 fa12 	bl	8000e48 <HAL_GPIO_Init>

	 tim2OC_gpios.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000a24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a28:	617b      	str	r3, [r7, #20]
	 tim2OC_gpios.Mode =GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
	 tim2OC_gpios.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
	 tim2OC_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
	 tim2OC_gpios.Alternate =  GPIO_AF1_TIM2;
 8000a36:	2301      	movs	r3, #1
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOB,&tim2OC_gpios);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <HAL_TIM_PWM_MspInit+0xc0>)
 8000a42:	f000 fa01 	bl	8000e48 <HAL_GPIO_Init>

	 //3. nvic settings
	 HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	201c      	movs	r0, #28
 8000a4c:	f000 f99b 	bl	8000d86 <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a50:	201c      	movs	r0, #28
 8000a52:	f000 f9b4 	bl	8000dbe <HAL_NVIC_EnableIRQ>

 }
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020400 	.word	0x40020400

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SystemInit+0x28>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SystemInit+0x28>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SystemInit+0x28>)
 8000a82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a86:	609a      	str	r2, [r3, #8]
#endif
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a9e:	e003      	b.n	8000aa8 <LoopCopyDataInit>

08000aa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aa6:	3104      	adds	r1, #4

08000aa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab0:	d3f6      	bcc.n	8000aa0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab4:	e002      	b.n	8000abc <LoopFillZerobss>

08000ab6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ab6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab8:	f842 3b04 	str.w	r3, [r2], #4

08000abc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000abe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac0:	d3f9      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac2:	f7ff ffd3 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f002 f88b 	bl	8002be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd0f 	bl	80004ec <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad4:	08002c78 	.word	0x08002c78
  ldr  r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000adc:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000ae0:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000ae4:	200000c0 	.word	0x200000c0

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f92b 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fed8 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f943 	bl	8000dda <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 f90b 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000010 	.word	0x20000010
 8000b88:	20000018 	.word	0x20000018
 8000b8c:	20000014 	.word	0x20000014

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000018 	.word	0x20000018
 8000bb4:	200000bc 	.word	0x200000bc

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200000bc 	.word	0x200000bc

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d106      	bne.n	8000e10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e0e:	e005      	b.n	8000e1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e16:	f023 0304 	bic.w	r3, r3, #4
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e30:	f000 f802 	bl	8000e38 <HAL_SYSTICK_Callback>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e16b      	b.n	800113c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 815a 	bne.w	8001136 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d00b      	beq.n	8000ea2 <HAL_GPIO_Init+0x5a>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e96:	2b11      	cmp	r3, #17
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d130      	bne.n	8000f04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	f003 0201 	and.w	r2, r3, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0xfc>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b12      	cmp	r3, #18
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80b4 	beq.w	8001136 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b5f      	ldr	r3, [pc, #380]	; (8001150 <HAL_GPIO_Init+0x308>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a5e      	ldr	r2, [pc, #376]	; (8001150 <HAL_GPIO_Init+0x308>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b5c      	ldr	r3, [pc, #368]	; (8001150 <HAL_GPIO_Init+0x308>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a5a      	ldr	r2, [pc, #360]	; (8001154 <HAL_GPIO_Init+0x30c>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a51      	ldr	r2, [pc, #324]	; (8001158 <HAL_GPIO_Init+0x310>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d02b      	beq.n	800106e <HAL_GPIO_Init+0x226>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a50      	ldr	r2, [pc, #320]	; (800115c <HAL_GPIO_Init+0x314>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d025      	beq.n	800106a <HAL_GPIO_Init+0x222>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <HAL_GPIO_Init+0x318>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01f      	beq.n	8001066 <HAL_GPIO_Init+0x21e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_GPIO_Init+0x31c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x21a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <HAL_GPIO_Init+0x320>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x216>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x324>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x212>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x328>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x20e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x32c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x20a>
 800104e:	2307      	movs	r3, #7
 8001050:	e00e      	b.n	8001070 <HAL_GPIO_Init+0x228>
 8001052:	2308      	movs	r3, #8
 8001054:	e00c      	b.n	8001070 <HAL_GPIO_Init+0x228>
 8001056:	2306      	movs	r3, #6
 8001058:	e00a      	b.n	8001070 <HAL_GPIO_Init+0x228>
 800105a:	2305      	movs	r3, #5
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x228>
 800105e:	2304      	movs	r3, #4
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x228>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x228>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x228>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x228>
 800106e:	2300      	movs	r3, #0
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	f002 0203 	and.w	r2, r2, #3
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001080:	4934      	ldr	r1, [pc, #208]	; (8001154 <HAL_GPIO_Init+0x30c>)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108e:	4b3a      	ldr	r3, [pc, #232]	; (8001178 <HAL_GPIO_Init+0x330>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <HAL_GPIO_Init+0x330>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b8:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <HAL_GPIO_Init+0x330>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010dc:	4a26      	ldr	r2, [pc, #152]	; (8001178 <HAL_GPIO_Init+0x330>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_GPIO_Init+0x330>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_GPIO_Init+0x330>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_GPIO_Init+0x330>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <HAL_GPIO_Init+0x330>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3301      	adds	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	f67f ae90 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001144:	bf00      	nop
 8001146:	3724      	adds	r7, #36	; 0x24
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40023800 	.word	0x40023800
 8001154:	40013800 	.word	0x40013800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40021000 	.word	0x40021000
 800116c:	40021400 	.word	0x40021400
 8001170:	40021800 	.word	0x40021800
 8001174:	40021c00 	.word	0x40021c00
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e25b      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d075      	beq.n	8001286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119a:	4ba3      	ldr	r3, [pc, #652]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d00c      	beq.n	80011c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4ba0      	ldr	r3, [pc, #640]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d112      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b2:	4b9d      	ldr	r3, [pc, #628]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011be:	d10b      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	4b99      	ldr	r3, [pc, #612]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d05b      	beq.n	8001284 <HAL_RCC_OscConfig+0x108>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d157      	bne.n	8001284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e236      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e0:	d106      	bne.n	80011f0 <HAL_RCC_OscConfig+0x74>
 80011e2:	4b91      	ldr	r3, [pc, #580]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a90      	ldr	r2, [pc, #576]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e01d      	b.n	800122c <HAL_RCC_OscConfig+0xb0>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x98>
 80011fa:	4b8b      	ldr	r3, [pc, #556]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a8a      	ldr	r2, [pc, #552]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b88      	ldr	r3, [pc, #544]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a87      	ldr	r2, [pc, #540]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0xb0>
 8001214:	4b84      	ldr	r3, [pc, #528]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a83      	ldr	r2, [pc, #524]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b81      	ldr	r3, [pc, #516]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a80      	ldr	r2, [pc, #512]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d013      	beq.n	800125c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fcc0 	bl	8000bb8 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fcbc 	bl	8000bb8 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1fb      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b76      	ldr	r3, [pc, #472]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0xc0>
 800125a:	e014      	b.n	8001286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fcac 	bl	8000bb8 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fca8 	bl	8000bb8 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1e7      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0xe8>
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d063      	beq.n	800135a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001292:	4b65      	ldr	r3, [pc, #404]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b62      	ldr	r3, [pc, #392]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d11c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012aa:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d116      	bne.n	80012e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <HAL_RCC_OscConfig+0x152>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e1bb      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4952      	ldr	r1, [pc, #328]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	e03a      	b.n	800135a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d020      	beq.n	800132e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ec:	4b4f      	ldr	r3, [pc, #316]	; (800142c <HAL_RCC_OscConfig+0x2b0>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f2:	f7ff fc61 	bl	8000bb8 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fc5d 	bl	8000bb8 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e19c      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4940      	ldr	r1, [pc, #256]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
 800132c:	e015      	b.n	800135a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132e:	4b3f      	ldr	r3, [pc, #252]	; (800142c <HAL_RCC_OscConfig+0x2b0>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fc40 	bl	8000bb8 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff fc3c 	bl	8000bb8 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e17b      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d030      	beq.n	80013c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d016      	beq.n	800139c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_RCC_OscConfig+0x2b4>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff fc20 	bl	8000bb8 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff fc1c 	bl	8000bb8 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e15b      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x200>
 800139a:	e015      	b.n	80013c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <HAL_RCC_OscConfig+0x2b4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fc09 	bl	8000bb8 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff fc05 	bl	8000bb8 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e144      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80013be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80a0 	beq.w	8001516 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_OscConfig+0x2b8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d121      	bne.n	8001456 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_RCC_OscConfig+0x2b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_RCC_OscConfig+0x2b8>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7ff fbcb 	bl	8000bb8 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e011      	b.n	800144a <HAL_RCC_OscConfig+0x2ce>
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	42470000 	.word	0x42470000
 8001430:	42470e80 	.word	0x42470e80
 8001434:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001438:	f7ff fbbe 	bl	8000bb8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e0fd      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x4d4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x2f0>
 800145e:	4b7d      	ldr	r3, [pc, #500]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a7c      	ldr	r2, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6713      	str	r3, [r2, #112]	; 0x70
 800146a:	e01c      	b.n	80014a6 <HAL_RCC_OscConfig+0x32a>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b05      	cmp	r3, #5
 8001472:	d10c      	bne.n	800148e <HAL_RCC_OscConfig+0x312>
 8001474:	4b77      	ldr	r3, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	4a76      	ldr	r2, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	6713      	str	r3, [r2, #112]	; 0x70
 8001480:	4b74      	ldr	r3, [pc, #464]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001484:	4a73      	ldr	r2, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6713      	str	r3, [r2, #112]	; 0x70
 800148c:	e00b      	b.n	80014a6 <HAL_RCC_OscConfig+0x32a>
 800148e:	4b71      	ldr	r3, [pc, #452]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	4a70      	ldr	r2, [pc, #448]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
 800149a:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	4a6d      	ldr	r2, [pc, #436]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d015      	beq.n	80014da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff fb83 	bl	8000bb8 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fb7f 	bl	8000bb8 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0bc      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	4b61      	ldr	r3, [pc, #388]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0ee      	beq.n	80014b6 <HAL_RCC_OscConfig+0x33a>
 80014d8:	e014      	b.n	8001504 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fb6d 	bl	8000bb8 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff fb69 	bl	8000bb8 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0a6      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ee      	bne.n	80014e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d105      	bne.n	8001516 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150a:	4b52      	ldr	r3, [pc, #328]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a51      	ldr	r2, [pc, #324]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8092 	beq.w	8001644 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001520:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d05c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d141      	bne.n	80015b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001534:	4b48      	ldr	r3, [pc, #288]	; (8001658 <HAL_RCC_OscConfig+0x4dc>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fb3d 	bl	8000bb8 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff fb39 	bl	8000bb8 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e078      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69da      	ldr	r2, [r3, #28]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	019b      	lsls	r3, r3, #6
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	085b      	lsrs	r3, r3, #1
 8001578:	3b01      	subs	r3, #1
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	061b      	lsls	r3, r3, #24
 8001584:	4933      	ldr	r1, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <HAL_RCC_OscConfig+0x4dc>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fb12 	bl	8000bb8 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fb0e 	bl	8000bb8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e04d      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x41c>
 80015b6:	e045      	b.n	8001644 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_RCC_OscConfig+0x4dc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fafb 	bl	8000bb8 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff faf7 	bl	8000bb8 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e036      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x44a>
 80015e4:	e02e      	b.n	8001644 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e029      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_RCC_OscConfig+0x4d8>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	429a      	cmp	r2, r3
 8001604:	d11c      	bne.n	8001640 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d115      	bne.n	8001640 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001620:	4293      	cmp	r3, r2
 8001622:	d10d      	bne.n	8001640 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d106      	bne.n	8001640 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40007000 	.word	0x40007000
 8001654:	40023800 	.word	0x40023800
 8001658:	42470060 	.word	0x42470060

0800165c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0cc      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d90c      	bls.n	8001698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b63      	ldr	r3, [pc, #396]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0b8      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a52      	ldr	r2, [pc, #328]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d4:	4b50      	ldr	r3, [pc, #320]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	494d      	ldr	r1, [pc, #308]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d044      	beq.n	800177c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d119      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e07f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d003      	beq.n	800171a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001716:	2b03      	cmp	r3, #3
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171a:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e06f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172a:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e067      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173a:	4b37      	ldr	r3, [pc, #220]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f023 0203 	bic.w	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4934      	ldr	r1, [pc, #208]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174c:	f7ff fa34 	bl	8000bb8 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	e00a      	b.n	800176a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f7ff fa30 	bl	8000bb8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e04f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 020c 	and.w	r2, r3, #12
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	429a      	cmp	r2, r3
 800177a:	d1eb      	bne.n	8001754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d20c      	bcs.n	80017a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e032      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4916      	ldr	r1, [pc, #88]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	490e      	ldr	r1, [pc, #56]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e2:	f000 f821 	bl	8001828 <HAL_RCC_GetSysClockFreq>
 80017e6:	4601      	mov	r1, r0
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	fa21 f303 	lsr.w	r3, r1, r3
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f994 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00
 8001818:	40023800 	.word	0x40023800
 800181c:	08002c50 	.word	0x08002c50
 8001820:	20000010 	.word	0x20000010
 8001824:	20000014 	.word	0x20000014

08001828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800183e:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_GetSysClockFreq+0x158>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b04      	cmp	r3, #4
 8001848:	d007      	beq.n	800185a <HAL_RCC_GetSysClockFreq+0x32>
 800184a:	2b08      	cmp	r3, #8
 800184c:	d008      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x38>
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 808d 	bne.w	800196e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001854:	4b4b      	ldr	r3, [pc, #300]	; (8001984 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001856:	60bb      	str	r3, [r7, #8]
       break;
 8001858:	e08c      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185a:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <HAL_RCC_GetSysClockFreq+0x160>)
 800185c:	60bb      	str	r3, [r7, #8]
      break;
 800185e:	e089      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_GetSysClockFreq+0x158>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001868:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186a:	4b45      	ldr	r3, [pc, #276]	; (8001980 <HAL_RCC_GetSysClockFreq+0x158>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d023      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	4b42      	ldr	r3, [pc, #264]	; (8001980 <HAL_RCC_GetSysClockFreq+0x158>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	f04f 0400 	mov.w	r4, #0
 8001880:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	ea03 0501 	and.w	r5, r3, r1
 800188c:	ea04 0602 	and.w	r6, r4, r2
 8001890:	4a3d      	ldr	r2, [pc, #244]	; (8001988 <HAL_RCC_GetSysClockFreq+0x160>)
 8001892:	fb02 f106 	mul.w	r1, r2, r6
 8001896:	2200      	movs	r2, #0
 8001898:	fb02 f205 	mul.w	r2, r2, r5
 800189c:	440a      	add	r2, r1
 800189e:	493a      	ldr	r1, [pc, #232]	; (8001988 <HAL_RCC_GetSysClockFreq+0x160>)
 80018a0:	fba5 0101 	umull	r0, r1, r5, r1
 80018a4:	1853      	adds	r3, r2, r1
 80018a6:	4619      	mov	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f04f 0400 	mov.w	r4, #0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4623      	mov	r3, r4
 80018b2:	f7fe fc89 	bl	80001c8 <__aeabi_uldivmod>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e049      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	f04f 0400 	mov.w	r4, #0
 80018c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	ea03 0501 	and.w	r5, r3, r1
 80018d4:	ea04 0602 	and.w	r6, r4, r2
 80018d8:	4629      	mov	r1, r5
 80018da:	4632      	mov	r2, r6
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	f04f 0400 	mov.w	r4, #0
 80018e4:	0154      	lsls	r4, r2, #5
 80018e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ea:	014b      	lsls	r3, r1, #5
 80018ec:	4619      	mov	r1, r3
 80018ee:	4622      	mov	r2, r4
 80018f0:	1b49      	subs	r1, r1, r5
 80018f2:	eb62 0206 	sbc.w	r2, r2, r6
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	f04f 0400 	mov.w	r4, #0
 80018fe:	0194      	lsls	r4, r2, #6
 8001900:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001904:	018b      	lsls	r3, r1, #6
 8001906:	1a5b      	subs	r3, r3, r1
 8001908:	eb64 0402 	sbc.w	r4, r4, r2
 800190c:	f04f 0100 	mov.w	r1, #0
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	00e2      	lsls	r2, r4, #3
 8001916:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800191a:	00d9      	lsls	r1, r3, #3
 800191c:	460b      	mov	r3, r1
 800191e:	4614      	mov	r4, r2
 8001920:	195b      	adds	r3, r3, r5
 8001922:	eb44 0406 	adc.w	r4, r4, r6
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	02a2      	lsls	r2, r4, #10
 8001930:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001934:	0299      	lsls	r1, r3, #10
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	4618      	mov	r0, r3
 800193c:	4621      	mov	r1, r4
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f04f 0400 	mov.w	r4, #0
 8001944:	461a      	mov	r2, r3
 8001946:	4623      	mov	r3, r4
 8001948:	f7fe fc3e 	bl	80001c8 <__aeabi_uldivmod>
 800194c:	4603      	mov	r3, r0
 800194e:	460c      	mov	r4, r1
 8001950:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_GetSysClockFreq+0x158>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	3301      	adds	r3, #1
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	60bb      	str	r3, [r7, #8]
      break;
 800196c:	e002      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001970:	60bb      	str	r3, [r7, #8]
      break;
 8001972:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001974:	68bb      	ldr	r3, [r7, #8]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	00f42400 	.word	0x00f42400
 8001988:	017d7840 	.word	0x017d7840

0800198c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000010 	.word	0x20000010

080019a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a8:	f7ff fff0 	bl	800198c <HAL_RCC_GetHCLKFreq>
 80019ac:	4601      	mov	r1, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	0a9b      	lsrs	r3, r3, #10
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08002c60 	.word	0x08002c60

080019cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019d0:	f7ff ffdc 	bl	800198c <HAL_RCC_GetHCLKFreq>
 80019d4:	4601      	mov	r1, r0
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	0b5b      	lsrs	r3, r3, #13
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	08002c60 	.word	0x08002c60

080019f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e01d      	b.n	8001a42 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe ffc4 	bl	80009a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f000 fa82 	bl	8001f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fcbc 	bl	80023dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <HAL_TIM_PWM_Start+0x74>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d004      	beq.n	8001a78 <HAL_TIM_PWM_Start+0x2c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_TIM_PWM_Start+0x78>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_TIM_PWM_Start+0x30>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_TIM_PWM_Start+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d007      	beq.n	8001ab4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d122      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d11b      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0202 	mvn.w	r2, #2
 8001af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f9f8 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001b10:	e005      	b.n	8001b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fe7c 	bl	8000810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f9fb 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d122      	bne.n	8001b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d11b      	bne.n	8001b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0204 	mvn.w	r2, #4
 8001b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f9ce 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fe52 	bl	8000810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f9d1 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0208 	mvn.w	r2, #8
 8001b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f9a4 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe fe28 	bl	8000810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f9a7 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0210 	mvn.w	r2, #16
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f97a 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fdfe 	bl	8000810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f97d 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10e      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0201 	mvn.w	r2, #1
 8001c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f950 	bl	8001eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	2b80      	cmp	r3, #128	; 0x80
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c64:	2b80      	cmp	r3, #128	; 0x80
 8001c66:	d107      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fbe1 	bl	800243a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	2b40      	cmp	r3, #64	; 0x40
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	d107      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f942 	bl	8001f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d107      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0220 	mvn.w	r2, #32
 8001cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fbab 	bl	8002426 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e0b4      	b.n	8001e5c <HAL_TIM_PWM_ConfigChannel+0x184>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	f200 809f 	bhi.w	8001e48 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d45 	.word	0x08001d45
 8001d14:	08001e49 	.word	0x08001e49
 8001d18:	08001e49 	.word	0x08001e49
 8001d1c:	08001e49 	.word	0x08001e49
 8001d20:	08001d85 	.word	0x08001d85
 8001d24:	08001e49 	.word	0x08001e49
 8001d28:	08001e49 	.word	0x08001e49
 8001d2c:	08001e49 	.word	0x08001e49
 8001d30:	08001dc7 	.word	0x08001dc7
 8001d34:	08001e49 	.word	0x08001e49
 8001d38:	08001e49 	.word	0x08001e49
 8001d3c:	08001e49 	.word	0x08001e49
 8001d40:	08001e07 	.word	0x08001e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f996 	bl	800207c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0208 	orr.w	r2, r2, #8
 8001d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0204 	bic.w	r2, r2, #4
 8001d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6999      	ldr	r1, [r3, #24]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	619a      	str	r2, [r3, #24]
      break;
 8001d82:	e062      	b.n	8001e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f9e6 	bl	800215c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6999      	ldr	r1, [r3, #24]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	021a      	lsls	r2, r3, #8
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	619a      	str	r2, [r3, #24]
      break;
 8001dc4:	e041      	b.n	8001e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fa3b 	bl	8002248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0208 	orr.w	r2, r2, #8
 8001de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0204 	bic.w	r2, r2, #4
 8001df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69d9      	ldr	r1, [r3, #28]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	61da      	str	r2, [r3, #28]
      break;
 8001e04:	e021      	b.n	8001e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fa8f 	bl	8002330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69da      	ldr	r2, [r3, #28]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69d9      	ldr	r1, [r3, #28]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	021a      	lsls	r2, r3, #8
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	61da      	str	r2, [r3, #28]
      break;
 8001e46:	e000      	b.n	8001e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001e48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d831      	bhi.n	8001edc <HAL_TIM_ReadCapturedValue+0x78>
 8001e78:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001eb5 	.word	0x08001eb5
 8001e84:	08001edd 	.word	0x08001edd
 8001e88:	08001edd 	.word	0x08001edd
 8001e8c:	08001edd 	.word	0x08001edd
 8001e90:	08001ebf 	.word	0x08001ebf
 8001e94:	08001edd 	.word	0x08001edd
 8001e98:	08001edd 	.word	0x08001edd
 8001e9c:	08001edd 	.word	0x08001edd
 8001ea0:	08001ec9 	.word	0x08001ec9
 8001ea4:	08001edd 	.word	0x08001edd
 8001ea8:	08001edd 	.word	0x08001edd
 8001eac:	08001edd 	.word	0x08001edd
 8001eb0:	08001ed3 	.word	0x08001ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	60fb      	str	r3, [r7, #12]

      break;
 8001ebc:	e00f      	b.n	8001ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	60fb      	str	r3, [r7, #12]

      break;
 8001ec6:	e00a      	b.n	8001ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	60fb      	str	r3, [r7, #12]

      break;
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	60fb      	str	r3, [r7, #12]

      break;
 8001eda:	e000      	b.n	8001ede <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001edc:	bf00      	nop
  }

  return tmpreg;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a40      	ldr	r2, [pc, #256]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5a:	d00f      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3d      	ldr	r2, [pc, #244]	; (8002054 <TIM_Base_SetConfig+0x118>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00b      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3c      	ldr	r2, [pc, #240]	; (8002058 <TIM_Base_SetConfig+0x11c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	; (800205c <TIM_Base_SetConfig+0x120>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3a      	ldr	r2, [pc, #232]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d027      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2c      	ldr	r2, [pc, #176]	; (8002054 <TIM_Base_SetConfig+0x118>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d023      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <TIM_Base_SetConfig+0x11c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01f      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2a      	ldr	r2, [pc, #168]	; (800205c <TIM_Base_SetConfig+0x120>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a29      	ldr	r2, [pc, #164]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	; (8002064 <TIM_Base_SetConfig+0x128>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <TIM_Base_SetConfig+0x12c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <TIM_Base_SetConfig+0x130>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <TIM_Base_SetConfig+0x134>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a24      	ldr	r2, [pc, #144]	; (8002074 <TIM_Base_SetConfig+0x138>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <TIM_Base_SetConfig+0x13c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_Base_SetConfig+0xf8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d103      	bne.n	800203c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	615a      	str	r2, [r3, #20]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40010000 	.word	0x40010000
 8002054:	40000400 	.word	0x40000400
 8002058:	40000800 	.word	0x40000800
 800205c:	40000c00 	.word	0x40000c00
 8002060:	40010400 	.word	0x40010400
 8002064:	40014000 	.word	0x40014000
 8002068:	40014400 	.word	0x40014400
 800206c:	40014800 	.word	0x40014800
 8002070:	40001800 	.word	0x40001800
 8002074:	40001c00 	.word	0x40001c00
 8002078:	40002000 	.word	0x40002000

0800207c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f023 0201 	bic.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f023 0302 	bic.w	r3, r3, #2
 80020c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a20      	ldr	r2, [pc, #128]	; (8002154 <TIM_OC1_SetConfig+0xd8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_OC1_SetConfig+0x64>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <TIM_OC1_SetConfig+0xdc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10c      	bne.n	80020fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0308 	bic.w	r3, r3, #8
 80020e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <TIM_OC1_SetConfig+0xd8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_OC1_SetConfig+0x8e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <TIM_OC1_SetConfig+0xdc>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	621a      	str	r2, [r3, #32]
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40010000 	.word	0x40010000
 8002158:	40010400 	.word	0x40010400

0800215c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f023 0210 	bic.w	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800218a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0320 	bic.w	r3, r3, #32
 80021a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <TIM_OC2_SetConfig+0xe4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <TIM_OC2_SetConfig+0x68>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a21      	ldr	r2, [pc, #132]	; (8002244 <TIM_OC2_SetConfig+0xe8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10d      	bne.n	80021e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a17      	ldr	r2, [pc, #92]	; (8002240 <TIM_OC2_SetConfig+0xe4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <TIM_OC2_SetConfig+0x94>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <TIM_OC2_SetConfig+0xe8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d113      	bne.n	8002218 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	621a      	str	r2, [r3, #32]
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	40010400 	.word	0x40010400

08002248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a21      	ldr	r2, [pc, #132]	; (8002328 <TIM_OC3_SetConfig+0xe0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <TIM_OC3_SetConfig+0x66>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <TIM_OC3_SetConfig+0xe4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10d      	bne.n	80022ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a16      	ldr	r2, [pc, #88]	; (8002328 <TIM_OC3_SetConfig+0xe0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_OC3_SetConfig+0x92>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a15      	ldr	r2, [pc, #84]	; (800232c <TIM_OC3_SetConfig+0xe4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d113      	bne.n	8002302 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	621a      	str	r2, [r3, #32]
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40010000 	.word	0x40010000
 800232c:	40010400 	.word	0x40010400

08002330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800235e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800237a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	031b      	lsls	r3, r3, #12
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <TIM_OC4_SetConfig+0xa4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d003      	beq.n	8002398 <TIM_OC4_SetConfig+0x68>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <TIM_OC4_SetConfig+0xa8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d109      	bne.n	80023ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	621a      	str	r2, [r3, #32]
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40010000 	.word	0x40010000
 80023d8:	40010400 	.word	0x40010400

080023dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2201      	movs	r2, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	401a      	ands	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	431a      	orrs	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e03f      	b.n	80024e0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fe fa4f 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2224      	movs	r2, #36	; 0x24
 800247e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002490:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f828 	bl	80024e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800252a:	f023 030c 	bic.w	r3, r3, #12
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	68f9      	ldr	r1, [r7, #12]
 8002534:	430b      	orrs	r3, r1
 8002536:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002556:	f040 818b 	bne.w	8002870 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4ac1      	ldr	r2, [pc, #772]	; (8002864 <UART_SetConfig+0x37c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d005      	beq.n	8002570 <UART_SetConfig+0x88>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4abf      	ldr	r2, [pc, #764]	; (8002868 <UART_SetConfig+0x380>)
 800256a:	4293      	cmp	r3, r2
 800256c:	f040 80bd 	bne.w	80026ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002570:	f7ff fa2c 	bl	80019cc <HAL_RCC_GetPCLK2Freq>
 8002574:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	461d      	mov	r5, r3
 800257a:	f04f 0600 	mov.w	r6, #0
 800257e:	46a8      	mov	r8, r5
 8002580:	46b1      	mov	r9, r6
 8002582:	eb18 0308 	adds.w	r3, r8, r8
 8002586:	eb49 0409 	adc.w	r4, r9, r9
 800258a:	4698      	mov	r8, r3
 800258c:	46a1      	mov	r9, r4
 800258e:	eb18 0805 	adds.w	r8, r8, r5
 8002592:	eb49 0906 	adc.w	r9, r9, r6
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025aa:	4688      	mov	r8, r1
 80025ac:	4691      	mov	r9, r2
 80025ae:	eb18 0005 	adds.w	r0, r8, r5
 80025b2:	eb49 0106 	adc.w	r1, r9, r6
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	461d      	mov	r5, r3
 80025bc:	f04f 0600 	mov.w	r6, #0
 80025c0:	196b      	adds	r3, r5, r5
 80025c2:	eb46 0406 	adc.w	r4, r6, r6
 80025c6:	461a      	mov	r2, r3
 80025c8:	4623      	mov	r3, r4
 80025ca:	f7fd fdfd 	bl	80001c8 <__aeabi_uldivmod>
 80025ce:	4603      	mov	r3, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	461a      	mov	r2, r3
 80025d4:	4ba5      	ldr	r3, [pc, #660]	; (800286c <UART_SetConfig+0x384>)
 80025d6:	fba3 2302 	umull	r2, r3, r3, r2
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	461d      	mov	r5, r3
 80025e4:	f04f 0600 	mov.w	r6, #0
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46b2      	mov	sl, r6
 80025ec:	eb19 0309 	adds.w	r3, r9, r9
 80025f0:	eb4a 040a 	adc.w	r4, sl, sl
 80025f4:	4699      	mov	r9, r3
 80025f6:	46a2      	mov	sl, r4
 80025f8:	eb19 0905 	adds.w	r9, r9, r5
 80025fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002614:	4689      	mov	r9, r1
 8002616:	4692      	mov	sl, r2
 8002618:	eb19 0005 	adds.w	r0, r9, r5
 800261c:	eb4a 0106 	adc.w	r1, sl, r6
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	461d      	mov	r5, r3
 8002626:	f04f 0600 	mov.w	r6, #0
 800262a:	196b      	adds	r3, r5, r5
 800262c:	eb46 0406 	adc.w	r4, r6, r6
 8002630:	461a      	mov	r2, r3
 8002632:	4623      	mov	r3, r4
 8002634:	f7fd fdc8 	bl	80001c8 <__aeabi_uldivmod>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	461a      	mov	r2, r3
 800263e:	4b8b      	ldr	r3, [pc, #556]	; (800286c <UART_SetConfig+0x384>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a86      	ldr	r2, [pc, #536]	; (800286c <UART_SetConfig+0x384>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002660:	4498      	add	r8, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	461d      	mov	r5, r3
 8002666:	f04f 0600 	mov.w	r6, #0
 800266a:	46a9      	mov	r9, r5
 800266c:	46b2      	mov	sl, r6
 800266e:	eb19 0309 	adds.w	r3, r9, r9
 8002672:	eb4a 040a 	adc.w	r4, sl, sl
 8002676:	4699      	mov	r9, r3
 8002678:	46a2      	mov	sl, r4
 800267a:	eb19 0905 	adds.w	r9, r9, r5
 800267e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800268e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002692:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002696:	4689      	mov	r9, r1
 8002698:	4692      	mov	sl, r2
 800269a:	eb19 0005 	adds.w	r0, r9, r5
 800269e:	eb4a 0106 	adc.w	r1, sl, r6
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	461d      	mov	r5, r3
 80026a8:	f04f 0600 	mov.w	r6, #0
 80026ac:	196b      	adds	r3, r5, r5
 80026ae:	eb46 0406 	adc.w	r4, r6, r6
 80026b2:	461a      	mov	r2, r3
 80026b4:	4623      	mov	r3, r4
 80026b6:	f7fd fd87 	bl	80001c8 <__aeabi_uldivmod>
 80026ba:	4603      	mov	r3, r0
 80026bc:	460c      	mov	r4, r1
 80026be:	461a      	mov	r2, r3
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <UART_SetConfig+0x384>)
 80026c2:	fba3 1302 	umull	r1, r3, r3, r2
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2164      	movs	r1, #100	; 0x64
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	3332      	adds	r3, #50	; 0x32
 80026d4:	4a65      	ldr	r2, [pc, #404]	; (800286c <UART_SetConfig+0x384>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	f003 0207 	and.w	r2, r3, #7
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4442      	add	r2, r8
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e26f      	b.n	8002bca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ea:	f7ff f95b 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 80026ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	461d      	mov	r5, r3
 80026f4:	f04f 0600 	mov.w	r6, #0
 80026f8:	46a8      	mov	r8, r5
 80026fa:	46b1      	mov	r9, r6
 80026fc:	eb18 0308 	adds.w	r3, r8, r8
 8002700:	eb49 0409 	adc.w	r4, r9, r9
 8002704:	4698      	mov	r8, r3
 8002706:	46a1      	mov	r9, r4
 8002708:	eb18 0805 	adds.w	r8, r8, r5
 800270c:	eb49 0906 	adc.w	r9, r9, r6
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800271c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002720:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002724:	4688      	mov	r8, r1
 8002726:	4691      	mov	r9, r2
 8002728:	eb18 0005 	adds.w	r0, r8, r5
 800272c:	eb49 0106 	adc.w	r1, r9, r6
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	461d      	mov	r5, r3
 8002736:	f04f 0600 	mov.w	r6, #0
 800273a:	196b      	adds	r3, r5, r5
 800273c:	eb46 0406 	adc.w	r4, r6, r6
 8002740:	461a      	mov	r2, r3
 8002742:	4623      	mov	r3, r4
 8002744:	f7fd fd40 	bl	80001c8 <__aeabi_uldivmod>
 8002748:	4603      	mov	r3, r0
 800274a:	460c      	mov	r4, r1
 800274c:	461a      	mov	r2, r3
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <UART_SetConfig+0x384>)
 8002750:	fba3 2302 	umull	r2, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	461d      	mov	r5, r3
 800275e:	f04f 0600 	mov.w	r6, #0
 8002762:	46a9      	mov	r9, r5
 8002764:	46b2      	mov	sl, r6
 8002766:	eb19 0309 	adds.w	r3, r9, r9
 800276a:	eb4a 040a 	adc.w	r4, sl, sl
 800276e:	4699      	mov	r9, r3
 8002770:	46a2      	mov	sl, r4
 8002772:	eb19 0905 	adds.w	r9, r9, r5
 8002776:	eb4a 0a06 	adc.w	sl, sl, r6
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800278a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800278e:	4689      	mov	r9, r1
 8002790:	4692      	mov	sl, r2
 8002792:	eb19 0005 	adds.w	r0, r9, r5
 8002796:	eb4a 0106 	adc.w	r1, sl, r6
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	461d      	mov	r5, r3
 80027a0:	f04f 0600 	mov.w	r6, #0
 80027a4:	196b      	adds	r3, r5, r5
 80027a6:	eb46 0406 	adc.w	r4, r6, r6
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	f7fd fd0b 	bl	80001c8 <__aeabi_uldivmod>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b2c      	ldr	r3, [pc, #176]	; (800286c <UART_SetConfig+0x384>)
 80027ba:	fba3 1302 	umull	r1, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2164      	movs	r1, #100	; 0x64
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	3332      	adds	r3, #50	; 0x32
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <UART_SetConfig+0x384>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027da:	4498      	add	r8, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	461d      	mov	r5, r3
 80027e0:	f04f 0600 	mov.w	r6, #0
 80027e4:	46a9      	mov	r9, r5
 80027e6:	46b2      	mov	sl, r6
 80027e8:	eb19 0309 	adds.w	r3, r9, r9
 80027ec:	eb4a 040a 	adc.w	r4, sl, sl
 80027f0:	4699      	mov	r9, r3
 80027f2:	46a2      	mov	sl, r4
 80027f4:	eb19 0905 	adds.w	r9, r9, r5
 80027f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002808:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800280c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002810:	4689      	mov	r9, r1
 8002812:	4692      	mov	sl, r2
 8002814:	eb19 0005 	adds.w	r0, r9, r5
 8002818:	eb4a 0106 	adc.w	r1, sl, r6
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	461d      	mov	r5, r3
 8002822:	f04f 0600 	mov.w	r6, #0
 8002826:	196b      	adds	r3, r5, r5
 8002828:	eb46 0406 	adc.w	r4, r6, r6
 800282c:	461a      	mov	r2, r3
 800282e:	4623      	mov	r3, r4
 8002830:	f7fd fcca 	bl	80001c8 <__aeabi_uldivmod>
 8002834:	4603      	mov	r3, r0
 8002836:	460c      	mov	r4, r1
 8002838:	461a      	mov	r2, r3
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <UART_SetConfig+0x384>)
 800283c:	fba3 1302 	umull	r1, r3, r3, r2
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	2164      	movs	r1, #100	; 0x64
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	3332      	adds	r3, #50	; 0x32
 800284e:	4a07      	ldr	r2, [pc, #28]	; (800286c <UART_SetConfig+0x384>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	f003 0207 	and.w	r2, r3, #7
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4442      	add	r2, r8
 8002860:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002862:	e1b2      	b.n	8002bca <UART_SetConfig+0x6e2>
 8002864:	40011000 	.word	0x40011000
 8002868:	40011400 	.word	0x40011400
 800286c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4ad7      	ldr	r2, [pc, #860]	; (8002bd4 <UART_SetConfig+0x6ec>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d005      	beq.n	8002886 <UART_SetConfig+0x39e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4ad6      	ldr	r2, [pc, #856]	; (8002bd8 <UART_SetConfig+0x6f0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	f040 80d1 	bne.w	8002a28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002886:	f7ff f8a1 	bl	80019cc <HAL_RCC_GetPCLK2Freq>
 800288a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	469a      	mov	sl, r3
 8002890:	f04f 0b00 	mov.w	fp, #0
 8002894:	46d0      	mov	r8, sl
 8002896:	46d9      	mov	r9, fp
 8002898:	eb18 0308 	adds.w	r3, r8, r8
 800289c:	eb49 0409 	adc.w	r4, r9, r9
 80028a0:	4698      	mov	r8, r3
 80028a2:	46a1      	mov	r9, r4
 80028a4:	eb18 080a 	adds.w	r8, r8, sl
 80028a8:	eb49 090b 	adc.w	r9, r9, fp
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028c0:	4688      	mov	r8, r1
 80028c2:	4691      	mov	r9, r2
 80028c4:	eb1a 0508 	adds.w	r5, sl, r8
 80028c8:	eb4b 0609 	adc.w	r6, fp, r9
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4619      	mov	r1, r3
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	f04f 0400 	mov.w	r4, #0
 80028de:	0094      	lsls	r4, r2, #2
 80028e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028e4:	008b      	lsls	r3, r1, #2
 80028e6:	461a      	mov	r2, r3
 80028e8:	4623      	mov	r3, r4
 80028ea:	4628      	mov	r0, r5
 80028ec:	4631      	mov	r1, r6
 80028ee:	f7fd fc6b 	bl	80001c8 <__aeabi_uldivmod>
 80028f2:	4603      	mov	r3, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	461a      	mov	r2, r3
 80028f8:	4bb8      	ldr	r3, [pc, #736]	; (8002bdc <UART_SetConfig+0x6f4>)
 80028fa:	fba3 2302 	umull	r2, r3, r3, r2
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	469b      	mov	fp, r3
 8002908:	f04f 0c00 	mov.w	ip, #0
 800290c:	46d9      	mov	r9, fp
 800290e:	46e2      	mov	sl, ip
 8002910:	eb19 0309 	adds.w	r3, r9, r9
 8002914:	eb4a 040a 	adc.w	r4, sl, sl
 8002918:	4699      	mov	r9, r3
 800291a:	46a2      	mov	sl, r4
 800291c:	eb19 090b 	adds.w	r9, r9, fp
 8002920:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002924:	f04f 0100 	mov.w	r1, #0
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002938:	4689      	mov	r9, r1
 800293a:	4692      	mov	sl, r2
 800293c:	eb1b 0509 	adds.w	r5, fp, r9
 8002940:	eb4c 060a 	adc.w	r6, ip, sl
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	0094      	lsls	r4, r2, #2
 8002958:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800295c:	008b      	lsls	r3, r1, #2
 800295e:	461a      	mov	r2, r3
 8002960:	4623      	mov	r3, r4
 8002962:	4628      	mov	r0, r5
 8002964:	4631      	mov	r1, r6
 8002966:	f7fd fc2f 	bl	80001c8 <__aeabi_uldivmod>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	461a      	mov	r2, r3
 8002970:	4b9a      	ldr	r3, [pc, #616]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002972:	fba3 1302 	umull	r1, r3, r3, r2
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2164      	movs	r1, #100	; 0x64
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	3332      	adds	r3, #50	; 0x32
 8002984:	4a95      	ldr	r2, [pc, #596]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002990:	4498      	add	r8, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	469b      	mov	fp, r3
 8002996:	f04f 0c00 	mov.w	ip, #0
 800299a:	46d9      	mov	r9, fp
 800299c:	46e2      	mov	sl, ip
 800299e:	eb19 0309 	adds.w	r3, r9, r9
 80029a2:	eb4a 040a 	adc.w	r4, sl, sl
 80029a6:	4699      	mov	r9, r3
 80029a8:	46a2      	mov	sl, r4
 80029aa:	eb19 090b 	adds.w	r9, r9, fp
 80029ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029c6:	4689      	mov	r9, r1
 80029c8:	4692      	mov	sl, r2
 80029ca:	eb1b 0509 	adds.w	r5, fp, r9
 80029ce:	eb4c 060a 	adc.w	r6, ip, sl
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	f04f 0400 	mov.w	r4, #0
 80029e4:	0094      	lsls	r4, r2, #2
 80029e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029ea:	008b      	lsls	r3, r1, #2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	4628      	mov	r0, r5
 80029f2:	4631      	mov	r1, r6
 80029f4:	f7fd fbe8 	bl	80001c8 <__aeabi_uldivmod>
 80029f8:	4603      	mov	r3, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b77      	ldr	r3, [pc, #476]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002a00:	fba3 1302 	umull	r1, r3, r3, r2
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	2164      	movs	r1, #100	; 0x64
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	3332      	adds	r3, #50	; 0x32
 8002a12:	4a72      	ldr	r2, [pc, #456]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4442      	add	r2, r8
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	e0d0      	b.n	8002bca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a28:	f7fe ffbc 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	469a      	mov	sl, r3
 8002a32:	f04f 0b00 	mov.w	fp, #0
 8002a36:	46d0      	mov	r8, sl
 8002a38:	46d9      	mov	r9, fp
 8002a3a:	eb18 0308 	adds.w	r3, r8, r8
 8002a3e:	eb49 0409 	adc.w	r4, r9, r9
 8002a42:	4698      	mov	r8, r3
 8002a44:	46a1      	mov	r9, r4
 8002a46:	eb18 080a 	adds.w	r8, r8, sl
 8002a4a:	eb49 090b 	adc.w	r9, r9, fp
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a62:	4688      	mov	r8, r1
 8002a64:	4691      	mov	r9, r2
 8002a66:	eb1a 0508 	adds.w	r5, sl, r8
 8002a6a:	eb4b 0609 	adc.w	r6, fp, r9
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	f04f 0400 	mov.w	r4, #0
 8002a80:	0094      	lsls	r4, r2, #2
 8002a82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a86:	008b      	lsls	r3, r1, #2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	4631      	mov	r1, r6
 8002a90:	f7fd fb9a 	bl	80001c8 <__aeabi_uldivmod>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	469b      	mov	fp, r3
 8002aaa:	f04f 0c00 	mov.w	ip, #0
 8002aae:	46d9      	mov	r9, fp
 8002ab0:	46e2      	mov	sl, ip
 8002ab2:	eb19 0309 	adds.w	r3, r9, r9
 8002ab6:	eb4a 040a 	adc.w	r4, sl, sl
 8002aba:	4699      	mov	r9, r3
 8002abc:	46a2      	mov	sl, r4
 8002abe:	eb19 090b 	adds.w	r9, r9, fp
 8002ac2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ad6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ada:	4689      	mov	r9, r1
 8002adc:	4692      	mov	sl, r2
 8002ade:	eb1b 0509 	adds.w	r5, fp, r9
 8002ae2:	eb4c 060a 	adc.w	r6, ip, sl
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f04f 0400 	mov.w	r4, #0
 8002af8:	0094      	lsls	r4, r2, #2
 8002afa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002afe:	008b      	lsls	r3, r1, #2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	4631      	mov	r1, r6
 8002b08:	f7fd fb5e 	bl	80001c8 <__aeabi_uldivmod>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002b14:	fba3 1302 	umull	r1, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2164      	movs	r1, #100	; 0x64
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	3332      	adds	r3, #50	; 0x32
 8002b26:	4a2d      	ldr	r2, [pc, #180]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b32:	4498      	add	r8, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	469b      	mov	fp, r3
 8002b38:	f04f 0c00 	mov.w	ip, #0
 8002b3c:	46d9      	mov	r9, fp
 8002b3e:	46e2      	mov	sl, ip
 8002b40:	eb19 0309 	adds.w	r3, r9, r9
 8002b44:	eb4a 040a 	adc.w	r4, sl, sl
 8002b48:	4699      	mov	r9, r3
 8002b4a:	46a2      	mov	sl, r4
 8002b4c:	eb19 090b 	adds.w	r9, r9, fp
 8002b50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b68:	4689      	mov	r9, r1
 8002b6a:	4692      	mov	sl, r2
 8002b6c:	eb1b 0509 	adds.w	r5, fp, r9
 8002b70:	eb4c 060a 	adc.w	r6, ip, sl
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	f04f 0400 	mov.w	r4, #0
 8002b86:	0094      	lsls	r4, r2, #2
 8002b88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b8c:	008b      	lsls	r3, r1, #2
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4623      	mov	r3, r4
 8002b92:	4628      	mov	r0, r5
 8002b94:	4631      	mov	r1, r6
 8002b96:	f7fd fb17 	bl	80001c8 <__aeabi_uldivmod>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2164      	movs	r1, #100	; 0x64
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	3332      	adds	r3, #50	; 0x32
 8002bb4:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <UART_SetConfig+0x6f4>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	f003 020f 	and.w	r2, r3, #15
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4442      	add	r2, r8
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	e7ff      	b.n	8002bca <UART_SetConfig+0x6e2>
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd4:	40011000 	.word	0x40011000
 8002bd8:	40011400 	.word	0x40011400
 8002bdc:	51eb851f 	.word	0x51eb851f

08002be0 <__libc_init_array>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4e0d      	ldr	r6, [pc, #52]	; (8002c18 <__libc_init_array+0x38>)
 8002be4:	4c0d      	ldr	r4, [pc, #52]	; (8002c1c <__libc_init_array+0x3c>)
 8002be6:	1ba4      	subs	r4, r4, r6
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	2500      	movs	r5, #0
 8002bec:	42a5      	cmp	r5, r4
 8002bee:	d109      	bne.n	8002c04 <__libc_init_array+0x24>
 8002bf0:	4e0b      	ldr	r6, [pc, #44]	; (8002c20 <__libc_init_array+0x40>)
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <__libc_init_array+0x44>)
 8002bf4:	f000 f820 	bl	8002c38 <_init>
 8002bf8:	1ba4      	subs	r4, r4, r6
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	42a5      	cmp	r5, r4
 8002c00:	d105      	bne.n	8002c0e <__libc_init_array+0x2e>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c08:	4798      	blx	r3
 8002c0a:	3501      	adds	r5, #1
 8002c0c:	e7ee      	b.n	8002bec <__libc_init_array+0xc>
 8002c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c12:	4798      	blx	r3
 8002c14:	3501      	adds	r5, #1
 8002c16:	e7f2      	b.n	8002bfe <__libc_init_array+0x1e>
 8002c18:	08002c70 	.word	0x08002c70
 8002c1c:	08002c70 	.word	0x08002c70
 8002c20:	08002c70 	.word	0x08002c70
 8002c24:	08002c74 	.word	0x08002c74

08002c28 <memset>:
 8002c28:	4402      	add	r2, r0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <memset+0xa>
 8002c30:	4770      	bx	lr
 8002c32:	f803 1b01 	strb.w	r1, [r3], #1
 8002c36:	e7f9      	b.n	8002c2c <memset+0x4>

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
