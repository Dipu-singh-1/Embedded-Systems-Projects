
time_base_10micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001d74  08001d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001d8c  08001d8c  00011d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000005c  2000000c  08001da8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000068  08001da8  00020068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e061  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a6d  00000000  00000000  0002e09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008e0  00000000  00000000  0002fb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000828  00000000  00000000  000303f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00021c24  00000000  00000000  00030c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000080d9  00000000  00000000  0005283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000c8b61  00000000  00000000  0005a915  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00123476  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002460  00000000  00000000  001234f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001d5c 	.word	0x08001d5c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001d5c 	.word	0x08001d5c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f927 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f001 fb4a 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f93f 	bl	80007ea <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 f907 	bl	8000796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 021f 	and.w	r2, r3, #31
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <NVIC_EnableIRQ+0x30>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	da0b      	bge.n	80006ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <NVIC_SetPriority+0x4c>)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	3b04      	subs	r3, #4
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006aa:	e009      	b.n	80006c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4907      	ldr	r1, [pc, #28]	; (80006d0 <NVIC_SetPriority+0x50>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000e100 	.word	0xe000e100

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <SysTick_Config+0x40>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075a:	210f      	movs	r1, #15
 800075c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000760:	f7ff ff8e 	bl	8000680 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff2d 	bl	80005e8 <NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a8:	f7ff ff42 	bl	8000630 <NVIC_GetPriorityGrouping>
 80007ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff ff8e 	bl	80006d4 <NVIC_EncodePriority>
 80007b8:	4602      	mov	r2, r0
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff5d 	bl	8000680 <NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff35 	bl	800064c <NVIC_EnableIRQ>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffa2 	bl	800073c <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d106      	bne.n	8000820 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800081e:	e005      	b.n	800082c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000826:	f023 0304 	bic.w	r3, r3, #4
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000840:	f000 f802 	bl	8000848 <HAL_SYSTICK_Callback>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	e165      	b.n	8000b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000874:	2201      	movs	r2, #1
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	429a      	cmp	r2, r3
 800088e:	f040 8154 	bne.w	8000b3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d003      	beq.n	80008a2 <HAL_GPIO_Init+0x4a>
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d123      	bne.n	80008ea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	08da      	lsrs	r2, r3, #3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3208      	adds	r2, #8
 80008aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	220f      	movs	r2, #15
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	69b9      	ldr	r1, [r7, #24]
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	4013      	ands	r3, r2
 8000900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 0203 	and.w	r2, r3, #3
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d00b      	beq.n	800093e <HAL_GPIO_Init+0xe6>
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d007      	beq.n	800093e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000932:	2b11      	cmp	r3, #17
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b12      	cmp	r3, #18
 800093c:	d130      	bne.n	80009a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4313      	orrs	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000974:	2201      	movs	r2, #1
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	f003 0201 	and.w	r2, r3, #1
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 80ae 	beq.w	8000b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b5c      	ldr	r3, [pc, #368]	; (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a5b      	ldr	r2, [pc, #364]	; (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b59      	ldr	r3, [pc, #356]	; (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009fa:	4a57      	ldr	r2, [pc, #348]	; (8000b58 <HAL_GPIO_Init+0x300>)
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3302      	adds	r3, #2
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	220f      	movs	r2, #15
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4e      	ldr	r2, [pc, #312]	; (8000b5c <HAL_GPIO_Init+0x304>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d025      	beq.n	8000a72 <HAL_GPIO_Init+0x21a>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4d      	ldr	r2, [pc, #308]	; (8000b60 <HAL_GPIO_Init+0x308>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d01f      	beq.n	8000a6e <HAL_GPIO_Init+0x216>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <HAL_GPIO_Init+0x30c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d019      	beq.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4b      	ldr	r2, [pc, #300]	; (8000b68 <HAL_GPIO_Init+0x310>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d013      	beq.n	8000a66 <HAL_GPIO_Init+0x20e>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <HAL_GPIO_Init+0x314>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d00d      	beq.n	8000a62 <HAL_GPIO_Init+0x20a>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <HAL_GPIO_Init+0x318>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d007      	beq.n	8000a5e <HAL_GPIO_Init+0x206>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a48      	ldr	r2, [pc, #288]	; (8000b74 <HAL_GPIO_Init+0x31c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_GPIO_Init+0x202>
 8000a56:	2306      	movs	r3, #6
 8000a58:	e00c      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	e00a      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a5e:	2305      	movs	r3, #5
 8000a60:	e008      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a62:	2304      	movs	r3, #4
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e004      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e002      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a72:	2300      	movs	r3, #0
 8000a74:	69fa      	ldr	r2, [r7, #28]
 8000a76:	f002 0203 	and.w	r2, r2, #3
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	4093      	lsls	r3, r2
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a84:	4934      	ldr	r1, [pc, #208]	; (8000b58 <HAL_GPIO_Init+0x300>)
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ab6:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ae0:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b0a:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b34:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	2b0f      	cmp	r3, #15
 8000b44:	f67f ae96 	bls.w	8000874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3724      	adds	r7, #36	; 0x24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40013c00 	.word	0x40013c00

08000b7c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	695a      	ldr	r2, [r3, #20]
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	405a      	eors	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	615a      	str	r2, [r3, #20]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e0ca      	b.n	8000d4a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bb4:	4b67      	ldr	r3, [pc, #412]	; (8000d54 <HAL_RCC_ClockConfig+0x1b4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 030f 	and.w	r3, r3, #15
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d90c      	bls.n	8000bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc2:	4b64      	ldr	r3, [pc, #400]	; (8000d54 <HAL_RCC_ClockConfig+0x1b4>)
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bca:	4b62      	ldr	r3, [pc, #392]	; (8000d54 <HAL_RCC_ClockConfig+0x1b4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d001      	beq.n	8000bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e0b6      	b.n	8000d4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d020      	beq.n	8000c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bf4:	4b58      	ldr	r3, [pc, #352]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	4a57      	ldr	r2, [pc, #348]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c0c:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	4a51      	ldr	r2, [pc, #324]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c18:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	494c      	ldr	r1, [pc, #304]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d044      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d107      	bne.n	8000c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d119      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e07d      	b.n	8000d4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d003      	beq.n	8000c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d107      	bne.n	8000c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c5e:	4b3e      	ldr	r3, [pc, #248]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e06d      	b.n	8000d4a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e065      	b.n	8000d4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f023 0203 	bic.w	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4933      	ldr	r1, [pc, #204]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c90:	f7ff fc9e 	bl	80005d0 <HAL_GetTick>
 8000c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c96:	e00a      	b.n	8000cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c98:	f7ff fc9a 	bl	80005d0 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e04d      	b.n	8000d4a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 020c 	and.w	r2, r3, #12
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d1eb      	bne.n	8000c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <HAL_RCC_ClockConfig+0x1b4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d20c      	bcs.n	8000ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_RCC_ClockConfig+0x1b4>)
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_RCC_ClockConfig+0x1b4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d001      	beq.n	8000ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e030      	b.n	8000d4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	4915      	ldr	r1, [pc, #84]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	490d      	ldr	r1, [pc, #52]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d26:	f000 f829 	bl	8000d7c <HAL_RCC_GetSysClockFreq>
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_RCC_ClockConfig+0x1b8>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_RCC_ClockConfig+0x1bc>)
 8000d38:	5cd3      	ldrb	r3, [r2, r3]
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_RCC_ClockConfig+0x1c0>)
 8000d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fc00 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	08001d74 	.word	0x08001d74
 8000d60:	20000008 	.word	0x20000008

08000d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008

08000d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d96:	4bc6      	ldr	r3, [pc, #792]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b0c      	cmp	r3, #12
 8000da0:	f200 817e 	bhi.w	80010a0 <HAL_RCC_GetSysClockFreq+0x324>
 8000da4:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <HAL_RCC_GetSysClockFreq+0x30>)
 8000da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000de1 	.word	0x08000de1
 8000db0:	080010a1 	.word	0x080010a1
 8000db4:	080010a1 	.word	0x080010a1
 8000db8:	080010a1 	.word	0x080010a1
 8000dbc:	08000de7 	.word	0x08000de7
 8000dc0:	080010a1 	.word	0x080010a1
 8000dc4:	080010a1 	.word	0x080010a1
 8000dc8:	080010a1 	.word	0x080010a1
 8000dcc:	08000ded 	.word	0x08000ded
 8000dd0:	080010a1 	.word	0x080010a1
 8000dd4:	080010a1 	.word	0x080010a1
 8000dd8:	080010a1 	.word	0x080010a1
 8000ddc:	08000f49 	.word	0x08000f49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000de0:	4bb4      	ldr	r3, [pc, #720]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x338>)
 8000de2:	613b      	str	r3, [r7, #16]
       break;
 8000de4:	e15f      	b.n	80010a6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000de6:	4bb4      	ldr	r3, [pc, #720]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8000de8:	613b      	str	r3, [r7, #16]
      break;
 8000dea:	e15c      	b.n	80010a6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dec:	4bb0      	ldr	r3, [pc, #704]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000df6:	4bae      	ldr	r3, [pc, #696]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d04a      	beq.n	8000e98 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e02:	4bab      	ldr	r3, [pc, #684]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	f04f 0400 	mov.w	r4, #0
 8000e0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	ea03 0501 	and.w	r5, r3, r1
 8000e18:	ea04 0602 	and.w	r6, r4, r2
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4632      	mov	r2, r6
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	f04f 0400 	mov.w	r4, #0
 8000e28:	0154      	lsls	r4, r2, #5
 8000e2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e2e:	014b      	lsls	r3, r1, #5
 8000e30:	4619      	mov	r1, r3
 8000e32:	4622      	mov	r2, r4
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	eb62 0206 	sbc.w	r2, r2, r6
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	f04f 0400 	mov.w	r4, #0
 8000e42:	0194      	lsls	r4, r2, #6
 8000e44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000e48:	018b      	lsls	r3, r1, #6
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	eb64 0402 	sbc.w	r4, r4, r2
 8000e50:	f04f 0100 	mov.w	r1, #0
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	00e2      	lsls	r2, r4, #3
 8000e5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000e5e:	00d9      	lsls	r1, r3, #3
 8000e60:	460b      	mov	r3, r1
 8000e62:	4614      	mov	r4, r2
 8000e64:	195b      	adds	r3, r3, r5
 8000e66:	eb44 0406 	adc.w	r4, r4, r6
 8000e6a:	f04f 0100 	mov.w	r1, #0
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	0262      	lsls	r2, r4, #9
 8000e74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000e78:	0259      	lsls	r1, r3, #9
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4614      	mov	r4, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	4621      	mov	r1, r4
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f04f 0400 	mov.w	r4, #0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	f7ff f9ba 	bl	8000204 <__aeabi_uldivmod>
 8000e90:	4603      	mov	r3, r0
 8000e92:	460c      	mov	r4, r1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e049      	b.n	8000f2c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e98:	4b85      	ldr	r3, [pc, #532]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	099b      	lsrs	r3, r3, #6
 8000e9e:	f04f 0400 	mov.w	r4, #0
 8000ea2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	ea03 0501 	and.w	r5, r3, r1
 8000eae:	ea04 0602 	and.w	r6, r4, r2
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	4632      	mov	r2, r6
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	f04f 0400 	mov.w	r4, #0
 8000ebe:	0154      	lsls	r4, r2, #5
 8000ec0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ec4:	014b      	lsls	r3, r1, #5
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4622      	mov	r2, r4
 8000eca:	1b49      	subs	r1, r1, r5
 8000ecc:	eb62 0206 	sbc.w	r2, r2, r6
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	f04f 0400 	mov.w	r4, #0
 8000ed8:	0194      	lsls	r4, r2, #6
 8000eda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000ede:	018b      	lsls	r3, r1, #6
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	eb64 0402 	sbc.w	r4, r4, r2
 8000ee6:	f04f 0100 	mov.w	r1, #0
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	00e2      	lsls	r2, r4, #3
 8000ef0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000ef4:	00d9      	lsls	r1, r3, #3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4614      	mov	r4, r2
 8000efa:	195b      	adds	r3, r3, r5
 8000efc:	eb44 0406 	adc.w	r4, r4, r6
 8000f00:	f04f 0100 	mov.w	r1, #0
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	02a2      	lsls	r2, r4, #10
 8000f0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f0e:	0299      	lsls	r1, r3, #10
 8000f10:	460b      	mov	r3, r1
 8000f12:	4614      	mov	r4, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	4621      	mov	r1, r4
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f04f 0400 	mov.w	r4, #0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4623      	mov	r3, r4
 8000f22:	f7ff f96f 	bl	8000204 <__aeabi_uldivmod>
 8000f26:	4603      	mov	r3, r0
 8000f28:	460c      	mov	r4, r1
 8000f2a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f2c:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	3301      	adds	r3, #1
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f44:	613b      	str	r3, [r7, #16]
      break;
 8000f46:	e0ae      	b.n	80010a6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f48:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f50:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f52:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d04a      	beq.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f5e:	4b54      	ldr	r3, [pc, #336]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	099b      	lsrs	r3, r3, #6
 8000f64:	f04f 0400 	mov.w	r4, #0
 8000f68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	ea03 0501 	and.w	r5, r3, r1
 8000f74:	ea04 0602 	and.w	r6, r4, r2
 8000f78:	4629      	mov	r1, r5
 8000f7a:	4632      	mov	r2, r6
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	f04f 0400 	mov.w	r4, #0
 8000f84:	0154      	lsls	r4, r2, #5
 8000f86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f8a:	014b      	lsls	r3, r1, #5
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4622      	mov	r2, r4
 8000f90:	1b49      	subs	r1, r1, r5
 8000f92:	eb62 0206 	sbc.w	r2, r2, r6
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	f04f 0400 	mov.w	r4, #0
 8000f9e:	0194      	lsls	r4, r2, #6
 8000fa0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000fa4:	018b      	lsls	r3, r1, #6
 8000fa6:	1a5b      	subs	r3, r3, r1
 8000fa8:	eb64 0402 	sbc.w	r4, r4, r2
 8000fac:	f04f 0100 	mov.w	r1, #0
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	00e2      	lsls	r2, r4, #3
 8000fb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000fba:	00d9      	lsls	r1, r3, #3
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4614      	mov	r4, r2
 8000fc0:	195b      	adds	r3, r3, r5
 8000fc2:	eb44 0406 	adc.w	r4, r4, r6
 8000fc6:	f04f 0100 	mov.w	r1, #0
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	0262      	lsls	r2, r4, #9
 8000fd0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000fd4:	0259      	lsls	r1, r3, #9
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4614      	mov	r4, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	4621      	mov	r1, r4
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f04f 0400 	mov.w	r4, #0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	f7ff f90c 	bl	8000204 <__aeabi_uldivmod>
 8000fec:	4603      	mov	r3, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e049      	b.n	8001088 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	099b      	lsrs	r3, r3, #6
 8000ffa:	f04f 0400 	mov.w	r4, #0
 8000ffe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	ea03 0501 	and.w	r5, r3, r1
 800100a:	ea04 0602 	and.w	r6, r4, r2
 800100e:	4629      	mov	r1, r5
 8001010:	4632      	mov	r2, r6
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	f04f 0400 	mov.w	r4, #0
 800101a:	0154      	lsls	r4, r2, #5
 800101c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001020:	014b      	lsls	r3, r1, #5
 8001022:	4619      	mov	r1, r3
 8001024:	4622      	mov	r2, r4
 8001026:	1b49      	subs	r1, r1, r5
 8001028:	eb62 0206 	sbc.w	r2, r2, r6
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	f04f 0400 	mov.w	r4, #0
 8001034:	0194      	lsls	r4, r2, #6
 8001036:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800103a:	018b      	lsls	r3, r1, #6
 800103c:	1a5b      	subs	r3, r3, r1
 800103e:	eb64 0402 	sbc.w	r4, r4, r2
 8001042:	f04f 0100 	mov.w	r1, #0
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	00e2      	lsls	r2, r4, #3
 800104c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001050:	00d9      	lsls	r1, r3, #3
 8001052:	460b      	mov	r3, r1
 8001054:	4614      	mov	r4, r2
 8001056:	195b      	adds	r3, r3, r5
 8001058:	eb44 0406 	adc.w	r4, r4, r6
 800105c:	f04f 0100 	mov.w	r1, #0
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	02a2      	lsls	r2, r4, #10
 8001066:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800106a:	0299      	lsls	r1, r3, #10
 800106c:	460b      	mov	r3, r1
 800106e:	4614      	mov	r4, r2
 8001070:	4618      	mov	r0, r3
 8001072:	4621      	mov	r1, r4
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f04f 0400 	mov.w	r4, #0
 800107a:	461a      	mov	r2, r3
 800107c:	4623      	mov	r3, r4
 800107e:	f7ff f8c1 	bl	8000204 <__aeabi_uldivmod>
 8001082:	4603      	mov	r3, r0
 8001084:	460c      	mov	r4, r1
 8001086:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x334>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	0f1b      	lsrs	r3, r3, #28
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	613b      	str	r3, [r7, #16]
      break;
 800109e:	e002      	b.n	80010a6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x338>)
 80010a2:	613b      	str	r3, [r7, #16]
      break;
 80010a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010a6:	693b      	ldr	r3, [r7, #16]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	00f42400 	.word	0x00f42400
 80010b8:	007a1200 	.word	0x007a1200

080010bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 8083 	beq.w	80011dc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010d6:	4b95      	ldr	r3, [pc, #596]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d019      	beq.n	8001116 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010e2:	4b92      	ldr	r3, [pc, #584]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d106      	bne.n	80010fc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010ee:	4b8f      	ldr	r3, [pc, #572]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010fa:	d00c      	beq.n	8001116 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fc:	4b8b      	ldr	r3, [pc, #556]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001104:	2b0c      	cmp	r3, #12
 8001106:	d112      	bne.n	800112e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001108:	4b88      	ldr	r3, [pc, #544]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001114:	d10b      	bne.n	800112e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001116:	4b85      	ldr	r3, [pc, #532]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d05b      	beq.n	80011da <HAL_RCC_OscConfig+0x11e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d157      	bne.n	80011da <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e216      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x8a>
 8001138:	4b7c      	ldr	r3, [pc, #496]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a7b      	ldr	r2, [pc, #492]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e01d      	b.n	8001182 <HAL_RCC_OscConfig+0xc6>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800114e:	d10c      	bne.n	800116a <HAL_RCC_OscConfig+0xae>
 8001150:	4b76      	ldr	r3, [pc, #472]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a75      	ldr	r2, [pc, #468]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a72      	ldr	r2, [pc, #456]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	e00b      	b.n	8001182 <HAL_RCC_OscConfig+0xc6>
 800116a:	4b70      	ldr	r3, [pc, #448]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6f      	ldr	r2, [pc, #444]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6d      	ldr	r3, [pc, #436]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6c      	ldr	r2, [pc, #432]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800117c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d013      	beq.n	80011b2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff fa21 	bl	80005d0 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001192:	f7ff fa1d 	bl	80005d0 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b64      	cmp	r3, #100	; 0x64
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e1db      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a4:	4b61      	ldr	r3, [pc, #388]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0xd6>
 80011b0:	e014      	b.n	80011dc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff fa0d 	bl	80005d0 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ba:	f7ff fa09 	bl	80005d0 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e1c7      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011cc:	4b57      	ldr	r3, [pc, #348]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f0      	bne.n	80011ba <HAL_RCC_OscConfig+0xfe>
 80011d8:	e000      	b.n	80011dc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d06f      	beq.n	80012c8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d017      	beq.n	8001224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d105      	bne.n	800120c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001200:	4b4a      	ldr	r3, [pc, #296]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120c:	4b47      	ldr	r3, [pc, #284]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d11c      	bne.n	8001252 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001218:	4b44      	ldr	r3, [pc, #272]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d116      	bne.n	8001252 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001224:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_OscConfig+0x180>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d001      	beq.n	800123c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e18f      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4938      	ldr	r1, [pc, #224]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001250:	e03a      	b.n	80012c8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d020      	beq.n	800129c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <HAL_RCC_OscConfig+0x274>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff f9b6 	bl	80005d0 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff f9b2 	bl	80005d0 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e170      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <HAL_RCC_OscConfig+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4925      	ldr	r1, [pc, #148]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
 800129a:	e015      	b.n	80012c8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <HAL_RCC_OscConfig+0x274>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff f995 	bl	80005d0 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012aa:	f7ff f991 	bl	80005d0 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e14f      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d037      	beq.n	8001344 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d016      	beq.n	800130a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_RCC_OscConfig+0x278>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff f975 	bl	80005d0 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff f971 	bl	80005d0 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e12f      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_RCC_OscConfig+0x270>)
 80012fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x22e>
 8001308:	e01c      	b.n	8001344 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_RCC_OscConfig+0x278>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff f95e 	bl	80005d0 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001316:	e00f      	b.n	8001338 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff f95a 	bl	80005d0 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d908      	bls.n	8001338 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e118      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	42470000 	.word	0x42470000
 8001334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	4b8a      	ldr	r3, [pc, #552]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 800133a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e9      	bne.n	8001318 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8097 	beq.w	8001480 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001356:	4b83      	ldr	r3, [pc, #524]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a7e      	ldr	r2, [pc, #504]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b7c      	ldr	r3, [pc, #496]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b79      	ldr	r3, [pc, #484]	; (8001568 <HAL_RCC_OscConfig+0x4ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d118      	bne.n	80013c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <HAL_RCC_OscConfig+0x4ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a75      	ldr	r2, [pc, #468]	; (8001568 <HAL_RCC_OscConfig+0x4ac>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139a:	f7ff f919 	bl	80005d0 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a2:	f7ff f915 	bl	80005d0 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e0d3      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b6c      	ldr	r3, [pc, #432]	; (8001568 <HAL_RCC_OscConfig+0x4ac>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x31a>
 80013c8:	4b66      	ldr	r3, [pc, #408]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	4a65      	ldr	r2, [pc, #404]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6713      	str	r3, [r2, #112]	; 0x70
 80013d4:	e01c      	b.n	8001410 <HAL_RCC_OscConfig+0x354>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x33c>
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	4a60      	ldr	r2, [pc, #384]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ea:	4b5e      	ldr	r3, [pc, #376]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	4a5d      	ldr	r2, [pc, #372]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6713      	str	r3, [r2, #112]	; 0x70
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0x354>
 80013f8:	4b5a      	ldr	r3, [pc, #360]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fc:	4a59      	ldr	r2, [pc, #356]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6713      	str	r3, [r2, #112]	; 0x70
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a56      	ldr	r2, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d015      	beq.n	8001444 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff f8da 	bl	80005d0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff f8d6 	bl	80005d0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e092      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0ee      	beq.n	8001420 <HAL_RCC_OscConfig+0x364>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff f8c4 	bl	80005d0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff f8c0 	bl	80005d0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e07c      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	4b40      	ldr	r3, [pc, #256]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ee      	bne.n	800144c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a3a      	ldr	r2, [pc, #232]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 800147a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d068      	beq.n	800155a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001488:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b08      	cmp	r3, #8
 8001492:	d060      	beq.n	8001556 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d145      	bne.n	8001528 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <HAL_RCC_OscConfig+0x4b0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a2:	f7ff f895 	bl	80005d0 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff f891 	bl	80005d0 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e04f      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	019b      	lsls	r3, r3, #6
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	3b01      	subs	r3, #1
 80014e2:	041b      	lsls	r3, r3, #16
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	061b      	lsls	r3, r3, #24
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	071b      	lsls	r3, r3, #28
 80014f4:	491b      	ldr	r1, [pc, #108]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_RCC_OscConfig+0x4b0>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff f866 	bl	80005d0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff f862 	bl	80005d0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e020      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x44c>
 8001526:	e018      	b.n	800155a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_RCC_OscConfig+0x4b0>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff f84f 	bl	80005d0 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff f84b 	bl	80005d0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e009      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_OscConfig+0x4a8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x47a>
 8001554:	e001      	b.n	800155a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000
 800156c:	42470060 	.word	0x42470060

08001570 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e01d      	b.n	80015be <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fb3c 	bl	8001c14 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2202      	movs	r2, #2
 80015a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3304      	adds	r3, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f000 f954 	bl	800185c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d122      	bne.n	8001658 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b02      	cmp	r3, #2
 800161e:	d11b      	bne.n	8001658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0202 	mvn.w	r2, #2
 8001628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f8ee 	bl	8001820 <HAL_TIM_IC_CaptureCallback>
 8001644:	e005      	b.n	8001652 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f8e0 	bl	800180c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f8f1 	bl	8001834 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b04      	cmp	r3, #4
 8001664:	d122      	bne.n	80016ac <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b04      	cmp	r3, #4
 8001672:	d11b      	bne.n	80016ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0204 	mvn.w	r2, #4
 800167c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2202      	movs	r2, #2
 8001682:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f8c4 	bl	8001820 <HAL_TIM_IC_CaptureCallback>
 8001698:	e005      	b.n	80016a6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8b6 	bl	800180c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f8c7 	bl	8001834 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d122      	bne.n	8001700 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d11b      	bne.n	8001700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f06f 0208 	mvn.w	r2, #8
 80016d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2204      	movs	r2, #4
 80016d6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f89a 	bl	8001820 <HAL_TIM_IC_CaptureCallback>
 80016ec:	e005      	b.n	80016fa <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f88c 	bl	800180c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f89d 	bl	8001834 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b10      	cmp	r3, #16
 800170c:	d122      	bne.n	8001754 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b10      	cmp	r3, #16
 800171a:	d11b      	bne.n	8001754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0210 	mvn.w	r2, #16
 8001724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2208      	movs	r2, #8
 800172a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f870 	bl	8001820 <HAL_TIM_IC_CaptureCallback>
 8001740:	e005      	b.n	800174e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f862 	bl	800180c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f873 	bl	8001834 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d10e      	bne.n	8001780 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d107      	bne.n	8001780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0201 	mvn.w	r2, #1
 8001778:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fa16 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	2b80      	cmp	r3, #128	; 0x80
 800178c:	d10e      	bne.n	80017ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001798:	2b80      	cmp	r3, #128	; 0x80
 800179a:	d107      	bne.n	80017ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f90c 	bl	80019c4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	d10e      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c4:	2b40      	cmp	r3, #64	; 0x40
 80017c6:	d107      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f838 	bl	8001848 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d10e      	bne.n	8001804 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d107      	bne.n	8001804 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0220 	mvn.w	r2, #32
 80017fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f8d6 	bl	80019b0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a44      	ldr	r2, [pc, #272]	; (8001984 <TIM_Base_SetConfig+0x128>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d013      	beq.n	80018a0 <TIM_Base_SetConfig+0x44>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187e:	d00f      	beq.n	80018a0 <TIM_Base_SetConfig+0x44>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a41      	ldr	r2, [pc, #260]	; (8001988 <TIM_Base_SetConfig+0x12c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00b      	beq.n	80018a0 <TIM_Base_SetConfig+0x44>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a40      	ldr	r2, [pc, #256]	; (800198c <TIM_Base_SetConfig+0x130>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <TIM_Base_SetConfig+0x44>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3f      	ldr	r2, [pc, #252]	; (8001990 <TIM_Base_SetConfig+0x134>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d003      	beq.n	80018a0 <TIM_Base_SetConfig+0x44>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <TIM_Base_SetConfig+0x138>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <TIM_Base_SetConfig+0x48>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <TIM_Base_SetConfig+0x4a>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a31      	ldr	r2, [pc, #196]	; (8001984 <TIM_Base_SetConfig+0x128>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d02b      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ca:	d027      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <TIM_Base_SetConfig+0x12c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d023      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a2d      	ldr	r2, [pc, #180]	; (800198c <TIM_Base_SetConfig+0x130>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d01f      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <TIM_Base_SetConfig+0x134>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d01b      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a2b      	ldr	r2, [pc, #172]	; (8001994 <TIM_Base_SetConfig+0x138>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d017      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <TIM_Base_SetConfig+0x13c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d013      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a29      	ldr	r2, [pc, #164]	; (800199c <TIM_Base_SetConfig+0x140>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00f      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a28      	ldr	r2, [pc, #160]	; (80019a0 <TIM_Base_SetConfig+0x144>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00b      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <TIM_Base_SetConfig+0x148>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d007      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <TIM_Base_SetConfig+0x14c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d003      	beq.n	800191c <TIM_Base_SetConfig+0xc0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <TIM_Base_SetConfig+0x150>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <TIM_Base_SetConfig+0xc4>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <TIM_Base_SetConfig+0xc6>
 8001920:	2300      	movs	r3, #0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800192c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <TIM_Base_SetConfig+0x128>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d003      	beq.n	800195e <TIM_Base_SetConfig+0x102>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <TIM_Base_SetConfig+0x138>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <TIM_Base_SetConfig+0x106>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <TIM_Base_SetConfig+0x108>
 8001962:	2300      	movs	r3, #0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	615a      	str	r2, [r3, #20]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40010000 	.word	0x40010000
 8001988:	40000400 	.word	0x40000400
 800198c:	40000800 	.word	0x40000800
 8001990:	40000c00 	.word	0x40000c00
 8001994:	40010400 	.word	0x40010400
 8001998:	40014000 	.word	0x40014000
 800199c:	40014400 	.word	0x40014400
 80019a0:	40014800 	.word	0x40014800
 80019a4:	40001800 	.word	0x40001800
 80019a8:	40001c00 	.word	0x40001c00
 80019ac:	40002000 	.word	0x40002000

080019b0 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Handler>:
 */

#include "main.h"
extern TIM_HandleTypeDef htimer6;
void SysTick_Handler (void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80019dc:	f7fe fde4 	bl	80005a8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80019e0:	f7fe ff2c 	bl	800083c <HAL_SYSTICK_IRQHandler>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htimer6);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM6_DAC_IRQHandler+0x10>)
 80019ee:	f7ff fe05 	bl	80015fc <HAL_TIM_IRQHandler>
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000002c 	.word	0x2000002c

080019fc <main>:

TIM_HandleTypeDef htimer6;


int main(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	HAL_Init();
 8001a00:	f7fe fd80 	bl	8000504 <HAL_Init>
	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
 8001a04:	2032      	movs	r0, #50	; 0x32
 8001a06:	f000 f80b 	bl	8001a20 <SystemClockConfig>
	GPIO_Init();
 8001a0a:	f000 f891 	bl	8001b30 <GPIO_Init>
	TIMER6_Init();
 8001a0e:	f000 f8b3 	bl	8001b78 <TIMER6_Init>

	//Lets start the timer
	HAL_TIM_Base_Start_IT(&htimer6);
 8001a12:	4802      	ldr	r0, [pc, #8]	; (8001a1c <main+0x20>)
 8001a14:	f7ff fdd7 	bl	80015c6 <HAL_TIM_Base_Start_IT>

	while(1);
 8001a18:	e7fe      	b.n	8001a18 <main+0x1c>
 8001a1a:	bf00      	nop
 8001a1c:	2000002c 	.word	0x2000002c

08001a20 <SystemClockConfig>:
	return 0;
}


void SystemClockConfig(uint8_t clock_freq )
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b096      	sub	sp, #88	; 0x58
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
	Osc_Init.HSIState = RCC_HSI_ON;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	Osc_Init.HSICalibrationValue = 16;
 8001a32:	2310      	movs	r3, #16
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b54      	cmp	r3, #84	; 0x54
 8001a42:	d01a      	beq.n	8001a7a <SystemClockConfig+0x5a>
 8001a44:	2b78      	cmp	r3, #120	; 0x78
 8001a46:	d02e      	beq.n	8001aa6 <SystemClockConfig+0x86>
 8001a48:	2b32      	cmp	r3, #50	; 0x32
 8001a4a:	d000      	beq.n	8001a4e <SystemClockConfig+0x2e>
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
	     break;

	  default:
	   return ;
 8001a4c:	e06b      	b.n	8001b26 <SystemClockConfig+0x106>
		  Osc_Init.PLL.PLLM = 8;
 8001a4e:	2308      	movs	r3, #8
 8001a50:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 50;
 8001a52:	2332      	movs	r3, #50	; 0x32
 8001a54:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001a56:	2302      	movs	r3, #2
 8001a58:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a62:	230f      	movs	r3, #15
 8001a64:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a66:	2302      	movs	r3, #2
 8001a68:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a72:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
	     break;
 8001a78:	e02c      	b.n	8001ad4 <SystemClockConfig+0xb4>
		  Osc_Init.PLL.PLLM = 8;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 84;
 8001a7e:	2354      	movs	r3, #84	; 0x54
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8e:	230f      	movs	r3, #15
 8001a90:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a92:	2302      	movs	r3, #2
 8001a94:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9e:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
	     break;
 8001aa4:	e016      	b.n	8001ad4 <SystemClockConfig+0xb4>
		  Osc_Init.PLL.PLLM = 8;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 120;
 8001aaa:	2378      	movs	r3, #120	; 0x78
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aba:	230f      	movs	r3, #15
 8001abc:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ac6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aca:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	61fb      	str	r3, [r7, #28]
	     break;
 8001ad2:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff faef 	bl	80010bc <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClockConfig+0xc8>
	{
			Error_handler();
 8001ae4:	f000 f870 	bl	8001bc8 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, FLASH_LATENCY_2) != HAL_OK)
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2102      	movs	r1, #2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f856 	bl	8000ba0 <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClockConfig+0xde>
	{
		Error_handler();
 8001afa:	f000 f865 	bl	8001bc8 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8001afe:	f7ff f931 	bl	8000d64 <HAL_RCC_GetHCLKFreq>
 8001b02:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_SYSTICK_Config(hclk_freq/1000);
 8001b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <SystemClockConfig+0x10c>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fe6b 	bl	80007ea <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b14:	2004      	movs	r0, #4
 8001b16:	f7fe fe75 	bl	8000804 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b22:	f7fe fe38 	bl	8000796 <HAL_NVIC_SetPriority>

}
 8001b26:	3758      	adds	r7, #88	; 0x58
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	10624dd3 	.word	0x10624dd3

08001b30 <GPIO_Init>:


void GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <GPIO_Init+0x40>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <GPIO_Init+0x40>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <GPIO_Init+0x40>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 8001b52:	2320      	movs	r3, #32
 8001b54:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4804      	ldr	r0, [pc, #16]	; (8001b74 <GPIO_Init+0x44>)
 8001b64:	f7fe fe78 	bl	8000858 <HAL_GPIO_Init>
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <TIMER6_Init>:

void TIMER6_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <TIMER6_Init+0x2c>)
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <TIMER6_Init+0x30>)
 8001b80:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 9;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <TIMER6_Init+0x2c>)
 8001b84:	2209      	movs	r2, #9
 8001b86:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 50-1;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <TIMER6_Init+0x2c>)
 8001b8a:	2231      	movs	r2, #49	; 0x31
 8001b8c:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <TIMER6_Init+0x2c>)
 8001b90:	f7ff fcee 	bl	8001570 <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <TIMER6_Init+0x26>
	{
		Error_handler();
 8001b9a:	f000 f815 	bl	8001bc8 <Error_handler>
	}

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000002c 	.word	0x2000002c
 8001ba8:	40001000 	.word	0x40001000

08001bac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001bb8:	f7fe ffe0 	bl	8000b7c <HAL_GPIO_TogglePin>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <Error_handler>:


void Error_handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
	while(1);
 8001bcc:	e7fe      	b.n	8001bcc <Error_handler+0x4>
	...

08001bd0 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f7fe fdd3 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_MspInit+0x40>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <HAL_MspInit+0x40>)
 8001be0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001be4:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	f06f 000b 	mvn.w	r0, #11
 8001bee:	f7fe fdd2 	bl	8000796 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	f06f 000a 	mvn.w	r0, #10
 8001bfa:	f7fe fdcc 	bl	8000796 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	f06f 0009 	mvn.w	r0, #9
 8001c06:	f7fe fdc6 	bl	8000796 <HAL_NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_TIM_Base_MspInit+0x3c>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_TIM_Base_MspInit+0x3c>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_TIM_Base_MspInit+0x3c>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c38:	2036      	movs	r0, #54	; 0x36
 8001c3a:	f7fe fdc8 	bl	80007ce <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	210f      	movs	r1, #15
 8001c42:	2036      	movs	r0, #54	; 0x36
 8001c44:	f7fe fda7 	bl	8000796 <HAL_NVIC_SetPriority>

}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <SystemInit+0x60>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <SystemInit+0x60>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <SystemInit+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <SystemInit+0x64>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <SystemInit+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <SystemInit+0x64>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <SystemInit+0x64>)
 8001c80:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <SystemInit+0x64>)
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <SystemInit+0x68>)
 8001c8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <SystemInit+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <SystemInit+0x64>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <SystemInit+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SystemInit+0x60>)
 8001ca4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca8:	609a      	str	r2, [r3, #8]
#endif
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	24003010 	.word	0x24003010

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cd0:	480b      	ldr	r0, [pc, #44]	; (8001d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cea:	f7ff ffb3 	bl	8001c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f000 f811 	bl	8001d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7ff fe83 	bl	80019fc <main>
  bx  lr    
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cfc:	08001d9c 	.word	0x08001d9c
  ldr  r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d04:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001d08:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001d0c:	20000068 	.word	0x20000068

08001d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>
	...

08001d14 <__libc_init_array>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4e0d      	ldr	r6, [pc, #52]	; (8001d4c <__libc_init_array+0x38>)
 8001d18:	4c0d      	ldr	r4, [pc, #52]	; (8001d50 <__libc_init_array+0x3c>)
 8001d1a:	1ba4      	subs	r4, r4, r6
 8001d1c:	10a4      	asrs	r4, r4, #2
 8001d1e:	2500      	movs	r5, #0
 8001d20:	42a5      	cmp	r5, r4
 8001d22:	d109      	bne.n	8001d38 <__libc_init_array+0x24>
 8001d24:	4e0b      	ldr	r6, [pc, #44]	; (8001d54 <__libc_init_array+0x40>)
 8001d26:	4c0c      	ldr	r4, [pc, #48]	; (8001d58 <__libc_init_array+0x44>)
 8001d28:	f000 f818 	bl	8001d5c <_init>
 8001d2c:	1ba4      	subs	r4, r4, r6
 8001d2e:	10a4      	asrs	r4, r4, #2
 8001d30:	2500      	movs	r5, #0
 8001d32:	42a5      	cmp	r5, r4
 8001d34:	d105      	bne.n	8001d42 <__libc_init_array+0x2e>
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
 8001d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d3c:	4798      	blx	r3
 8001d3e:	3501      	adds	r5, #1
 8001d40:	e7ee      	b.n	8001d20 <__libc_init_array+0xc>
 8001d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d46:	4798      	blx	r3
 8001d48:	3501      	adds	r5, #1
 8001d4a:	e7f2      	b.n	8001d32 <__libc_init_array+0x1e>
 8001d4c:	08001d94 	.word	0x08001d94
 8001d50:	08001d94 	.word	0x08001d94
 8001d54:	08001d94 	.word	0x08001d94
 8001d58:	08001d98 	.word	0x08001d98

08001d5c <_init>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	bf00      	nop
 8001d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d62:	bc08      	pop	{r3}
 8001d64:	469e      	mov	lr, r3
 8001d66:	4770      	bx	lr

08001d68 <_fini>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	bf00      	nop
 8001d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6e:	bc08      	pop	{r3}
 8001d70:	469e      	mov	lr, r3
 8001d72:	4770      	bx	lr
