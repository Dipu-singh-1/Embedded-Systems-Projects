
CAN_LoopBack_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003180  08003180  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003194  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003194  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f2b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013ec  00000000  00000000  00027f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  00029358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  00029a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000203aa  00000000  00000000  0002a110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c7f  00000000  00000000  0004a4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4728  00000000  00000000  00050139  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf4  00000000  00000000  001148dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030f8 	.word	0x080030f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080030f8 	.word	0x080030f8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SysTick_Handler>:
 */

#include "stm32f4xx_hal.h"
extern CAN_HandleTypeDef hcan1;

void SysTick_Handler(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004dc:	f000 fba6 	bl	8000c2c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004e0:	f001 fb30 	bl	8001b44 <HAL_SYSTICK_IRQHandler>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <CAN1_TX_IRQHandler+0x10>)
 80004ee:	f000 fff0 	bl	80014d2 <HAL_CAN_IRQHandler>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000068 	.word	0x20000068

080004fc <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <CAN1_RX0_IRQHandler+0x10>)
 8000502:	f000 ffe6 	bl	80014d2 <HAL_CAN_IRQHandler>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000068 	.word	0x20000068

08000510 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <CAN1_RX1_IRQHandler+0x10>)
 8000516:	f000 ffdc 	bl	80014d2 <HAL_CAN_IRQHandler>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000068 	.word	0x20000068

08000524 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <CAN1_SCE_IRQHandler+0x10>)
 800052a:	f000 ffd2 	bl	80014d2 <HAL_CAN_IRQHandler>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000068 	.word	0x20000068

08000538 <main>:
void CAN1_Init(void);
void CAN1_Tx(void);
void CAN1_RX(void);
void CAN_Filter_Config(void);

int main(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  HAL_Init();
 800053c:	f000 fb24 	bl	8000b88 <HAL_Init>
  SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000540:	2032      	movs	r0, #50	; 0x32
 8000542:	f000 f81f 	bl	8000584 <SystemClock_Config_HSE>

  GPIO_Init();
 8000546:	f000 f8cd 	bl	80006e4 <GPIO_Init>
  USART2_UART_Init();
 800054a:	f000 f8a1 	bl	8000690 <USART2_UART_Init>
  CAN1_Init();
 800054e:	f000 f8ed 	bl	800072c <CAN1_Init>
  CAN_Filter_Config();
 8000552:	f000 f949 	bl	80007e8 <CAN_Filter_Config>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK ){
 8000556:	f240 4103 	movw	r1, #1027	; 0x403
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <main+0x48>)
 800055c:	f000 ff93 	bl	8001486 <HAL_CAN_ActivateNotification>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <main+0x32>
	  Error_Handler();
 8000566:	f000 f9ef 	bl	8000948 <Error_Handler>
  }

  if(HAL_CAN_Start(&hcan1) != HAL_OK){
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <main+0x48>)
 800056c:	f000 fd5a 	bl	8001024 <HAL_CAN_Start>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <main+0x42>
	  Error_Handler();
 8000576:	f000 f9e7 	bl	8000948 <Error_Handler>
  }

  CAN1_Tx();
 800057a:	f000 f90d 	bl	8000798 <CAN1_Tx>
  //CAN1_RX();

  while(1);
 800057e:	e7fe      	b.n	800057e <main+0x46>
 8000580:	20000068 	.word	0x20000068

08000584 <SystemClock_Config_HSE>:

}

void SystemClock_Config_HSE(uint8_t clock_freq){
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef 	osc_init;
	RCC_ClkInitTypeDef	clk_init;

	uint32_t FLantency = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_BYPASS;
 8000596:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800059a:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq){
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b54      	cmp	r3, #84	; 0x54
 80005aa:	d01b      	beq.n	80005e4 <SystemClock_Config_HSE+0x60>
 80005ac:	2b78      	cmp	r3, #120	; 0x78
 80005ae:	d030      	beq.n	8000612 <SystemClock_Config_HSE+0x8e>
 80005b0:	2b32      	cmp	r3, #50	; 0x32
 80005b2:	d000      	beq.n	80005b6 <SystemClock_Config_HSE+0x32>
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLantency = FLASH_ACR_LATENCY_3WS;
			break;
		default:
			return;
 80005b4:	e066      	b.n	8000684 <SystemClock_Config_HSE+0x100>
			osc_init.PLL.PLLM = 8;
 80005b6:	2308      	movs	r3, #8
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 100;
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK \
 80005c6:	230f      	movs	r3, #15
 80005c8:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
			FLantency = FLASH_ACR_LATENCY_1WS;
 80005de:	2301      	movs	r3, #1
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80005e2:	e02d      	b.n	8000640 <SystemClock_Config_HSE+0xbc>
			osc_init.PLL.PLLM = 8;
 80005e4:	2308      	movs	r3, #8
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 168;
 80005e8:	23a8      	movs	r3, #168	; 0xa8
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK \
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61bb      	str	r3, [r7, #24]
			FLantency = FLASH_ACR_LATENCY_2WS;
 800060c:	2302      	movs	r3, #2
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 8000610:	e016      	b.n	8000640 <SystemClock_Config_HSE+0xbc>
			osc_init.PLL.PLLM = 8;
 8000612:	2308      	movs	r3, #8
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 240;
 8000616:	23f0      	movs	r3, #240	; 0xf0
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK \
 8000622:	230f      	movs	r3, #15
 8000624:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000632:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	61bb      	str	r3, [r7, #24]
			FLantency = FLASH_ACR_LATENCY_3WS;
 800063a:	2303      	movs	r3, #3
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 800063e:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fc25 	bl	8001e94 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config_HSE+0xd0>
		Error_Handler();
 8000650:	f000 f97a 	bl	8000948 <Error_Handler>
	}
	if(HAL_RCC_ClockConfig(&clk_init, FLantency) != HAL_OK){
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fe8a 	bl	8002374 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config_HSE+0xe6>
		Error_Handler();
 8000666:	f000 f96f 	bl	8000948 <Error_Handler>
	}

	// Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800066a:	f002 f841 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 800066e:	4602      	mov	r2, r0
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <SystemClock_Config_HSE+0x108>)
 8000672:	fba3 2302 	umull	r2, r3, r3, r2
 8000676:	099b      	lsrs	r3, r3, #6
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fa3a 	bl	8001af2 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800067e:	2004      	movs	r0, #4
 8000680:	f001 fa44 	bl	8001b0c <HAL_SYSTICK_CLKSourceConfig>
}
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	10624dd3 	.word	0x10624dd3

08000690 <USART2_UART_Init>:


void USART2_UART_Init(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <USART2_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK){
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <USART2_UART_Init+0x4c>)
 80006c8:	f002 f846 	bl	8002758 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <USART2_UART_Init+0x46>
    Error_Handler();
 80006d2:	f000 f939 	bl	8000948 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000028 	.word	0x20000028
 80006e0:	40004400 	.word	0x40004400

080006e4 <GPIO_Init>:

void GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <GPIO_Init+0x40>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <GPIO_Init+0x40>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <GPIO_Init+0x40>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 8000706:	2320      	movs	r3, #32
 8000708:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <GPIO_Init+0x44>)
 8000718:	f001 fa22 	bl	8001b60 <HAL_GPIO_Init>
}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000

0800072c <CAN1_Init>:

void CAN1_Init(void){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <CAN1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <CAN1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <CAN1_Init+0x64>)
 8000738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073c:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <CAN1_Init+0x64>)
 8000740:	2201      	movs	r2, #1
 8000742:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <CAN1_Init+0x64>)
 8000746:	2201      	movs	r2, #1
 8000748:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <CAN1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <CAN1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	775a      	strb	r2, [r3, #29]

	// settings related to CAN bit timings
	hcan1.Init.Prescaler = 5;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <CAN1_Init+0x64>)
 8000764:	2205      	movs	r2, #5
 8000766:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <CAN1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <CAN1_Init+0x64>)
 8000770:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000774:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <CAN1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hcan1) != HAL_OK){
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <CAN1_Init+0x64>)
 800077e:	f000 fa75 	bl	8000c6c <HAL_CAN_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <CAN1_Init+0x60>
		Error_Handler();
 8000788:	f000 f8de 	bl	8000948 <Error_Handler>
	}
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000068 	.word	0x20000068
 8000794:	40006400 	.word	0x40006400

08000798 <CAN1_Tx>:

void CAN1_Tx(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t our_message[5] = {'H', 'E', 'L', 'L', 'O'};
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <CAN1_Tx+0x48>)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	3304      	adds	r3, #4
 80007aa:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;
 80007ac:	2305      	movs	r3, #5
 80007ae:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;
 80007b0:	f240 635d 	movw	r3, #1629	; 0x65d
 80007b4:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox) != HAL_OK){
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	1d3a      	adds	r2, r7, #4
 80007c4:	f107 0110 	add.w	r1, r7, #16
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <CAN1_Tx+0x4c>)
 80007ca:	f000 fc6f 	bl	80010ac <HAL_CAN_AddTxMessage>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <CAN1_Tx+0x40>
		Error_Handler();
 80007d4:	f000 f8b8 	bl	8000948 <Error_Handler>
	}

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08003110 	.word	0x08003110
 80007e4:	20000068 	.word	0x20000068

080007e8 <CAN_Filter_Config>:
	if( HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) ){
		Error_Handler();
	}
}*/

void CAN_Filter_Config(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800080e:	2301      	movs	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK ){
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <CAN_Filter_Config+0x48>)
 8000818:	f000 fb24 	bl	8000e64 <HAL_CAN_ConfigFilter>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <CAN_Filter_Config+0x3e>
		Error_Handler();
 8000822:	f000 f891 	bl	8000948 <Error_Handler>
	}
}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000068 	.word	0x20000068

08000834 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8000834:	b5b0      	push	{r4, r5, r7, lr}
 8000836:	b090      	sub	sp, #64	; 0x40
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted: M0");
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 8000842:	461c      	mov	r4, r3
 8000844:	4615      	mov	r5, r2
 8000846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800084e:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fcb6 	bl	80001c8 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	f107 010c 	add.w	r1, r7, #12
 8000864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 800086a:	f001 ffc2 	bl	80027f2 <HAL_UART_Transmit>
}
 800086e:	bf00      	nop
 8000870:	3740      	adds	r7, #64	; 0x40
 8000872:	46bd      	mov	sp, r7
 8000874:	bdb0      	pop	{r4, r5, r7, pc}
 8000876:	bf00      	nop
 8000878:	08003118 	.word	0x08003118
 800087c:	20000028 	.word	0x20000028

08000880 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	b090      	sub	sp, #64	; 0x40
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted: M1");
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 800088e:	461c      	mov	r4, r3
 8000890:	4615      	mov	r5, r2
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0003 	ldmia.w	r5, {r0, r1}
 800089a:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fc90 	bl	80001c8 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f107 010c 	add.w	r1, r7, #12
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 80008b6:	f001 ff9c 	bl	80027f2 <HAL_UART_Transmit>
}
 80008ba:	bf00      	nop
 80008bc:	3740      	adds	r7, #64	; 0x40
 80008be:	46bd      	mov	sp, r7
 80008c0:	bdb0      	pop	{r4, r5, r7, pc}
 80008c2:	bf00      	nop
 80008c4:	08003130 	.word	0x08003130
 80008c8:	20000028 	.word	0x20000028

080008cc <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80008cc:	b5b0      	push	{r4, r5, r7, lr}
 80008ce:	b090      	sub	sp, #64	; 0x40
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted: M2");
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 80008da:	461c      	mov	r4, r3
 80008dc:	4615      	mov	r5, r2
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008e6:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc6a 	bl	80001c8 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	f107 010c 	add.w	r1, r7, #12
 80008fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 8000902:	f001 ff76 	bl	80027f2 <HAL_UART_Transmit>
}
 8000906:	bf00      	nop
 8000908:	3740      	adds	r7, #64	; 0x40
 800090a:	46bd      	mov	sp, r7
 800090c:	bdb0      	pop	{r4, r5, r7, pc}
 800090e:	bf00      	nop
 8000910:	08003148 	.word	0x08003148
 8000914:	20000028 	.word	0x20000028

08000918 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000918:	b580      	push	{r7, lr}
 800091a:	b098      	sub	sp, #96	; 0x60
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[5];

	if( HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) ){
 8000920:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000924:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800092c:	f000 fc99 	bl	8001262 <HAL_CAN_GetRxMessage>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Error_Handler();
 8000936:	f000 f807 	bl	8000948 <Error_Handler>
	}
	char msg[50];

}
 800093a:	bf00      	nop
 800093c:	3760      	adds	r7, #96	; 0x60
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000068 	.word	0x20000068

08000948 <Error_Handler>:

void Error_Handler(void){
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

	while(1);
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x4>
	...

08000950 <HAL_MspInit>:

#include "main.h"

void HAL_MspInit(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0


  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_MspInit+0x60>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_MspInit+0x60>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_MspInit+0x60>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  //__HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000972:	2003      	movs	r0, #3
 8000974:	f001 f888 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_MspInit+0x64>)
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <HAL_MspInit+0x64>)
 800097e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000982:	6253      	str	r3, [r2, #36]	; 0x24

  	//3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	f06f 000b 	mvn.w	r0, #11
 800098c:	f001 f887 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	f06f 000a 	mvn.w	r0, #10
 8000998:	f001 f881 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	f06f 0009 	mvn.w	r0, #9
 80009a4:	f001 f87b 	bl	8001a9e <HAL_NVIC_SetPriority>

}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

	__HAL_RCC_CAN1_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <HAL_CAN_MspInit+0xb8>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a25      	ldr	r2, [pc, #148]	; (8000a70 <HAL_CAN_MspInit+0xb8>)
 80009da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <HAL_CAN_MspInit+0xb8>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_CAN_MspInit+0xb8>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <HAL_CAN_MspInit+0xb8>)
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_CAN_MspInit+0xb8>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
	/*
	 * PD1: CAN1_TX
	 * PD0: CAN1_RX
	 */

	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <HAL_CAN_MspInit+0xbc>)
 8000a24:	f001 f89c 	bl	8001b60 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	2013      	movs	r0, #19
 8000a2e:	f001 f836 	bl	8001a9e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	2014      	movs	r0, #20
 8000a38:	f001 f831 	bl	8001a9e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	210f      	movs	r1, #15
 8000a40:	2015      	movs	r0, #21
 8000a42:	f001 f82c 	bl	8001a9e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	2016      	movs	r0, #22
 8000a4c:	f001 f827 	bl	8001a9e <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a50:	2013      	movs	r0, #19
 8000a52:	f001 f840 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a56:	2014      	movs	r0, #20
 8000a58:	f001 f83d 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a5c:	2015      	movs	r0, #21
 8000a5e:	f001 f83a 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000a62:	2016      	movs	r0, #22
 8000a64:	f001 f837 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_UART_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12b      	bne.n	8000af2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_UART_MspInit+0x8c>)
 8000aee:	f001 f837 	bl	8001b60 <HAL_GPIO_Init>
  }

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <SystemInit+0x28>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <SystemInit+0x28>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SystemInit+0x28>)
 8000b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b22:	609a      	str	r2, [r3, #8]
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b3a:	e003      	b.n	8000b44 <LoopCopyDataInit>

08000b3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b42:	3104      	adds	r1, #4

08000b44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b4c:	d3f6      	bcc.n	8000b3c <CopyDataInit>
  ldr  r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b50:	e002      	b.n	8000b58 <LoopFillZerobss>

08000b52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b54:	f842 3b04 	str.w	r3, [r2], #4

08000b58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b5c:	d3f9      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b5e:	f7ff ffd3 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 faa5 	bl	80030b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fce7 	bl	8000538 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b70:	08003188 	.word	0x08003188
  ldr  r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b78:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b80:	20000094 	.word	0x20000094

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 ff69 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fec8 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 ff81 	bl	8001af2 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f000 ff49 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000090 	.word	0x20000090

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000090 	.word	0x20000090

08000c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0ed      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fe94 	bl	80009b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 0202 	bic.w	r2, r2, #2
 8000c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca0:	f7ff ffd8 	bl	8000c54 <HAL_GetTick>
 8000ca4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ca6:	e012      	b.n	8000cce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca8:	f7ff ffd4 	bl	8000c54 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	d90b      	bls.n	8000cce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0c5      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1e5      	bne.n	8000ca8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0201 	orr.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff ffb2 	bl	8000c54 <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cf2:	e012      	b.n	8000d1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf4:	f7ff ffae 	bl	8000c54 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2205      	movs	r2, #5
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e09f      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0e5      	beq.n	8000cf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e1b      	ldrb	r3, [r3, #24]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d108      	bne.n	8000d42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7e5b      	ldrb	r3, [r3, #25]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d108      	bne.n	8000d6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7e9b      	ldrb	r3, [r3, #26]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d108      	bne.n	8000d96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e007      	b.n	8000da6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0220 	bic.w	r2, r2, #32
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7edb      	ldrb	r3, [r3, #27]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d108      	bne.n	8000dc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0210 	bic.w	r2, r2, #16
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0210 	orr.w	r2, r2, #16
 8000dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0208 	orr.w	r2, r2, #8
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e007      	b.n	8000dfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0208 	bic.w	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7f5b      	ldrb	r3, [r3, #29]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0204 	orr.w	r2, r2, #4
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0204 	bic.w	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	ea42 0103 	orr.w	r1, r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e7c:	7cfb      	ldrb	r3, [r7, #19]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d003      	beq.n	8000e8a <HAL_CAN_ConfigFilter+0x26>
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	f040 80be 	bne.w	8001006 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e8a:	4b65      	ldr	r3, [pc, #404]	; (8001020 <HAL_CAN_ConfigFilter+0x1bc>)
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ea4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2201      	movs	r2, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d123      	bne.n	8000f34 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3248      	adds	r2, #72	; 0x48
 8000f14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f2a:	6979      	ldr	r1, [r7, #20]
 8000f2c:	3348      	adds	r3, #72	; 0x48
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d122      	bne.n	8000f82 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	431a      	orrs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3248      	adds	r2, #72	; 0x48
 8000f62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f78:	6979      	ldr	r1, [r7, #20]
 8000f7a:	3348      	adds	r3, #72	; 0x48
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f9c:	e007      	b.n	8000fae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fc8:	e007      	b.n	8000fda <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d107      	bne.n	8000ff2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ff8:	f023 0201 	bic.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e006      	b.n	8001014 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
  }
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40006400 	.word	0x40006400

08001024 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d12e      	bne.n	8001096 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001050:	f7ff fe00 	bl	8000c54 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001056:	e012      	b.n	800107e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001058:	f7ff fdfc 	bl	8000c54 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d90b      	bls.n	800107e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2205      	movs	r2, #5
 8001076:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e012      	b.n	80010a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e5      	bne.n	8001058 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e006      	b.n	80010a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
  }
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <HAL_CAN_AddTxMessage+0x2c>
 80010d0:	7ffb      	ldrb	r3, [r7, #31]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	f040 80b8 	bne.w	8001248 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10a      	bne.n	80010f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80a0 	beq.w	8001238 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	0e1b      	lsrs	r3, r3, #24
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d907      	bls.n	8001118 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e09e      	b.n	8001256 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001118:	2201      	movs	r2, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	409a      	lsls	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	6809      	ldr	r1, [r1, #0]
 8001138:	431a      	orrs	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3318      	adds	r3, #24
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	440b      	add	r3, r1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e00f      	b.n	8001166 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001150:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800115a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3318      	adds	r3, #24
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	440b      	add	r3, r1
 8001164:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6819      	ldr	r1, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3318      	adds	r3, #24
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	440b      	add	r3, r1
 8001176:	3304      	adds	r3, #4
 8001178:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	7d1b      	ldrb	r3, [r3, #20]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d111      	bne.n	80011a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3318      	adds	r3, #24
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	3304      	adds	r3, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	6811      	ldr	r1, [r2, #0]
 8001196:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3318      	adds	r3, #24
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	440b      	add	r3, r1
 80011a2:	3304      	adds	r3, #4
 80011a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3307      	adds	r3, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	061a      	lsls	r2, r3, #24
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3306      	adds	r3, #6
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3305      	adds	r3, #5
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	4313      	orrs	r3, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	3204      	adds	r2, #4
 80011c6:	7812      	ldrb	r2, [r2, #0]
 80011c8:	4610      	mov	r0, r2
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	6811      	ldr	r1, [r2, #0]
 80011ce:	ea43 0200 	orr.w	r2, r3, r0
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	440b      	add	r3, r1
 80011d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3303      	adds	r3, #3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	061a      	lsls	r2, r3, #24
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3302      	adds	r3, #2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	041b      	lsls	r3, r3, #16
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3301      	adds	r3, #1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	4313      	orrs	r3, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	4610      	mov	r0, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	6811      	ldr	r1, [r2, #0]
 8001204:	ea43 0200 	orr.w	r2, r3, r0
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	440b      	add	r3, r1
 800120e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001212:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3318      	adds	r3, #24
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	4413      	add	r3, r2
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3318      	adds	r3, #24
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	440b      	add	r3, r1
 8001232:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	e00e      	b.n	8001256 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e006      	b.n	8001256 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
  }
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001262:	b480      	push	{r7}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001276:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d003      	beq.n	8001286 <HAL_CAN_GetRxMessage+0x24>
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	2b02      	cmp	r3, #2
 8001282:	f040 80f3 	bne.w	800146c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10e      	bne.n	80012aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0e7      	b.n	800147a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0d8      	b.n	800147a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	331b      	adds	r3, #27
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0204 	and.w	r2, r3, #4
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	331b      	adds	r3, #27
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0d5b      	lsrs	r3, r3, #21
 80012f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	331b      	adds	r3, #27
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	331b      	adds	r3, #27
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0202 	and.w	r2, r3, #2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	331b      	adds	r3, #27
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 020f 	and.w	r2, r3, #15
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	331b      	adds	r3, #27
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	3304      	adds	r3, #4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	331b      	adds	r3, #27
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	3304      	adds	r3, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	b29a      	uxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4413      	add	r3, r2
 8001396:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0a1a      	lsrs	r2, r3, #8
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0c1a      	lsrs	r2, r3, #16
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	3302      	adds	r3, #2
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0e1a      	lsrs	r2, r3, #24
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3303      	adds	r3, #3
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3304      	adds	r3, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0a1a      	lsrs	r2, r3, #8
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3305      	adds	r3, #5
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0c1a      	lsrs	r2, r3, #16
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	3306      	adds	r3, #6
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0e1a      	lsrs	r2, r3, #24
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3307      	adds	r3, #7
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d108      	bne.n	8001458 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	e007      	b.n	8001468 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0220 	orr.w	r2, r2, #32
 8001466:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e006      	b.n	800147a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
  }
}
 800147a:	4618      	mov	r0, r3
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001496:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d002      	beq.n	80014a4 <HAL_CAN_ActivateNotification+0x1e>
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d109      	bne.n	80014b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6959      	ldr	r1, [r3, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e006      	b.n	80014c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
  }
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b08a      	sub	sp, #40	; 0x28
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d07c      	beq.n	8001612 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d023      	beq.n	800156a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff f97d 	bl	8000834 <HAL_CAN_TxMailbox0CompleteCallback>
 800153a:	e016      	b.n	800156a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e00c      	b.n	800156a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	e002      	b.n	800156a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f965 	bl	8001834 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d024      	beq.n	80015be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff f979 	bl	8000880 <HAL_CAN_TxMailbox1CompleteCallback>
 800158e:	e016      	b.n	80015be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
 80015a2:	e00c      	b.n	80015be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	e002      	b.n	80015be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f945 	bl	8001848 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d024      	beq.n	8001612 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff f975 	bl	80008cc <HAL_CAN_TxMailbox2CompleteCallback>
 80015e2:	e016      	b.n	8001612 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
 80015f6:	e00c      	b.n	8001612 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e002      	b.n	8001612 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f925 	bl	800185c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00c      	beq.n	8001636 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2210      	movs	r2, #16
 8001634:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00b      	beq.n	8001658 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2208      	movs	r2, #8
 8001650:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f90c 	bl	8001870 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff f951 	bl	8000918 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00c      	beq.n	800169a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001690:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2210      	movs	r2, #16
 8001698:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2208      	movs	r2, #8
 80016b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f8ee 	bl	8001898 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f8d5 	bl	8001884 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00b      	beq.n	80016fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2210      	movs	r2, #16
 80016f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8d8 	bl	80018ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2208      	movs	r2, #8
 8001716:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8d1 	bl	80018c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d075      	beq.n	8001814 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06c      	beq.n	800180c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03d      	beq.n	800180c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001796:	2b00      	cmp	r3, #0
 8001798:	d038      	beq.n	800180c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017a0:	2b30      	cmp	r3, #48	; 0x30
 80017a2:	d017      	beq.n	80017d4 <HAL_CAN_IRQHandler+0x302>
 80017a4:	2b30      	cmp	r3, #48	; 0x30
 80017a6:	d804      	bhi.n	80017b2 <HAL_CAN_IRQHandler+0x2e0>
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d009      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x2ee>
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	d00c      	beq.n	80017ca <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017b0:	e024      	b.n	80017fc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80017b2:	2b50      	cmp	r3, #80	; 0x50
 80017b4:	d018      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x316>
 80017b6:	2b60      	cmp	r3, #96	; 0x60
 80017b8:	d01b      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x320>
 80017ba:	2b40      	cmp	r3, #64	; 0x40
 80017bc:	d00f      	beq.n	80017de <HAL_CAN_IRQHandler+0x30c>
            break;
 80017be:	e01d      	b.n	80017fc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c8:	e018      	b.n	80017fc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d2:	e013      	b.n	80017fc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	f043 0320 	orr.w	r3, r3, #32
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017dc:	e00e      	b.n	80017fc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e6:	e009      	b.n	80017fc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f0:	e004      	b.n	80017fc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800180a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2204      	movs	r2, #4
 8001812:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f854 	bl	80018d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff29 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff3e 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff31 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d106      	bne.n	8001b28 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001b26:	e005      	b.n	8001b34 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001b48:	f000 f802 	bl	8001b50 <HAL_SYSTICK_Callback>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e16b      	b.n	8001e54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 815a 	bne.w	8001e4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d00b      	beq.n	8001bba <HAL_GPIO_Init+0x5a>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bae:	2b11      	cmp	r3, #17
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	d130      	bne.n	8001c1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 0201 	and.w	r2, r3, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0xfc>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b12      	cmp	r3, #18
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80b4 	beq.w	8001e4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <HAL_GPIO_Init+0x308>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a5e      	ldr	r2, [pc, #376]	; (8001e68 <HAL_GPIO_Init+0x308>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b5c      	ldr	r3, [pc, #368]	; (8001e68 <HAL_GPIO_Init+0x308>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a51      	ldr	r2, [pc, #324]	; (8001e70 <HAL_GPIO_Init+0x310>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02b      	beq.n	8001d86 <HAL_GPIO_Init+0x226>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a50      	ldr	r2, [pc, #320]	; (8001e74 <HAL_GPIO_Init+0x314>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d025      	beq.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	; (8001e78 <HAL_GPIO_Init+0x318>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <HAL_GPIO_Init+0x21e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4e      	ldr	r2, [pc, #312]	; (8001e7c <HAL_GPIO_Init+0x31c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x21a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_GPIO_Init+0x320>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x216>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_GPIO_Init+0x324>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x212>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <HAL_GPIO_Init+0x328>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x32c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x20a>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e00e      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	e00c      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e00a      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e008      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d86:	2300      	movs	r3, #0
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d98:	4934      	ldr	r1, [pc, #208]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dca:	4a31      	ldr	r2, [pc, #196]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	f67f ae90 	bls.w	8001b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3724      	adds	r7, #36	; 0x24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40021400 	.word	0x40021400
 8001e88:	40021800 	.word	0x40021800
 8001e8c:	40021c00 	.word	0x40021c00
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e25b      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d075      	beq.n	8001f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	4ba3      	ldr	r3, [pc, #652]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ebe:	4ba0      	ldr	r3, [pc, #640]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d112      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b9d      	ldr	r3, [pc, #628]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	4b99      	ldr	r3, [pc, #612]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d05b      	beq.n	8001f9c <HAL_RCC_OscConfig+0x108>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d157      	bne.n	8001f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e236      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x74>
 8001efa:	4b91      	ldr	r3, [pc, #580]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a90      	ldr	r2, [pc, #576]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e01d      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a8a      	ldr	r2, [pc, #552]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a87      	ldr	r2, [pc, #540]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
 8001f2c:	4b84      	ldr	r3, [pc, #528]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a83      	ldr	r2, [pc, #524]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b81      	ldr	r3, [pc, #516]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a80      	ldr	r2, [pc, #512]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fe82 	bl	8000c54 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f54:	f7fe fe7e 	bl	8000c54 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1fb      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xc0>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe6e 	bl	8000c54 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7fe fe6a 	bl	8000c54 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1e7      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0xe8>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d063      	beq.n	8002072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb6:	4b62      	ldr	r3, [pc, #392]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d11c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc2:	4b5f      	ldr	r3, [pc, #380]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d116      	bne.n	8001ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	4b5c      	ldr	r3, [pc, #368]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x152>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1bb      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b56      	ldr	r3, [pc, #344]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4952      	ldr	r1, [pc, #328]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	e03a      	b.n	8002072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCC_OscConfig+0x2b0>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe fe23 	bl	8000c54 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002012:	f7fe fe1f 	bl	8000c54 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e19c      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4940      	ldr	r1, [pc, #256]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_OscConfig+0x2b0>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fe02 	bl	8000c54 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002054:	f7fe fdfe 	bl	8000c54 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e17b      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	4b36      	ldr	r3, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d030      	beq.n	80020e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_RCC_OscConfig+0x2b4>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208c:	f7fe fde2 	bl	8000c54 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002094:	f7fe fdde 	bl	8000c54 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e15b      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x200>
 80020b2:	e015      	b.n	80020e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_OscConfig+0x2b4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe fdcb 	bl	8000c54 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c2:	f7fe fdc7 	bl	8000c54 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e144      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a0 	beq.w	800222e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_OscConfig+0x2b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d121      	bne.n	800216e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCC_OscConfig+0x2b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_RCC_OscConfig+0x2b8>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7fe fd8d 	bl	8000c54 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	e011      	b.n	8002162 <HAL_RCC_OscConfig+0x2ce>
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
 800214c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002150:	f7fe fd80 	bl	8000c54 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0fd      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b81      	ldr	r3, [pc, #516]	; (8002368 <HAL_RCC_OscConfig+0x4d4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d106      	bne.n	8002184 <HAL_RCC_OscConfig+0x2f0>
 8002176:	4b7d      	ldr	r3, [pc, #500]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a7c      	ldr	r2, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	e01c      	b.n	80021be <HAL_RCC_OscConfig+0x32a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x312>
 800218c:	4b77      	ldr	r3, [pc, #476]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a76      	ldr	r2, [pc, #472]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
 8002198:	4b74      	ldr	r3, [pc, #464]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a73      	ldr	r2, [pc, #460]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x32a>
 80021a6:	4b71      	ldr	r3, [pc, #452]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a70      	ldr	r2, [pc, #448]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
 80021b2:	4b6e      	ldr	r3, [pc, #440]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a6d      	ldr	r2, [pc, #436]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7fe fd45 	bl	8000c54 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe fd41 	bl	8000c54 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0bc      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b61      	ldr	r3, [pc, #388]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCC_OscConfig+0x33a>
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7fe fd2f 	bl	8000c54 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe fd2b 	bl	8000c54 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0a6      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4b56      	ldr	r3, [pc, #344]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ee      	bne.n	80021fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b52      	ldr	r3, [pc, #328]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a51      	ldr	r2, [pc, #324]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8092 	beq.w	800235c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002238:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d05c      	beq.n	80022fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d141      	bne.n	80022d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b48      	ldr	r3, [pc, #288]	; (8002370 <HAL_RCC_OscConfig+0x4dc>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7fe fcff 	bl	8000c54 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe fcfb 	bl	8000c54 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e078      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	019b      	lsls	r3, r3, #6
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	061b      	lsls	r3, r3, #24
 800229c:	4933      	ldr	r1, [pc, #204]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a2:	4b33      	ldr	r3, [pc, #204]	; (8002370 <HAL_RCC_OscConfig+0x4dc>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fcd4 	bl	8000c54 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fcd0 	bl	8000c54 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e04d      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x41c>
 80022ce:	e045      	b.n	800235c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x4dc>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe fcbd 	bl	8000c54 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fcb9 	bl	8000c54 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e036      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x44a>
 80022fc:	e02e      	b.n	800235c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e029      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_RCC_OscConfig+0x4d8>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	429a      	cmp	r2, r3
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d115      	bne.n	8002358 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002332:	4013      	ands	r3, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002338:	4293      	cmp	r3, r2
 800233a:	d10d      	bne.n	8002358 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40007000 	.word	0x40007000
 800236c:	40023800 	.word	0x40023800
 8002370:	42470060 	.word	0x42470060

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0cc      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d90c      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b8      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d044      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	2b03      	cmp	r3, #3
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e067      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4934      	ldr	r1, [pc, #208]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7fe fbf6 	bl	8000c54 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7fe fbf2 	bl	8000c54 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d20c      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e032      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4916      	ldr	r1, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f821 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024fe:	4601      	mov	r1, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	fa21 f303 	lsr.w	r3, r1, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fb56 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00
 8002530:	40023800 	.word	0x40023800
 8002534:	08003160 	.word	0x08003160
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b04      	cmp	r3, #4
 8002560:	d007      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0x32>
 8002562:	2b08      	cmp	r3, #8
 8002564:	d008      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x38>
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 80b4 	bne.w	80026d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800256e:	60bb      	str	r3, [r7, #8]
       break;
 8002570:	e0b3      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002572:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002574:	60bb      	str	r3, [r7, #8]
      break;
 8002576:	e0b0      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002578:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002580:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002582:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d04a      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258e:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	f04f 0400 	mov.w	r4, #0
 8002598:	f240 11ff 	movw	r1, #511	; 0x1ff
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	ea03 0501 	and.w	r5, r3, r1
 80025a4:	ea04 0602 	and.w	r6, r4, r2
 80025a8:	4629      	mov	r1, r5
 80025aa:	4632      	mov	r2, r6
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	f04f 0400 	mov.w	r4, #0
 80025b4:	0154      	lsls	r4, r2, #5
 80025b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ba:	014b      	lsls	r3, r1, #5
 80025bc:	4619      	mov	r1, r3
 80025be:	4622      	mov	r2, r4
 80025c0:	1b49      	subs	r1, r1, r5
 80025c2:	eb62 0206 	sbc.w	r2, r2, r6
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	f04f 0400 	mov.w	r4, #0
 80025ce:	0194      	lsls	r4, r2, #6
 80025d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025d4:	018b      	lsls	r3, r1, #6
 80025d6:	1a5b      	subs	r3, r3, r1
 80025d8:	eb64 0402 	sbc.w	r4, r4, r2
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	00e2      	lsls	r2, r4, #3
 80025e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025ea:	00d9      	lsls	r1, r3, #3
 80025ec:	460b      	mov	r3, r1
 80025ee:	4614      	mov	r4, r2
 80025f0:	195b      	adds	r3, r3, r5
 80025f2:	eb44 0406 	adc.w	r4, r4, r6
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	0262      	lsls	r2, r4, #9
 8002600:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002604:	0259      	lsls	r1, r3, #9
 8002606:	460b      	mov	r3, r1
 8002608:	4614      	mov	r4, r2
 800260a:	4618      	mov	r0, r3
 800260c:	4621      	mov	r1, r4
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f04f 0400 	mov.w	r4, #0
 8002614:	461a      	mov	r2, r3
 8002616:	4623      	mov	r3, r4
 8002618:	f7fd fdde 	bl	80001d8 <__aeabi_uldivmod>
 800261c:	4603      	mov	r3, r0
 800261e:	460c      	mov	r4, r1
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e049      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002624:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	f04f 0400 	mov.w	r4, #0
 800262e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	ea03 0501 	and.w	r5, r3, r1
 800263a:	ea04 0602 	and.w	r6, r4, r2
 800263e:	4629      	mov	r1, r5
 8002640:	4632      	mov	r2, r6
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	f04f 0400 	mov.w	r4, #0
 800264a:	0154      	lsls	r4, r2, #5
 800264c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002650:	014b      	lsls	r3, r1, #5
 8002652:	4619      	mov	r1, r3
 8002654:	4622      	mov	r2, r4
 8002656:	1b49      	subs	r1, r1, r5
 8002658:	eb62 0206 	sbc.w	r2, r2, r6
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	f04f 0400 	mov.w	r4, #0
 8002664:	0194      	lsls	r4, r2, #6
 8002666:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800266a:	018b      	lsls	r3, r1, #6
 800266c:	1a5b      	subs	r3, r3, r1
 800266e:	eb64 0402 	sbc.w	r4, r4, r2
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	00e2      	lsls	r2, r4, #3
 800267c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002680:	00d9      	lsls	r1, r3, #3
 8002682:	460b      	mov	r3, r1
 8002684:	4614      	mov	r4, r2
 8002686:	195b      	adds	r3, r3, r5
 8002688:	eb44 0406 	adc.w	r4, r4, r6
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	02a2      	lsls	r2, r4, #10
 8002696:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800269a:	0299      	lsls	r1, r3, #10
 800269c:	460b      	mov	r3, r1
 800269e:	4614      	mov	r4, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	4621      	mov	r1, r4
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f04f 0400 	mov.w	r4, #0
 80026aa:	461a      	mov	r2, r3
 80026ac:	4623      	mov	r3, r4
 80026ae:	f7fd fd93 	bl	80001d8 <__aeabi_uldivmod>
 80026b2:	4603      	mov	r3, r0
 80026b4:	460c      	mov	r4, r1
 80026b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	60bb      	str	r3, [r7, #8]
      break;
 80026d2:	e002      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026d6:	60bb      	str	r3, [r7, #8]
      break;
 80026d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026da:	68bb      	ldr	r3, [r7, #8]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200

080026f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800270c:	f7ff fff0 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002710:	4601      	mov	r1, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0a9b      	lsrs	r3, r3, #10
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	08003170 	.word	0x08003170

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002734:	f7ff ffdc 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002738:	4601      	mov	r1, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0b5b      	lsrs	r3, r3, #13
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4a03      	ldr	r2, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	08003170 	.word	0x08003170

08002758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e03f      	b.n	80027ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe f97a 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800279a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f90b 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b088      	sub	sp, #32
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	f040 8083 	bne.w	800291a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_UART_Transmit+0x2e>
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e07b      	b.n	800291c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_UART_Transmit+0x40>
 800282e:	2302      	movs	r3, #2
 8002830:	e074      	b.n	800291c <HAL_UART_Transmit+0x12a>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2221      	movs	r2, #33	; 0x21
 8002844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002848:	f7fe fa04 	bl	8000c54 <HAL_GetTick>
 800284c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002862:	e042      	b.n	80028ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	d122      	bne.n	80028c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2200      	movs	r2, #0
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f84c 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e042      	b.n	800291c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3302      	adds	r3, #2
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	e017      	b.n	80028ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3301      	adds	r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	e013      	b.n	80028ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f829 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e01f      	b.n	800291c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	60ba      	str	r2, [r7, #8]
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1b7      	bne.n	8002864 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2200      	movs	r2, #0
 80028fc:	2140      	movs	r1, #64	; 0x40
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f810 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e006      	b.n	800291c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002934:	e02c      	b.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293c:	d028      	beq.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <UART_WaitOnFlagUntilTimeout+0x30>
 8002944:	f7fe f986 	bl	8000c54 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d21d      	bcs.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002962:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e00f      	b.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d0c3      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029fa:	f023 030c 	bic.w	r3, r3, #12
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a26:	f040 818b 	bne.w	8002d40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4ac1      	ldr	r2, [pc, #772]	; (8002d34 <UART_SetConfig+0x37c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d005      	beq.n	8002a40 <UART_SetConfig+0x88>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4abf      	ldr	r2, [pc, #764]	; (8002d38 <UART_SetConfig+0x380>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	f040 80bd 	bne.w	8002bba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7ff fe76 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8002a44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	461d      	mov	r5, r3
 8002a4a:	f04f 0600 	mov.w	r6, #0
 8002a4e:	46a8      	mov	r8, r5
 8002a50:	46b1      	mov	r9, r6
 8002a52:	eb18 0308 	adds.w	r3, r8, r8
 8002a56:	eb49 0409 	adc.w	r4, r9, r9
 8002a5a:	4698      	mov	r8, r3
 8002a5c:	46a1      	mov	r9, r4
 8002a5e:	eb18 0805 	adds.w	r8, r8, r5
 8002a62:	eb49 0906 	adc.w	r9, r9, r6
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a7a:	4688      	mov	r8, r1
 8002a7c:	4691      	mov	r9, r2
 8002a7e:	eb18 0005 	adds.w	r0, r8, r5
 8002a82:	eb49 0106 	adc.w	r1, r9, r6
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	f04f 0600 	mov.w	r6, #0
 8002a90:	196b      	adds	r3, r5, r5
 8002a92:	eb46 0406 	adc.w	r4, r6, r6
 8002a96:	461a      	mov	r2, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	f7fd fb9d 	bl	80001d8 <__aeabi_uldivmod>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4ba5      	ldr	r3, [pc, #660]	; (8002d3c <UART_SetConfig+0x384>)
 8002aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	f04f 0600 	mov.w	r6, #0
 8002ab8:	46a9      	mov	r9, r5
 8002aba:	46b2      	mov	sl, r6
 8002abc:	eb19 0309 	adds.w	r3, r9, r9
 8002ac0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ac4:	4699      	mov	r9, r3
 8002ac6:	46a2      	mov	sl, r4
 8002ac8:	eb19 0905 	adds.w	r9, r9, r5
 8002acc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002adc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ae0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ae4:	4689      	mov	r9, r1
 8002ae6:	4692      	mov	sl, r2
 8002ae8:	eb19 0005 	adds.w	r0, r9, r5
 8002aec:	eb4a 0106 	adc.w	r1, sl, r6
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	461d      	mov	r5, r3
 8002af6:	f04f 0600 	mov.w	r6, #0
 8002afa:	196b      	adds	r3, r5, r5
 8002afc:	eb46 0406 	adc.w	r4, r6, r6
 8002b00:	461a      	mov	r2, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	f7fd fb68 	bl	80001d8 <__aeabi_uldivmod>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	; (8002d3c <UART_SetConfig+0x384>)
 8002b10:	fba3 1302 	umull	r1, r3, r3, r2
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	2164      	movs	r1, #100	; 0x64
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	3332      	adds	r3, #50	; 0x32
 8002b22:	4a86      	ldr	r2, [pc, #536]	; (8002d3c <UART_SetConfig+0x384>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b30:	4498      	add	r8, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	461d      	mov	r5, r3
 8002b36:	f04f 0600 	mov.w	r6, #0
 8002b3a:	46a9      	mov	r9, r5
 8002b3c:	46b2      	mov	sl, r6
 8002b3e:	eb19 0309 	adds.w	r3, r9, r9
 8002b42:	eb4a 040a 	adc.w	r4, sl, sl
 8002b46:	4699      	mov	r9, r3
 8002b48:	46a2      	mov	sl, r4
 8002b4a:	eb19 0905 	adds.w	r9, r9, r5
 8002b4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b66:	4689      	mov	r9, r1
 8002b68:	4692      	mov	sl, r2
 8002b6a:	eb19 0005 	adds.w	r0, r9, r5
 8002b6e:	eb4a 0106 	adc.w	r1, sl, r6
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	461d      	mov	r5, r3
 8002b78:	f04f 0600 	mov.w	r6, #0
 8002b7c:	196b      	adds	r3, r5, r5
 8002b7e:	eb46 0406 	adc.w	r4, r6, r6
 8002b82:	461a      	mov	r2, r3
 8002b84:	4623      	mov	r3, r4
 8002b86:	f7fd fb27 	bl	80001d8 <__aeabi_uldivmod>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <UART_SetConfig+0x384>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2164      	movs	r1, #100	; 0x64
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <UART_SetConfig+0x384>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 0207 	and.w	r2, r3, #7
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4442      	add	r2, r8
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e26f      	b.n	800309a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bba:	f7ff fda5 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	f04f 0600 	mov.w	r6, #0
 8002bc8:	46a8      	mov	r8, r5
 8002bca:	46b1      	mov	r9, r6
 8002bcc:	eb18 0308 	adds.w	r3, r8, r8
 8002bd0:	eb49 0409 	adc.w	r4, r9, r9
 8002bd4:	4698      	mov	r8, r3
 8002bd6:	46a1      	mov	r9, r4
 8002bd8:	eb18 0805 	adds.w	r8, r8, r5
 8002bdc:	eb49 0906 	adc.w	r9, r9, r6
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bf0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bf4:	4688      	mov	r8, r1
 8002bf6:	4691      	mov	r9, r2
 8002bf8:	eb18 0005 	adds.w	r0, r8, r5
 8002bfc:	eb49 0106 	adc.w	r1, r9, r6
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	461d      	mov	r5, r3
 8002c06:	f04f 0600 	mov.w	r6, #0
 8002c0a:	196b      	adds	r3, r5, r5
 8002c0c:	eb46 0406 	adc.w	r4, r6, r6
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	f7fd fae0 	bl	80001d8 <__aeabi_uldivmod>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <UART_SetConfig+0x384>)
 8002c20:	fba3 2302 	umull	r2, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	461d      	mov	r5, r3
 8002c2e:	f04f 0600 	mov.w	r6, #0
 8002c32:	46a9      	mov	r9, r5
 8002c34:	46b2      	mov	sl, r6
 8002c36:	eb19 0309 	adds.w	r3, r9, r9
 8002c3a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c3e:	4699      	mov	r9, r3
 8002c40:	46a2      	mov	sl, r4
 8002c42:	eb19 0905 	adds.w	r9, r9, r5
 8002c46:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c5e:	4689      	mov	r9, r1
 8002c60:	4692      	mov	sl, r2
 8002c62:	eb19 0005 	adds.w	r0, r9, r5
 8002c66:	eb4a 0106 	adc.w	r1, sl, r6
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	461d      	mov	r5, r3
 8002c70:	f04f 0600 	mov.w	r6, #0
 8002c74:	196b      	adds	r3, r5, r5
 8002c76:	eb46 0406 	adc.w	r4, r6, r6
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	f7fd faab 	bl	80001d8 <__aeabi_uldivmod>
 8002c82:	4603      	mov	r3, r0
 8002c84:	460c      	mov	r4, r1
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <UART_SetConfig+0x384>)
 8002c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	2164      	movs	r1, #100	; 0x64
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	3332      	adds	r3, #50	; 0x32
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <UART_SetConfig+0x384>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002caa:	4498      	add	r8, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	461d      	mov	r5, r3
 8002cb0:	f04f 0600 	mov.w	r6, #0
 8002cb4:	46a9      	mov	r9, r5
 8002cb6:	46b2      	mov	sl, r6
 8002cb8:	eb19 0309 	adds.w	r3, r9, r9
 8002cbc:	eb4a 040a 	adc.w	r4, sl, sl
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	46a2      	mov	sl, r4
 8002cc4:	eb19 0905 	adds.w	r9, r9, r5
 8002cc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ce0:	4689      	mov	r9, r1
 8002ce2:	4692      	mov	sl, r2
 8002ce4:	eb19 0005 	adds.w	r0, r9, r5
 8002ce8:	eb4a 0106 	adc.w	r1, sl, r6
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	f04f 0600 	mov.w	r6, #0
 8002cf6:	196b      	adds	r3, r5, r5
 8002cf8:	eb46 0406 	adc.w	r4, r6, r6
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	f7fd fa6a 	bl	80001d8 <__aeabi_uldivmod>
 8002d04:	4603      	mov	r3, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <UART_SetConfig+0x384>)
 8002d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	2164      	movs	r1, #100	; 0x64
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	3332      	adds	r3, #50	; 0x32
 8002d1e:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <UART_SetConfig+0x384>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	f003 0207 	and.w	r2, r3, #7
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4442      	add	r2, r8
 8002d30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d32:	e1b2      	b.n	800309a <UART_SetConfig+0x6e2>
 8002d34:	40011000 	.word	0x40011000
 8002d38:	40011400 	.word	0x40011400
 8002d3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4ad7      	ldr	r2, [pc, #860]	; (80030a4 <UART_SetConfig+0x6ec>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d005      	beq.n	8002d56 <UART_SetConfig+0x39e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4ad6      	ldr	r2, [pc, #856]	; (80030a8 <UART_SetConfig+0x6f0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	f040 80d1 	bne.w	8002ef8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d56:	f7ff fceb 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8002d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	469a      	mov	sl, r3
 8002d60:	f04f 0b00 	mov.w	fp, #0
 8002d64:	46d0      	mov	r8, sl
 8002d66:	46d9      	mov	r9, fp
 8002d68:	eb18 0308 	adds.w	r3, r8, r8
 8002d6c:	eb49 0409 	adc.w	r4, r9, r9
 8002d70:	4698      	mov	r8, r3
 8002d72:	46a1      	mov	r9, r4
 8002d74:	eb18 080a 	adds.w	r8, r8, sl
 8002d78:	eb49 090b 	adc.w	r9, r9, fp
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d90:	4688      	mov	r8, r1
 8002d92:	4691      	mov	r9, r2
 8002d94:	eb1a 0508 	adds.w	r5, sl, r8
 8002d98:	eb4b 0609 	adc.w	r6, fp, r9
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	0094      	lsls	r4, r2, #2
 8002db0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002db4:	008b      	lsls	r3, r1, #2
 8002db6:	461a      	mov	r2, r3
 8002db8:	4623      	mov	r3, r4
 8002dba:	4628      	mov	r0, r5
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	f7fd fa0b 	bl	80001d8 <__aeabi_uldivmod>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4bb8      	ldr	r3, [pc, #736]	; (80030ac <UART_SetConfig+0x6f4>)
 8002dca:	fba3 2302 	umull	r2, r3, r3, r2
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	469b      	mov	fp, r3
 8002dd8:	f04f 0c00 	mov.w	ip, #0
 8002ddc:	46d9      	mov	r9, fp
 8002dde:	46e2      	mov	sl, ip
 8002de0:	eb19 0309 	adds.w	r3, r9, r9
 8002de4:	eb4a 040a 	adc.w	r4, sl, sl
 8002de8:	4699      	mov	r9, r3
 8002dea:	46a2      	mov	sl, r4
 8002dec:	eb19 090b 	adds.w	r9, r9, fp
 8002df0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e08:	4689      	mov	r9, r1
 8002e0a:	4692      	mov	sl, r2
 8002e0c:	eb1b 0509 	adds.w	r5, fp, r9
 8002e10:	eb4c 060a 	adc.w	r6, ip, sl
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0094      	lsls	r4, r2, #2
 8002e28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e2c:	008b      	lsls	r3, r1, #2
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4623      	mov	r3, r4
 8002e32:	4628      	mov	r0, r5
 8002e34:	4631      	mov	r1, r6
 8002e36:	f7fd f9cf 	bl	80001d8 <__aeabi_uldivmod>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b9a      	ldr	r3, [pc, #616]	; (80030ac <UART_SetConfig+0x6f4>)
 8002e42:	fba3 1302 	umull	r1, r3, r3, r2
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2164      	movs	r1, #100	; 0x64
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	3332      	adds	r3, #50	; 0x32
 8002e54:	4a95      	ldr	r2, [pc, #596]	; (80030ac <UART_SetConfig+0x6f4>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e60:	4498      	add	r8, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	469b      	mov	fp, r3
 8002e66:	f04f 0c00 	mov.w	ip, #0
 8002e6a:	46d9      	mov	r9, fp
 8002e6c:	46e2      	mov	sl, ip
 8002e6e:	eb19 0309 	adds.w	r3, r9, r9
 8002e72:	eb4a 040a 	adc.w	r4, sl, sl
 8002e76:	4699      	mov	r9, r3
 8002e78:	46a2      	mov	sl, r4
 8002e7a:	eb19 090b 	adds.w	r9, r9, fp
 8002e7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e96:	4689      	mov	r9, r1
 8002e98:	4692      	mov	sl, r2
 8002e9a:	eb1b 0509 	adds.w	r5, fp, r9
 8002e9e:	eb4c 060a 	adc.w	r6, ip, sl
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	f04f 0400 	mov.w	r4, #0
 8002eb4:	0094      	lsls	r4, r2, #2
 8002eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002eba:	008b      	lsls	r3, r1, #2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	f7fd f988 	bl	80001d8 <__aeabi_uldivmod>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b77      	ldr	r3, [pc, #476]	; (80030ac <UART_SetConfig+0x6f4>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	; 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	3332      	adds	r3, #50	; 0x32
 8002ee2:	4a72      	ldr	r2, [pc, #456]	; (80030ac <UART_SetConfig+0x6f4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4442      	add	r2, r8
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	e0d0      	b.n	800309a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef8:	f7ff fc06 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8002efc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	469a      	mov	sl, r3
 8002f02:	f04f 0b00 	mov.w	fp, #0
 8002f06:	46d0      	mov	r8, sl
 8002f08:	46d9      	mov	r9, fp
 8002f0a:	eb18 0308 	adds.w	r3, r8, r8
 8002f0e:	eb49 0409 	adc.w	r4, r9, r9
 8002f12:	4698      	mov	r8, r3
 8002f14:	46a1      	mov	r9, r4
 8002f16:	eb18 080a 	adds.w	r8, r8, sl
 8002f1a:	eb49 090b 	adc.w	r9, r9, fp
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f32:	4688      	mov	r8, r1
 8002f34:	4691      	mov	r9, r2
 8002f36:	eb1a 0508 	adds.w	r5, sl, r8
 8002f3a:	eb4b 0609 	adc.w	r6, fp, r9
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4619      	mov	r1, r3
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	0094      	lsls	r4, r2, #2
 8002f52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f56:	008b      	lsls	r3, r1, #2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	4631      	mov	r1, r6
 8002f60:	f7fd f93a 	bl	80001d8 <__aeabi_uldivmod>
 8002f64:	4603      	mov	r3, r0
 8002f66:	460c      	mov	r4, r1
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b50      	ldr	r3, [pc, #320]	; (80030ac <UART_SetConfig+0x6f4>)
 8002f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	469b      	mov	fp, r3
 8002f7a:	f04f 0c00 	mov.w	ip, #0
 8002f7e:	46d9      	mov	r9, fp
 8002f80:	46e2      	mov	sl, ip
 8002f82:	eb19 0309 	adds.w	r3, r9, r9
 8002f86:	eb4a 040a 	adc.w	r4, sl, sl
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	46a2      	mov	sl, r4
 8002f8e:	eb19 090b 	adds.w	r9, r9, fp
 8002f92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002faa:	4689      	mov	r9, r1
 8002fac:	4692      	mov	sl, r2
 8002fae:	eb1b 0509 	adds.w	r5, fp, r9
 8002fb2:	eb4c 060a 	adc.w	r6, ip, sl
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	f04f 0400 	mov.w	r4, #0
 8002fc8:	0094      	lsls	r4, r2, #2
 8002fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fce:	008b      	lsls	r3, r1, #2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	4631      	mov	r1, r6
 8002fd8:	f7fd f8fe 	bl	80001d8 <__aeabi_uldivmod>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b32      	ldr	r3, [pc, #200]	; (80030ac <UART_SetConfig+0x6f4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	; 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a2d      	ldr	r2, [pc, #180]	; (80030ac <UART_SetConfig+0x6f4>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003002:	4498      	add	r8, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	469b      	mov	fp, r3
 8003008:	f04f 0c00 	mov.w	ip, #0
 800300c:	46d9      	mov	r9, fp
 800300e:	46e2      	mov	sl, ip
 8003010:	eb19 0309 	adds.w	r3, r9, r9
 8003014:	eb4a 040a 	adc.w	r4, sl, sl
 8003018:	4699      	mov	r9, r3
 800301a:	46a2      	mov	sl, r4
 800301c:	eb19 090b 	adds.w	r9, r9, fp
 8003020:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003030:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003034:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003038:	4689      	mov	r9, r1
 800303a:	4692      	mov	sl, r2
 800303c:	eb1b 0509 	adds.w	r5, fp, r9
 8003040:	eb4c 060a 	adc.w	r6, ip, sl
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4619      	mov	r1, r3
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	f04f 0400 	mov.w	r4, #0
 8003056:	0094      	lsls	r4, r2, #2
 8003058:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800305c:	008b      	lsls	r3, r1, #2
 800305e:	461a      	mov	r2, r3
 8003060:	4623      	mov	r3, r4
 8003062:	4628      	mov	r0, r5
 8003064:	4631      	mov	r1, r6
 8003066:	f7fd f8b7 	bl	80001d8 <__aeabi_uldivmod>
 800306a:	4603      	mov	r3, r0
 800306c:	460c      	mov	r4, r1
 800306e:	461a      	mov	r2, r3
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <UART_SetConfig+0x6f4>)
 8003072:	fba3 1302 	umull	r1, r3, r3, r2
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2164      	movs	r1, #100	; 0x64
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	3332      	adds	r3, #50	; 0x32
 8003084:	4a09      	ldr	r2, [pc, #36]	; (80030ac <UART_SetConfig+0x6f4>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4442      	add	r2, r8
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	e7ff      	b.n	800309a <UART_SetConfig+0x6e2>
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a4:	40011000 	.word	0x40011000
 80030a8:	40011400 	.word	0x40011400
 80030ac:	51eb851f 	.word	0x51eb851f

080030b0 <__libc_init_array>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	4e0d      	ldr	r6, [pc, #52]	; (80030e8 <__libc_init_array+0x38>)
 80030b4:	4c0d      	ldr	r4, [pc, #52]	; (80030ec <__libc_init_array+0x3c>)
 80030b6:	1ba4      	subs	r4, r4, r6
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	2500      	movs	r5, #0
 80030bc:	42a5      	cmp	r5, r4
 80030be:	d109      	bne.n	80030d4 <__libc_init_array+0x24>
 80030c0:	4e0b      	ldr	r6, [pc, #44]	; (80030f0 <__libc_init_array+0x40>)
 80030c2:	4c0c      	ldr	r4, [pc, #48]	; (80030f4 <__libc_init_array+0x44>)
 80030c4:	f000 f818 	bl	80030f8 <_init>
 80030c8:	1ba4      	subs	r4, r4, r6
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	2500      	movs	r5, #0
 80030ce:	42a5      	cmp	r5, r4
 80030d0:	d105      	bne.n	80030de <__libc_init_array+0x2e>
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
 80030d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030d8:	4798      	blx	r3
 80030da:	3501      	adds	r5, #1
 80030dc:	e7ee      	b.n	80030bc <__libc_init_array+0xc>
 80030de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e2:	4798      	blx	r3
 80030e4:	3501      	adds	r5, #1
 80030e6:	e7f2      	b.n	80030ce <__libc_init_array+0x1e>
 80030e8:	08003180 	.word	0x08003180
 80030ec:	08003180 	.word	0x08003180
 80030f0:	08003180 	.word	0x08003180
 80030f4:	08003184 	.word	0x08003184

080030f8 <_init>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	bf00      	nop
 80030fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fe:	bc08      	pop	{r3}
 8003100:	469e      	mov	lr, r3
 8003102:	4770      	bx	lr

08003104 <_fini>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	bf00      	nop
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr
