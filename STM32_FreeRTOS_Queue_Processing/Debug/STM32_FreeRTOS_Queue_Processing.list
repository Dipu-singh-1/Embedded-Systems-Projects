
STM32_FreeRTOS_Queue_Processing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf0  08004bf0  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08004bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004130  200000f8  08004cf0  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004228  08004cf0  00024228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4b9  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021e8  00000000  00000000  0002d5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a70  00000000  00000000  0002f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  00030240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b48  00000000  00000000  00030ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d3a  00000000  00000000  000526f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cab82  00000000  00000000  0005c42a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126fac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002934  00000000  00000000  00127028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b4c 	.word	0x08004b4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08004b4c 	.word	0x08004b4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000114 	.word	0x20000114
 8000510:	20000168 	.word	0x20000168

08000514 <main>:
\r\nRTC_PRINT_DATETIME ----> 6 \
\r\nEXIT_APP           ----> 0 \
\r\nType your option here : "};


int main(void){
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8

  HAL_Init();
 800051a:	f000 fbb3 	bl	8000c84 <HAL_Init>

  SystemClock_Config();
 800051e:	f000 f883 	bl	8000628 <SystemClock_Config>

  MX_GPIO_Init();
 8000522:	f000 f90b 	bl	800073c <MX_GPIO_Init>
  MX_UART5_Init();
 8000526:	f000 f8df 	bl	80006e8 <MX_UART5_Init>

  command_queue = xQueueCreate(10, sizeof(APP_CMD_t*));
 800052a:	2200      	movs	r2, #0
 800052c:	2104      	movs	r1, #4
 800052e:	200a      	movs	r0, #10
 8000530:	f002 fbb8 	bl	8002ca4 <xQueueGenericCreate>
 8000534:	4602      	mov	r2, r0
 8000536:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <main+0xcc>)
 8000538:	601a      	str	r2, [r3, #0]
  uart_write_queue = xQueueCreate(10, sizeof(char*));
 800053a:	2200      	movs	r2, #0
 800053c:	2104      	movs	r1, #4
 800053e:	200a      	movs	r0, #10
 8000540:	f002 fbb0 	bl	8002ca4 <xQueueGenericCreate>
 8000544:	4602      	mov	r2, r0
 8000546:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <main+0xd0>)
 8000548:	601a      	str	r2, [r3, #0]

  // Non-blocking Receive, and it enables the receive interrupt
  HAL_UART_Receive_IT(&huart5, &huart_data, 1);
 800054a:	2201      	movs	r2, #1
 800054c:	4926      	ldr	r1, [pc, #152]	; (80005e8 <main+0xd4>)
 800054e:	4827      	ldr	r0, [pc, #156]	; (80005ec <main+0xd8>)
 8000550:	f001 fc3a 	bl	8001dc8 <HAL_UART_Receive_IT>

  if(command_queue != NULL || uart_write_queue != NULL){
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <main+0xcc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d103      	bne.n	8000564 <main+0x50>
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <main+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d02e      	beq.n	80005c2 <main+0xae>
	  // create all tasks
	  xTaskCreate( vTask_cmd_task,"CMD_TASK", 500,NULL,1,&cmd_task );
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <main+0xdc>)
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	2301      	movs	r3, #1
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2300      	movs	r3, #0
 800056e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000572:	4920      	ldr	r1, [pc, #128]	; (80005f4 <main+0xe0>)
 8000574:	4820      	ldr	r0, [pc, #128]	; (80005f8 <main+0xe4>)
 8000576:	f002 ff33 	bl	80033e0 <xTaskCreate>
	  xTaskCreate( vTask_menu_print,"MENU_TASK", 500,NULL,1,&menu_print_task );
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <main+0xe8>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000588:	491d      	ldr	r1, [pc, #116]	; (8000600 <main+0xec>)
 800058a:	481e      	ldr	r0, [pc, #120]	; (8000604 <main+0xf0>)
 800058c:	f002 ff28 	bl	80033e0 <xTaskCreate>
	  xTaskCreate( vTask_cmd_processing,"CMD_PRO_TASK", 500,NULL,1,&cmd_processing_task );
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <main+0xf4>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2301      	movs	r3, #1
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800059e:	491b      	ldr	r1, [pc, #108]	; (800060c <main+0xf8>)
 80005a0:	481b      	ldr	r0, [pc, #108]	; (8000610 <main+0xfc>)
 80005a2:	f002 ff1d 	bl	80033e0 <xTaskCreate>
	  xTaskCreate( vTask_uart_write,"UART_TASK", 500,NULL,1,&uart_write_task );
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <main+0x100>)
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005b4:	4918      	ldr	r1, [pc, #96]	; (8000618 <main+0x104>)
 80005b6:	4819      	ldr	r0, [pc, #100]	; (800061c <main+0x108>)
 80005b8:	f002 ff12 	bl	80033e0 <xTaskCreate>
	  //4. Start the scheduler.
	  vTaskStartScheduler();
 80005bc:	f003 f846 	bl	800364c <vTaskStartScheduler>
 80005c0:	e00c      	b.n	80005dc <main+0xc8>
  }else{
	  sprintf(usr_msg, "Queue creation failed\r\n");
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <main+0x10c>)
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <main+0x110>)
 80005c6:	4614      	mov	r4, r2
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005d2:	e884 0003 	stmia.w	r4, {r0, r1}
	  printmsg(usr_msg);
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <main+0x10c>)
 80005d8:	f000 fa30 	bl	8000a3c <printmsg>
  }

  while (1);
 80005dc:	e7fe      	b.n	80005dc <main+0xc8>
 80005de:	bf00      	nop
 80005e0:	20000474 	.word	0x20000474
 80005e4:	20000478 	.word	0x20000478
 80005e8:	20004220 	.word	0x20004220
 80005ec:	200041cc 	.word	0x200041cc
 80005f0:	20000464 	.word	0x20000464
 80005f4:	08004b64 	.word	0x08004b64
 80005f8:	080009c1 	.word	0x080009c1
 80005fc:	20000468 	.word	0x20000468
 8000600:	08004b70 	.word	0x08004b70
 8000604:	080009cd 	.word	0x080009cd
 8000608:	2000046c 	.word	0x2000046c
 800060c:	08004b7c 	.word	0x08004b7c
 8000610:	08000a05 	.word	0x08000a05
 8000614:	20000470 	.word	0x20000470
 8000618:	08004b8c 	.word	0x08004b8c
 800061c:	08000a11 	.word	0x08000a11
 8000620:	20000368 	.word	0x20000368
 8000624:	08004b98 	.word	0x08004b98

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fa7f 	bl	8004b3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemClock_Config+0xb8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <SystemClock_Config+0xb8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemClock_Config+0xb8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemClock_Config+0xbc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <SystemClock_Config+0xbc>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemClock_Config+0xbc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fe4d 	bl	8001338 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a4:	f000 f9e0 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f8a6 	bl	8001818 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d2:	f000 f9c9 	bl	8000a68 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_UART5_Init>:
/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_UART5_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_UART5_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_UART5_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_UART5_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_UART5_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_UART5_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_UART5_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_UART5_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_UART5_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart5) != HAL_OK){
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_UART5_Init+0x4c>)
 8000720:	f001 fa6c 	bl	8001bfc <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_UART5_Init+0x46>
	  Error_Handler();
 800072a:	f000 f99d 	bl	8000a68 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200041cc 	.word	0x200041cc
 8000738:	40005000 	.word	0x40005000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b78      	ldr	r3, [pc, #480]	; (8000938 <MX_GPIO_Init+0x1fc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a77      	ldr	r2, [pc, #476]	; (8000938 <MX_GPIO_Init+0x1fc>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b75      	ldr	r3, [pc, #468]	; (8000938 <MX_GPIO_Init+0x1fc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b71      	ldr	r3, [pc, #452]	; (8000938 <MX_GPIO_Init+0x1fc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a70      	ldr	r2, [pc, #448]	; (8000938 <MX_GPIO_Init+0x1fc>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b6e      	ldr	r3, [pc, #440]	; (8000938 <MX_GPIO_Init+0x1fc>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b6a      	ldr	r3, [pc, #424]	; (8000938 <MX_GPIO_Init+0x1fc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a69      	ldr	r2, [pc, #420]	; (8000938 <MX_GPIO_Init+0x1fc>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b67      	ldr	r3, [pc, #412]	; (8000938 <MX_GPIO_Init+0x1fc>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b63      	ldr	r3, [pc, #396]	; (8000938 <MX_GPIO_Init+0x1fc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a62      	ldr	r2, [pc, #392]	; (8000938 <MX_GPIO_Init+0x1fc>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b60      	ldr	r3, [pc, #384]	; (8000938 <MX_GPIO_Init+0x1fc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <MX_GPIO_Init+0x1fc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5b      	ldr	r2, [pc, #364]	; (8000938 <MX_GPIO_Init+0x1fc>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b59      	ldr	r3, [pc, #356]	; (8000938 <MX_GPIO_Init+0x1fc>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2101      	movs	r1, #1
 80007e2:	4856      	ldr	r0, [pc, #344]	; (800093c <MX_GPIO_Init+0x200>)
 80007e4:	f000 fd8e 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e8:	2200      	movs	r2, #0
 80007ea:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007ee:	4854      	ldr	r0, [pc, #336]	; (8000940 <MX_GPIO_Init+0x204>)
 80007f0:	f000 fd88 	bl	8001304 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	484c      	ldr	r0, [pc, #304]	; (800093c <MX_GPIO_Init+0x200>)
 800080c:	f000 fbe0 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000810:	2308      	movs	r3, #8
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000820:	2305      	movs	r3, #5
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4844      	ldr	r0, [pc, #272]	; (800093c <MX_GPIO_Init+0x200>)
 800082c:	f000 fbd0 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000834:	4b43      	ldr	r3, [pc, #268]	; (8000944 <MX_GPIO_Init+0x208>)
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4841      	ldr	r0, [pc, #260]	; (8000948 <MX_GPIO_Init+0x20c>)
 8000844:	f000 fbc4 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000848:	2304      	movs	r3, #4
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	483c      	ldr	r0, [pc, #240]	; (800094c <MX_GPIO_Init+0x210>)
 800085c:	f000 fbb8 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000872:	2305      	movs	r3, #5
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4833      	ldr	r0, [pc, #204]	; (800094c <MX_GPIO_Init+0x210>)
 800087e:	f000 fba7 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000882:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000886:	617b      	str	r3, [r7, #20]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4829      	ldr	r0, [pc, #164]	; (8000940 <MX_GPIO_Init+0x204>)
 800089c:	f000 fb98 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4824      	ldr	r0, [pc, #144]	; (8000948 <MX_GPIO_Init+0x20c>)
 80008b6:	f000 fb8b 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008cc:	230a      	movs	r3, #10
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	481c      	ldr	r0, [pc, #112]	; (8000948 <MX_GPIO_Init+0x20c>)
 80008d8:	f000 fb7a 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008dc:	2320      	movs	r3, #32
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4814      	ldr	r0, [pc, #80]	; (8000940 <MX_GPIO_Init+0x204>)
 80008f0:	f000 fb6e 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80008f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fa:	2312      	movs	r3, #18
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000906:	2304      	movs	r3, #4
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <MX_GPIO_Init+0x210>)
 8000912:	f000 fb5d 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000916:	2302      	movs	r3, #2
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_GPIO_Init+0x214>)
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <MX_GPIO_Init+0x218>)
 800092a:	f000 fb51 	bl	8000fd0 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020800 	.word	0x40020800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	10110000 	.word	0x10110000
 8000948:	40020000 	.word	0x40020000
 800094c:	40020400 	.word	0x40020400
 8000950:	10120000 	.word	0x10120000
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af02      	add	r7, sp, #8
 800095e:	6078      	str	r0, [r7, #4]

	command_buffer[command_len++] = huart_data & 0xFF;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_RxCpltCallback+0x50>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	b2d1      	uxtb	r1, r2
 8000968:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_UART_RxCpltCallback+0x50>)
 800096a:	7011      	strb	r1, [r2, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_UART_RxCpltCallback+0x54>)
 8000970:	7819      	ldrb	r1, [r3, #0]
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_UART_RxCpltCallback+0x58>)
 8000974:	5499      	strb	r1, [r3, r2]

	printmsg("\nHello from Callback\n");
 8000976:	480f      	ldr	r0, [pc, #60]	; (80009b4 <HAL_UART_RxCpltCallback+0x5c>)
 8000978:	f000 f860 	bl	8000a3c <printmsg>
	// have to define a flag to stop the enable receive interrupt
	if(huart_data != '\r'){
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_UART_RxCpltCallback+0x54>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b0d      	cmp	r3, #13
 8000982:	d00d      	beq.n	80009a0 <HAL_UART_RxCpltCallback+0x48>
		HAL_UART_Receive_IT(&huart5, &huart_data, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	4909      	ldr	r1, [pc, #36]	; (80009ac <HAL_UART_RxCpltCallback+0x54>)
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <HAL_UART_RxCpltCallback+0x60>)
 800098a:	f001 fa1d 	bl	8001dc8 <HAL_UART_Receive_IT>
		xTaskNotifyFromISR(cmd_task,0,eNoAction,NULL);
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_UART_RxCpltCallback+0x64>)
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	2300      	movs	r3, #0
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	f003 fb46 	bl	800402c <xTaskGenericNotifyFromISR>
	}
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000047c 	.word	0x2000047c
 80009ac:	20004220 	.word	0x20004220
 80009b0:	2000420c 	.word	0x2000420c
 80009b4:	08004bb0 	.word	0x08004bb0
 80009b8:	200041cc 	.word	0x200041cc
 80009bc:	20000464 	.word	0x20000464

080009c0 <vTask_cmd_task>:

void vTask_cmd_task(void* params){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

	while(1){
 80009c8:	e7fe      	b.n	80009c8 <vTask_cmd_task+0x8>
	...

080009cc <vTask_menu_print>:

	}

}

void vTask_menu_print(void* params){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

	char *pData = menu;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <vTask_menu_print+0x30>)
 80009d6:	60fb      	str	r3, [r7, #12]

	while(1){
		// send the menu to the queue
		xQueueSend(uart_write_queue, &pData, portMAX_DELAY);
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <vTask_menu_print+0x34>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	f107 010c 	add.w	r1, r7, #12
 80009e0:	2300      	movs	r3, #0
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	f002 f9bb 	bl	8002d60 <xQueueGenericSend>
		// block this task until another one notifies it
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2000      	movs	r0, #0
 80009f4:	f003 fac0 	bl	8003f78 <xTaskNotifyWait>
		xQueueSend(uart_write_queue, &pData, portMAX_DELAY);
 80009f8:	e7ee      	b.n	80009d8 <vTask_menu_print+0xc>
 80009fa:	bf00      	nop
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000478 	.word	0x20000478

08000a04 <vTask_cmd_processing>:
	}

}

void vTask_cmd_processing(void* params){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

	while(1){
 8000a0c:	e7fe      	b.n	8000a0c <vTask_cmd_processing+0x8>
	...

08000a10 <vTask_uart_write>:

	}

}

void vTask_uart_write(void* params){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

	char *pData = NULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
	while(1){
		// block this task until the queue is not empty
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <vTask_uart_write+0x28>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f107 010c 	add.w	r1, r7, #12
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fa93 	bl	8002f54 <xQueueReceive>
		// send the data of the queue via UART
		printmsg(pData);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f803 	bl	8000a3c <printmsg>
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8000a36:	e7f1      	b.n	8000a1c <vTask_uart_write+0xc>
 8000a38:	20000478 	.word	0x20000478

08000a3c <printmsg>:
	}
}

void printmsg(char *msg){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fbc3 	bl	80001d0 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <printmsg+0x28>)
 8000a56:	f001 f91e 	bl	8001c96 <HAL_UART_Transmit>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200041cc 	.word	0x200041cc

08000a68 <Error_Handler>:

void Error_Handler(void){
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i

  __disable_irq();
  while (1);
 8000a6e:	e7fe      	b.n	8000a6e <Error_Handler+0x6>

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_MspInit+0x54>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	f06f 0001 	mvn.w	r0, #1
 8000ab6:	f000 fa32 	bl	8000f1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <HAL_UART_MspInit+0xd0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d152      	bne.n	8000b90 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_UART_MspInit+0xd4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b50:	2308      	movs	r3, #8
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <HAL_UART_MspInit+0xd8>)
 8000b5c:	f000 fa38 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b60:	2304      	movs	r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b70:	2308      	movs	r3, #8
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <HAL_UART_MspInit+0xdc>)
 8000b7c:	f000 fa28 	bl	8000fd0 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2105      	movs	r1, #5
 8000b84:	2035      	movs	r0, #53	; 0x35
 8000b86:	f000 f9ca 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000b8a:	2035      	movs	r0, #53	; 0x35
 8000b8c:	f000 f9e3 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005000 	.word	0x40005000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00

08000ba8 <UART5_IRQHandler>:

/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/

void UART5_IRQHandler(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart5);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <UART5_IRQHandler+0x10>)
 8000bae:	f001 f961 	bl	8001e74 <HAL_UART_IRQHandler>

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200041cc 	.word	0x200041cc

08000bbc <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f89c 	bl	8000d28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bf0:	f003 f920 	bl	8003e34 <xTaskGetSchedulerState>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d001      	beq.n	8000bfe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bfa:	f003 fd0d 	bl	8004618 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <SystemInit>:
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SystemInit+0x28>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <SystemInit+0x28>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SystemInit+0x28>)
 8000c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c36:	e003      	b.n	8000c40 <LoopCopyDataInit>

08000c38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c3e:	3104      	adds	r1, #4

08000c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c48:	d3f6      	bcc.n	8000c38 <CopyDataInit>
  ldr  r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c4c:	e002      	b.n	8000c54 <LoopFillZerobss>

08000c4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c50:	f842 3b04 	str.w	r3, [r2], #4

08000c54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c58:	d3f9      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd3 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f003 ff3d 	bl	8004adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fc57 	bl	8000514 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c6c:	08004bf8 	.word	0x08004bf8
  ldr  r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c74:	200000f8 	.word	0x200000f8
  ldr  r2, =_sbss
 8000c78:	200000f8 	.word	0x200000f8
  ldr  r3, = _ebss
 8000c7c:	20004228 	.word	0x20004228

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f92b 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff feda 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f943 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f90b 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000e8 	.word	0x200000e8
 8000d20:	200000f0 	.word	0x200000f0
 8000d24:	200000ec 	.word	0x200000ec

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	200000f0 	.word	0x200000f0
 8000d4c:	20004224 	.word	0x20004224

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20004224 	.word	0x20004224

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff29 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff3e 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff31 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d004      	beq.n	8000fa8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e00c      	b.n	8000fc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2205      	movs	r2, #5
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e16b      	b.n	80012c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 815a 	bne.w	80012be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d00b      	beq.n	800102a <HAL_GPIO_Init+0x5a>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101e:	2b11      	cmp	r3, #17
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b12      	cmp	r3, #18
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0xfc>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80b4 	beq.w	80012be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <HAL_GPIO_Init+0x308>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a5e      	ldr	r2, [pc, #376]	; (80012d8 <HAL_GPIO_Init+0x308>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <HAL_GPIO_Init+0x308>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a5a      	ldr	r2, [pc, #360]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_GPIO_Init+0x310>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x314>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <HAL_GPIO_Init+0x324>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_GPIO_Init+0x328>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_GPIO_Init+0x32c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20a>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00e      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011da:	2308      	movs	r3, #8
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4934      	ldr	r1, [pc, #208]	; (80012dc <HAL_GPIO_Init+0x30c>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123a:	4a31      	ldr	r2, [pc, #196]	; (8001300 <HAL_GPIO_Init+0x330>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_GPIO_Init+0x330>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_GPIO_Init+0x330>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae90 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e25b      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d075      	beq.n	8001442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001356:	4ba3      	ldr	r3, [pc, #652]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b04      	cmp	r3, #4
 8001360:	d00c      	beq.n	800137c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	4ba0      	ldr	r3, [pc, #640]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136a:	2b08      	cmp	r3, #8
 800136c:	d112      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	4b9d      	ldr	r3, [pc, #628]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137a:	d10b      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	4b99      	ldr	r3, [pc, #612]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d05b      	beq.n	8001440 <HAL_RCC_OscConfig+0x108>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d157      	bne.n	8001440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e236      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x74>
 800139e:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a90      	ldr	r2, [pc, #576]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e01d      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x98>
 80013b6:	4b8b      	ldr	r3, [pc, #556]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a8a      	ldr	r2, [pc, #552]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a87      	ldr	r2, [pc, #540]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
 80013d0:	4b84      	ldr	r3, [pc, #528]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a83      	ldr	r2, [pc, #524]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a80      	ldr	r2, [pc, #512]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcae 	bl	8000d50 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcaa 	bl	8000d50 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1fb      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0xc0>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fc9a 	bl	8000d50 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fc96 	bl	8000d50 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1e7      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0xe8>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d063      	beq.n	8001516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144e:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145a:	4b62      	ldr	r3, [pc, #392]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001462:	2b08      	cmp	r3, #8
 8001464:	d11c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d116      	bne.n	80014a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x152>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1bb      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4952      	ldr	r1, [pc, #328]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	e03a      	b.n	8001516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a8:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <HAL_RCC_OscConfig+0x2b0>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fc4f 	bl	8000d50 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc4b 	bl	8000d50 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e19c      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4940      	ldr	r1, [pc, #256]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <HAL_RCC_OscConfig+0x2b0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc2e 	bl	8000d50 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc2a 	bl	8000d50 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e17b      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d030      	beq.n	8001584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d016      	beq.n	8001558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fc0e 	bl	8000d50 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fc0a 	bl	8000d50 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e15b      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x200>
 8001556:	e015      	b.n	8001584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fbf7 	bl	8000d50 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fbf3 	bl	8000d50 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e144      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 800157a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a0 	beq.w	80016d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015be:	2301      	movs	r3, #1
 80015c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x2b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d121      	bne.n	8001612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_RCC_OscConfig+0x2b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_RCC_OscConfig+0x2b8>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015da:	f7ff fbb9 	bl	8000d50 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	e011      	b.n	8001606 <HAL_RCC_OscConfig+0x2ce>
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	42470000 	.word	0x42470000
 80015ec:	42470e80 	.word	0x42470e80
 80015f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f4:	f7ff fbac 	bl	8000d50 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0fd      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x4d4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x2f0>
 800161a:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a7c      	ldr	r2, [pc, #496]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
 8001626:	e01c      	b.n	8001662 <HAL_RCC_OscConfig+0x32a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b05      	cmp	r3, #5
 800162e:	d10c      	bne.n	800164a <HAL_RCC_OscConfig+0x312>
 8001630:	4b77      	ldr	r3, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	4a76      	ldr	r2, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6713      	str	r3, [r2, #112]	; 0x70
 800163c:	4b74      	ldr	r3, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	4a73      	ldr	r2, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
 8001648:	e00b      	b.n	8001662 <HAL_RCC_OscConfig+0x32a>
 800164a:	4b71      	ldr	r3, [pc, #452]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	4a70      	ldr	r2, [pc, #448]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	6713      	str	r3, [r2, #112]	; 0x70
 8001656:	4b6e      	ldr	r3, [pc, #440]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a6d      	ldr	r2, [pc, #436]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 800165c:	f023 0304 	bic.w	r3, r3, #4
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d015      	beq.n	8001696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166a:	f7ff fb71 	bl	8000d50 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fb6d 	bl	8000d50 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0bc      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	4b61      	ldr	r3, [pc, #388]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ee      	beq.n	8001672 <HAL_RCC_OscConfig+0x33a>
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb5b 	bl	8000d50 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fb57 	bl	8000d50 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0a6      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	4b56      	ldr	r3, [pc, #344]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ee      	bne.n	800169e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d105      	bne.n	80016d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c6:	4b52      	ldr	r3, [pc, #328]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a51      	ldr	r2, [pc, #324]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 80016cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8092 	beq.w	8001800 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016dc:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d05c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d141      	bne.n	8001774 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f0:	4b48      	ldr	r3, [pc, #288]	; (8001814 <HAL_RCC_OscConfig+0x4dc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fb2b 	bl	8000d50 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fb27 	bl	8000d50 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e078      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	019b      	lsls	r3, r3, #6
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	4933      	ldr	r1, [pc, #204]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_RCC_OscConfig+0x4dc>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fb00 	bl	8000d50 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff fafc 	bl	8000d50 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e04d      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x41c>
 8001772:	e045      	b.n	8001800 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x4dc>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fae9 	bl	8000d50 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff fae5 	bl	8000d50 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e036      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x44a>
 80017a0:	e02e      	b.n	8001800 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e029      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_RCC_OscConfig+0x4d8>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d11c      	bne.n	80017fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d115      	bne.n	80017fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d6:	4013      	ands	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017dc:	4293      	cmp	r3, r2
 80017de:	d10d      	bne.n	80017fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40007000 	.word	0x40007000
 8001810:	40023800 	.word	0x40023800
 8001814:	42470060 	.word	0x42470060

08001818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0cc      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d90c      	bls.n	8001854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0b8      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d020      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800186c:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001884:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800188e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	494d      	ldr	r1, [pc, #308]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d044      	beq.n	8001938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e07f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e06f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e067      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 0203 	bic.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4934      	ldr	r1, [pc, #208]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001908:	f7ff fa22 	bl	8000d50 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	e00a      	b.n	8001926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff fa1e 	bl	8000d50 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e04f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 020c 	and.w	r2, r3, #12
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	429a      	cmp	r2, r3
 8001936:	d1eb      	bne.n	8001910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d20c      	bcs.n	8001960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e032      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4916      	ldr	r1, [pc, #88]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	490e      	ldr	r1, [pc, #56]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800199e:	f000 f821 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 80019a2:	4601      	mov	r1, r0
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	fa21 f303 	lsr.w	r3, r1, r3
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f982 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08004bd0 	.word	0x08004bd0
 80019dc:	200000e8 	.word	0x200000e8
 80019e0:	200000ec 	.word	0x200000ec

080019e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d007      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x32>
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d008      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x38>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80b4 	bne.w	8001b78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a12:	60bb      	str	r3, [r7, #8]
       break;
 8001a14:	e0b3      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a16:	4b5e      	ldr	r3, [pc, #376]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a18:	60bb      	str	r3, [r7, #8]
      break;
 8001a1a:	e0b0      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a26:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d04a      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	099b      	lsrs	r3, r3, #6
 8001a38:	f04f 0400 	mov.w	r4, #0
 8001a3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	ea03 0501 	and.w	r5, r3, r1
 8001a48:	ea04 0602 	and.w	r6, r4, r2
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	4632      	mov	r2, r6
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f04f 0400 	mov.w	r4, #0
 8001a58:	0154      	lsls	r4, r2, #5
 8001a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a5e:	014b      	lsls	r3, r1, #5
 8001a60:	4619      	mov	r1, r3
 8001a62:	4622      	mov	r2, r4
 8001a64:	1b49      	subs	r1, r1, r5
 8001a66:	eb62 0206 	sbc.w	r2, r2, r6
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	f04f 0400 	mov.w	r4, #0
 8001a72:	0194      	lsls	r4, r2, #6
 8001a74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a78:	018b      	lsls	r3, r1, #6
 8001a7a:	1a5b      	subs	r3, r3, r1
 8001a7c:	eb64 0402 	sbc.w	r4, r4, r2
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	00e2      	lsls	r2, r4, #3
 8001a8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a8e:	00d9      	lsls	r1, r3, #3
 8001a90:	460b      	mov	r3, r1
 8001a92:	4614      	mov	r4, r2
 8001a94:	195b      	adds	r3, r3, r5
 8001a96:	eb44 0406 	adc.w	r4, r4, r6
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	0262      	lsls	r2, r4, #9
 8001aa4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001aa8:	0259      	lsls	r1, r3, #9
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4614      	mov	r4, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f04f 0400 	mov.w	r4, #0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4623      	mov	r3, r4
 8001abc:	f7fe fb90 	bl	80001e0 <__aeabi_uldivmod>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e049      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	099b      	lsrs	r3, r3, #6
 8001ace:	f04f 0400 	mov.w	r4, #0
 8001ad2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	ea03 0501 	and.w	r5, r3, r1
 8001ade:	ea04 0602 	and.w	r6, r4, r2
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	4632      	mov	r2, r6
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	f04f 0400 	mov.w	r4, #0
 8001aee:	0154      	lsls	r4, r2, #5
 8001af0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001af4:	014b      	lsls	r3, r1, #5
 8001af6:	4619      	mov	r1, r3
 8001af8:	4622      	mov	r2, r4
 8001afa:	1b49      	subs	r1, r1, r5
 8001afc:	eb62 0206 	sbc.w	r2, r2, r6
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f04f 0400 	mov.w	r4, #0
 8001b08:	0194      	lsls	r4, r2, #6
 8001b0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b0e:	018b      	lsls	r3, r1, #6
 8001b10:	1a5b      	subs	r3, r3, r1
 8001b12:	eb64 0402 	sbc.w	r4, r4, r2
 8001b16:	f04f 0100 	mov.w	r1, #0
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	00e2      	lsls	r2, r4, #3
 8001b20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b24:	00d9      	lsls	r1, r3, #3
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	195b      	adds	r3, r3, r5
 8001b2c:	eb44 0406 	adc.w	r4, r4, r6
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	02a2      	lsls	r2, r4, #10
 8001b3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b3e:	0299      	lsls	r1, r3, #10
 8001b40:	460b      	mov	r3, r1
 8001b42:	4614      	mov	r4, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	4621      	mov	r1, r4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f04f 0400 	mov.w	r4, #0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4623      	mov	r3, r4
 8001b52:	f7fe fb45 	bl	80001e0 <__aeabi_uldivmod>
 8001b56:	4603      	mov	r3, r0
 8001b58:	460c      	mov	r4, r1
 8001b5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	60bb      	str	r3, [r7, #8]
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b7a:	60bb      	str	r3, [r7, #8]
      break;
 8001b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	00f42400 	.word	0x00f42400
 8001b90:	007a1200 	.word	0x007a1200

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200000e8 	.word	0x200000e8

08001bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb0:	f7ff fff0 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	08004be0 	.word	0x08004be0

08001bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd8:	f7ff ffdc 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bdc:	4601      	mov	r1, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0b5b      	lsrs	r3, r3, #13
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08004be0 	.word	0x08004be0

08001bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e03f      	b.n	8001c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe ff50 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fb97 	bl	8002374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b088      	sub	sp, #32
 8001c9a:	af02      	add	r7, sp, #8
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	f040 8083 	bne.w	8001dbe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_UART_Transmit+0x2e>
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e07b      	b.n	8001dc0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_UART_Transmit+0x40>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e074      	b.n	8001dc0 <HAL_UART_Transmit+0x12a>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2221      	movs	r2, #33	; 0x21
 8001ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f830 	bl	8000d50 <HAL_GetTick>
 8001cf0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	88fa      	ldrh	r2, [r7, #6]
 8001cfc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001d06:	e042      	b.n	8001d8e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1e:	d122      	bne.n	8001d66 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2200      	movs	r2, #0
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f9b6 	bl	800209c <UART_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e042      	b.n	8001dc0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d4c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	e017      	b.n	8001d8e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3301      	adds	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	e013      	b.n	8001d8e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f993 	bl	800209c <UART_WaitOnFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e01f      	b.n	8001dc0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1b7      	bne.n	8001d08 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2140      	movs	r1, #64	; 0x40
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f97a 	bl	800209c <UART_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e006      	b.n	8001dc0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
  }
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d140      	bne.n	8001e64 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_UART_Receive_IT+0x26>
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e039      	b.n	8001e66 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_UART_Receive_IT+0x38>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e032      	b.n	8001e66 <HAL_UART_Receive_IT+0x9e>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2222      	movs	r2, #34	; 0x22
 8001e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0220 	orr.w	r2, r2, #32
 8001e5e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x52>
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f9d6 	bl	8002270 <UART_Receive_IT>
      return;
 8001ec4:	e0d1      	b.n	800206a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80b0 	beq.w	800202e <HAL_UART_IRQHandler+0x1ba>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <HAL_UART_IRQHandler+0x70>
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80a5 	beq.w	800202e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_UART_IRQHandler+0x90>
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_UART_IRQHandler+0xb0>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	f043 0202 	orr.w	r2, r3, #2
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_UART_IRQHandler+0xd0>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	f043 0204 	orr.w	r2, r3, #4
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00f      	beq.n	8001f6e <HAL_UART_IRQHandler+0xfa>
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d104      	bne.n	8001f62 <HAL_UART_IRQHandler+0xee>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	f043 0208 	orr.w	r2, r3, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d078      	beq.n	8002068 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_UART_IRQHandler+0x11c>
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f970 	bl	8002270 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <HAL_UART_IRQHandler+0x144>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d031      	beq.n	800201c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8b9 	bl	8002130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b40      	cmp	r3, #64	; 0x40
 8001fca:	d123      	bne.n	8002014 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fda:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_UART_IRQHandler+0x1fc>)
 8001fea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe ffca 	bl	8000f8a <HAL_DMA_Abort_IT>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d016      	beq.n	800202a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002006:	4610      	mov	r0, r2
 8002008:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800200a:	e00e      	b.n	800202a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f83b 	bl	8002088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002012:	e00a      	b.n	800202a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f837 	bl	8002088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800201a:	e006      	b.n	800202a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f833 	bl	8002088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002028:	e01e      	b.n	8002068 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800202a:	bf00      	nop
    return;
 800202c:	e01c      	b.n	8002068 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_UART_IRQHandler+0x1d6>
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8a6 	bl	8002194 <UART_Transmit_IT>
    return;
 8002048:	e00f      	b.n	800206a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_UART_IRQHandler+0x1f6>
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8ee 	bl	8002240 <UART_EndTransmit_IT>
    return;
 8002064:	bf00      	nop
 8002066:	e000      	b.n	800206a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002068:	bf00      	nop
  }
}
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	0800216d 	.word	0x0800216d

08002074 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ac:	e02c      	b.n	8002108 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d028      	beq.n	8002108 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <UART_WaitOnFlagUntilTimeout+0x30>
 80020bc:	f7fe fe48 	bl	8000d50 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d21d      	bcs.n	8002108 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e00f      	b.n	8002128 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4013      	ands	r3, r2
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	429a      	cmp	r2, r3
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	429a      	cmp	r2, r3
 8002124:	d0c3      	beq.n	80020ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002146:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff ff7e 	bl	8002088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b21      	cmp	r3, #33	; 0x21
 80021a6:	d144      	bne.n	8002232 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	d11a      	bne.n	80021e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	1c9a      	adds	r2, r3, #2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	621a      	str	r2, [r3, #32]
 80021da:	e00e      	b.n	80021fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	621a      	str	r2, [r3, #32]
 80021e6:	e008      	b.n	80021fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	1c59      	adds	r1, r3, #1
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6211      	str	r1, [r2, #32]
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29b      	uxth	r3, r3
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4619      	mov	r1, r3
 8002208:	84d1      	strh	r1, [r2, #38]	; 0x26
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10f      	bne.n	800222e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800221c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800222c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002256:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff07 	bl	8002074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b22      	cmp	r3, #34	; 0x22
 8002282:	d171      	bne.n	8002368 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228c:	d123      	bne.n	80022d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10e      	bne.n	80022ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	1c9a      	adds	r2, r3, #2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
 80022b8:	e029      	b.n	800230e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
 80022d4:	e01b      	b.n	800230e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6858      	ldr	r0, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	1c59      	adds	r1, r3, #1
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6291      	str	r1, [r2, #40]	; 0x28
 80022ee:	b2c2      	uxtb	r2, r0
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e00c      	b.n	800230e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	1c58      	adds	r0, r3, #1
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	6288      	str	r0, [r1, #40]	; 0x28
 8002306:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29b      	uxth	r3, r3
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4619      	mov	r1, r3
 800231c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800231e:	2b00      	cmp	r3, #0
 8002320:	d120      	bne.n	8002364 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0220 	bic.w	r2, r2, #32
 8002330:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002340:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fafc 	bl	8000958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e002      	b.n	800236a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023b6:	f023 030c 	bic.w	r3, r3, #12
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e2:	f040 818b 	bne.w	80026fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4ac1      	ldr	r2, [pc, #772]	; (80026f0 <UART_SetConfig+0x37c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d005      	beq.n	80023fc <UART_SetConfig+0x88>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4abf      	ldr	r2, [pc, #764]	; (80026f4 <UART_SetConfig+0x380>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	f040 80bd 	bne.w	8002576 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023fc:	f7ff fbea 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 8002400:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	461d      	mov	r5, r3
 8002406:	f04f 0600 	mov.w	r6, #0
 800240a:	46a8      	mov	r8, r5
 800240c:	46b1      	mov	r9, r6
 800240e:	eb18 0308 	adds.w	r3, r8, r8
 8002412:	eb49 0409 	adc.w	r4, r9, r9
 8002416:	4698      	mov	r8, r3
 8002418:	46a1      	mov	r9, r4
 800241a:	eb18 0805 	adds.w	r8, r8, r5
 800241e:	eb49 0906 	adc.w	r9, r9, r6
 8002422:	f04f 0100 	mov.w	r1, #0
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800242e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002432:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002436:	4688      	mov	r8, r1
 8002438:	4691      	mov	r9, r2
 800243a:	eb18 0005 	adds.w	r0, r8, r5
 800243e:	eb49 0106 	adc.w	r1, r9, r6
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	461d      	mov	r5, r3
 8002448:	f04f 0600 	mov.w	r6, #0
 800244c:	196b      	adds	r3, r5, r5
 800244e:	eb46 0406 	adc.w	r4, r6, r6
 8002452:	461a      	mov	r2, r3
 8002454:	4623      	mov	r3, r4
 8002456:	f7fd fec3 	bl	80001e0 <__aeabi_uldivmod>
 800245a:	4603      	mov	r3, r0
 800245c:	460c      	mov	r4, r1
 800245e:	461a      	mov	r2, r3
 8002460:	4ba5      	ldr	r3, [pc, #660]	; (80026f8 <UART_SetConfig+0x384>)
 8002462:	fba3 2302 	umull	r2, r3, r3, r2
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	461d      	mov	r5, r3
 8002470:	f04f 0600 	mov.w	r6, #0
 8002474:	46a9      	mov	r9, r5
 8002476:	46b2      	mov	sl, r6
 8002478:	eb19 0309 	adds.w	r3, r9, r9
 800247c:	eb4a 040a 	adc.w	r4, sl, sl
 8002480:	4699      	mov	r9, r3
 8002482:	46a2      	mov	sl, r4
 8002484:	eb19 0905 	adds.w	r9, r9, r5
 8002488:	eb4a 0a06 	adc.w	sl, sl, r6
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002498:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800249c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024a0:	4689      	mov	r9, r1
 80024a2:	4692      	mov	sl, r2
 80024a4:	eb19 0005 	adds.w	r0, r9, r5
 80024a8:	eb4a 0106 	adc.w	r1, sl, r6
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	461d      	mov	r5, r3
 80024b2:	f04f 0600 	mov.w	r6, #0
 80024b6:	196b      	adds	r3, r5, r5
 80024b8:	eb46 0406 	adc.w	r4, r6, r6
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	f7fd fe8e 	bl	80001e0 <__aeabi_uldivmod>
 80024c4:	4603      	mov	r3, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <UART_SetConfig+0x384>)
 80024cc:	fba3 1302 	umull	r1, r3, r3, r2
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	2164      	movs	r1, #100	; 0x64
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	3332      	adds	r3, #50	; 0x32
 80024de:	4a86      	ldr	r2, [pc, #536]	; (80026f8 <UART_SetConfig+0x384>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024ec:	4498      	add	r8, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	461d      	mov	r5, r3
 80024f2:	f04f 0600 	mov.w	r6, #0
 80024f6:	46a9      	mov	r9, r5
 80024f8:	46b2      	mov	sl, r6
 80024fa:	eb19 0309 	adds.w	r3, r9, r9
 80024fe:	eb4a 040a 	adc.w	r4, sl, sl
 8002502:	4699      	mov	r9, r3
 8002504:	46a2      	mov	sl, r4
 8002506:	eb19 0905 	adds.w	r9, r9, r5
 800250a:	eb4a 0a06 	adc.w	sl, sl, r6
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800251a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800251e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002522:	4689      	mov	r9, r1
 8002524:	4692      	mov	sl, r2
 8002526:	eb19 0005 	adds.w	r0, r9, r5
 800252a:	eb4a 0106 	adc.w	r1, sl, r6
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	461d      	mov	r5, r3
 8002534:	f04f 0600 	mov.w	r6, #0
 8002538:	196b      	adds	r3, r5, r5
 800253a:	eb46 0406 	adc.w	r4, r6, r6
 800253e:	461a      	mov	r2, r3
 8002540:	4623      	mov	r3, r4
 8002542:	f7fd fe4d 	bl	80001e0 <__aeabi_uldivmod>
 8002546:	4603      	mov	r3, r0
 8002548:	460c      	mov	r4, r1
 800254a:	461a      	mov	r2, r3
 800254c:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <UART_SetConfig+0x384>)
 800254e:	fba3 1302 	umull	r1, r3, r3, r2
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2164      	movs	r1, #100	; 0x64
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	3332      	adds	r3, #50	; 0x32
 8002560:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <UART_SetConfig+0x384>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	f003 0207 	and.w	r2, r3, #7
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4442      	add	r2, r8
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e26f      	b.n	8002a56 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002576:	f7ff fb19 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 800257a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	461d      	mov	r5, r3
 8002580:	f04f 0600 	mov.w	r6, #0
 8002584:	46a8      	mov	r8, r5
 8002586:	46b1      	mov	r9, r6
 8002588:	eb18 0308 	adds.w	r3, r8, r8
 800258c:	eb49 0409 	adc.w	r4, r9, r9
 8002590:	4698      	mov	r8, r3
 8002592:	46a1      	mov	r9, r4
 8002594:	eb18 0805 	adds.w	r8, r8, r5
 8002598:	eb49 0906 	adc.w	r9, r9, r6
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025b0:	4688      	mov	r8, r1
 80025b2:	4691      	mov	r9, r2
 80025b4:	eb18 0005 	adds.w	r0, r8, r5
 80025b8:	eb49 0106 	adc.w	r1, r9, r6
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	461d      	mov	r5, r3
 80025c2:	f04f 0600 	mov.w	r6, #0
 80025c6:	196b      	adds	r3, r5, r5
 80025c8:	eb46 0406 	adc.w	r4, r6, r6
 80025cc:	461a      	mov	r2, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	f7fd fe06 	bl	80001e0 <__aeabi_uldivmod>
 80025d4:	4603      	mov	r3, r0
 80025d6:	460c      	mov	r4, r1
 80025d8:	461a      	mov	r2, r3
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <UART_SetConfig+0x384>)
 80025dc:	fba3 2302 	umull	r2, r3, r3, r2
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	461d      	mov	r5, r3
 80025ea:	f04f 0600 	mov.w	r6, #0
 80025ee:	46a9      	mov	r9, r5
 80025f0:	46b2      	mov	sl, r6
 80025f2:	eb19 0309 	adds.w	r3, r9, r9
 80025f6:	eb4a 040a 	adc.w	r4, sl, sl
 80025fa:	4699      	mov	r9, r3
 80025fc:	46a2      	mov	sl, r4
 80025fe:	eb19 0905 	adds.w	r9, r9, r5
 8002602:	eb4a 0a06 	adc.w	sl, sl, r6
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002612:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002616:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800261a:	4689      	mov	r9, r1
 800261c:	4692      	mov	sl, r2
 800261e:	eb19 0005 	adds.w	r0, r9, r5
 8002622:	eb4a 0106 	adc.w	r1, sl, r6
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	461d      	mov	r5, r3
 800262c:	f04f 0600 	mov.w	r6, #0
 8002630:	196b      	adds	r3, r5, r5
 8002632:	eb46 0406 	adc.w	r4, r6, r6
 8002636:	461a      	mov	r2, r3
 8002638:	4623      	mov	r3, r4
 800263a:	f7fd fdd1 	bl	80001e0 <__aeabi_uldivmod>
 800263e:	4603      	mov	r3, r0
 8002640:	460c      	mov	r4, r1
 8002642:	461a      	mov	r2, r3
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <UART_SetConfig+0x384>)
 8002646:	fba3 1302 	umull	r1, r3, r3, r2
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2164      	movs	r1, #100	; 0x64
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	3332      	adds	r3, #50	; 0x32
 8002658:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <UART_SetConfig+0x384>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002666:	4498      	add	r8, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	461d      	mov	r5, r3
 800266c:	f04f 0600 	mov.w	r6, #0
 8002670:	46a9      	mov	r9, r5
 8002672:	46b2      	mov	sl, r6
 8002674:	eb19 0309 	adds.w	r3, r9, r9
 8002678:	eb4a 040a 	adc.w	r4, sl, sl
 800267c:	4699      	mov	r9, r3
 800267e:	46a2      	mov	sl, r4
 8002680:	eb19 0905 	adds.w	r9, r9, r5
 8002684:	eb4a 0a06 	adc.w	sl, sl, r6
 8002688:	f04f 0100 	mov.w	r1, #0
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002694:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002698:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800269c:	4689      	mov	r9, r1
 800269e:	4692      	mov	sl, r2
 80026a0:	eb19 0005 	adds.w	r0, r9, r5
 80026a4:	eb4a 0106 	adc.w	r1, sl, r6
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	461d      	mov	r5, r3
 80026ae:	f04f 0600 	mov.w	r6, #0
 80026b2:	196b      	adds	r3, r5, r5
 80026b4:	eb46 0406 	adc.w	r4, r6, r6
 80026b8:	461a      	mov	r2, r3
 80026ba:	4623      	mov	r3, r4
 80026bc:	f7fd fd90 	bl	80001e0 <__aeabi_uldivmod>
 80026c0:	4603      	mov	r3, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <UART_SetConfig+0x384>)
 80026c8:	fba3 1302 	umull	r1, r3, r3, r2
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	2164      	movs	r1, #100	; 0x64
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	3332      	adds	r3, #50	; 0x32
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <UART_SetConfig+0x384>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	f003 0207 	and.w	r2, r3, #7
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4442      	add	r2, r8
 80026ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80026ee:	e1b2      	b.n	8002a56 <UART_SetConfig+0x6e2>
 80026f0:	40011000 	.word	0x40011000
 80026f4:	40011400 	.word	0x40011400
 80026f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4ad7      	ldr	r2, [pc, #860]	; (8002a60 <UART_SetConfig+0x6ec>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d005      	beq.n	8002712 <UART_SetConfig+0x39e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4ad6      	ldr	r2, [pc, #856]	; (8002a64 <UART_SetConfig+0x6f0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	f040 80d1 	bne.w	80028b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002712:	f7ff fa5f 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 8002716:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	469a      	mov	sl, r3
 800271c:	f04f 0b00 	mov.w	fp, #0
 8002720:	46d0      	mov	r8, sl
 8002722:	46d9      	mov	r9, fp
 8002724:	eb18 0308 	adds.w	r3, r8, r8
 8002728:	eb49 0409 	adc.w	r4, r9, r9
 800272c:	4698      	mov	r8, r3
 800272e:	46a1      	mov	r9, r4
 8002730:	eb18 080a 	adds.w	r8, r8, sl
 8002734:	eb49 090b 	adc.w	r9, r9, fp
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002744:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002748:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800274c:	4688      	mov	r8, r1
 800274e:	4691      	mov	r9, r2
 8002750:	eb1a 0508 	adds.w	r5, sl, r8
 8002754:	eb4b 0609 	adc.w	r6, fp, r9
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	f04f 0400 	mov.w	r4, #0
 800276a:	0094      	lsls	r4, r2, #2
 800276c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002770:	008b      	lsls	r3, r1, #2
 8002772:	461a      	mov	r2, r3
 8002774:	4623      	mov	r3, r4
 8002776:	4628      	mov	r0, r5
 8002778:	4631      	mov	r1, r6
 800277a:	f7fd fd31 	bl	80001e0 <__aeabi_uldivmod>
 800277e:	4603      	mov	r3, r0
 8002780:	460c      	mov	r4, r1
 8002782:	461a      	mov	r2, r3
 8002784:	4bb8      	ldr	r3, [pc, #736]	; (8002a68 <UART_SetConfig+0x6f4>)
 8002786:	fba3 2302 	umull	r2, r3, r3, r2
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	469b      	mov	fp, r3
 8002794:	f04f 0c00 	mov.w	ip, #0
 8002798:	46d9      	mov	r9, fp
 800279a:	46e2      	mov	sl, ip
 800279c:	eb19 0309 	adds.w	r3, r9, r9
 80027a0:	eb4a 040a 	adc.w	r4, sl, sl
 80027a4:	4699      	mov	r9, r3
 80027a6:	46a2      	mov	sl, r4
 80027a8:	eb19 090b 	adds.w	r9, r9, fp
 80027ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027b0:	f04f 0100 	mov.w	r1, #0
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027c4:	4689      	mov	r9, r1
 80027c6:	4692      	mov	sl, r2
 80027c8:	eb1b 0509 	adds.w	r5, fp, r9
 80027cc:	eb4c 060a 	adc.w	r6, ip, sl
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f04f 0400 	mov.w	r4, #0
 80027e2:	0094      	lsls	r4, r2, #2
 80027e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027e8:	008b      	lsls	r3, r1, #2
 80027ea:	461a      	mov	r2, r3
 80027ec:	4623      	mov	r3, r4
 80027ee:	4628      	mov	r0, r5
 80027f0:	4631      	mov	r1, r6
 80027f2:	f7fd fcf5 	bl	80001e0 <__aeabi_uldivmod>
 80027f6:	4603      	mov	r3, r0
 80027f8:	460c      	mov	r4, r1
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b9a      	ldr	r3, [pc, #616]	; (8002a68 <UART_SetConfig+0x6f4>)
 80027fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2164      	movs	r1, #100	; 0x64
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	4a95      	ldr	r2, [pc, #596]	; (8002a68 <UART_SetConfig+0x6f4>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281c:	4498      	add	r8, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	469b      	mov	fp, r3
 8002822:	f04f 0c00 	mov.w	ip, #0
 8002826:	46d9      	mov	r9, fp
 8002828:	46e2      	mov	sl, ip
 800282a:	eb19 0309 	adds.w	r3, r9, r9
 800282e:	eb4a 040a 	adc.w	r4, sl, sl
 8002832:	4699      	mov	r9, r3
 8002834:	46a2      	mov	sl, r4
 8002836:	eb19 090b 	adds.w	r9, r9, fp
 800283a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800284a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800284e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002852:	4689      	mov	r9, r1
 8002854:	4692      	mov	sl, r2
 8002856:	eb1b 0509 	adds.w	r5, fp, r9
 800285a:	eb4c 060a 	adc.w	r6, ip, sl
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4619      	mov	r1, r3
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	f04f 0400 	mov.w	r4, #0
 8002870:	0094      	lsls	r4, r2, #2
 8002872:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002876:	008b      	lsls	r3, r1, #2
 8002878:	461a      	mov	r2, r3
 800287a:	4623      	mov	r3, r4
 800287c:	4628      	mov	r0, r5
 800287e:	4631      	mov	r1, r6
 8002880:	f7fd fcae 	bl	80001e0 <__aeabi_uldivmod>
 8002884:	4603      	mov	r3, r0
 8002886:	460c      	mov	r4, r1
 8002888:	461a      	mov	r2, r3
 800288a:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <UART_SetConfig+0x6f4>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	2164      	movs	r1, #100	; 0x64
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	3332      	adds	r3, #50	; 0x32
 800289e:	4a72      	ldr	r2, [pc, #456]	; (8002a68 <UART_SetConfig+0x6f4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	f003 020f 	and.w	r2, r3, #15
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4442      	add	r2, r8
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	e0d0      	b.n	8002a56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80028b4:	f7ff f97a 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80028b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	469a      	mov	sl, r3
 80028be:	f04f 0b00 	mov.w	fp, #0
 80028c2:	46d0      	mov	r8, sl
 80028c4:	46d9      	mov	r9, fp
 80028c6:	eb18 0308 	adds.w	r3, r8, r8
 80028ca:	eb49 0409 	adc.w	r4, r9, r9
 80028ce:	4698      	mov	r8, r3
 80028d0:	46a1      	mov	r9, r4
 80028d2:	eb18 080a 	adds.w	r8, r8, sl
 80028d6:	eb49 090b 	adc.w	r9, r9, fp
 80028da:	f04f 0100 	mov.w	r1, #0
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028ee:	4688      	mov	r8, r1
 80028f0:	4691      	mov	r9, r2
 80028f2:	eb1a 0508 	adds.w	r5, sl, r8
 80028f6:	eb4b 0609 	adc.w	r6, fp, r9
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4619      	mov	r1, r3
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	f04f 0400 	mov.w	r4, #0
 800290c:	0094      	lsls	r4, r2, #2
 800290e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002912:	008b      	lsls	r3, r1, #2
 8002914:	461a      	mov	r2, r3
 8002916:	4623      	mov	r3, r4
 8002918:	4628      	mov	r0, r5
 800291a:	4631      	mov	r1, r6
 800291c:	f7fd fc60 	bl	80001e0 <__aeabi_uldivmod>
 8002920:	4603      	mov	r3, r0
 8002922:	460c      	mov	r4, r1
 8002924:	461a      	mov	r2, r3
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <UART_SetConfig+0x6f4>)
 8002928:	fba3 2302 	umull	r2, r3, r3, r2
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	469b      	mov	fp, r3
 8002936:	f04f 0c00 	mov.w	ip, #0
 800293a:	46d9      	mov	r9, fp
 800293c:	46e2      	mov	sl, ip
 800293e:	eb19 0309 	adds.w	r3, r9, r9
 8002942:	eb4a 040a 	adc.w	r4, sl, sl
 8002946:	4699      	mov	r9, r3
 8002948:	46a2      	mov	sl, r4
 800294a:	eb19 090b 	adds.w	r9, r9, fp
 800294e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800295e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002962:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002966:	4689      	mov	r9, r1
 8002968:	4692      	mov	sl, r2
 800296a:	eb1b 0509 	adds.w	r5, fp, r9
 800296e:	eb4c 060a 	adc.w	r6, ip, sl
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4619      	mov	r1, r3
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	0094      	lsls	r4, r2, #2
 8002986:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800298a:	008b      	lsls	r3, r1, #2
 800298c:	461a      	mov	r2, r3
 800298e:	4623      	mov	r3, r4
 8002990:	4628      	mov	r0, r5
 8002992:	4631      	mov	r1, r6
 8002994:	f7fd fc24 	bl	80001e0 <__aeabi_uldivmod>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	461a      	mov	r2, r3
 800299e:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <UART_SetConfig+0x6f4>)
 80029a0:	fba3 1302 	umull	r1, r3, r3, r2
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	2164      	movs	r1, #100	; 0x64
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	3332      	adds	r3, #50	; 0x32
 80029b2:	4a2d      	ldr	r2, [pc, #180]	; (8002a68 <UART_SetConfig+0x6f4>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029be:	4498      	add	r8, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	469b      	mov	fp, r3
 80029c4:	f04f 0c00 	mov.w	ip, #0
 80029c8:	46d9      	mov	r9, fp
 80029ca:	46e2      	mov	sl, ip
 80029cc:	eb19 0309 	adds.w	r3, r9, r9
 80029d0:	eb4a 040a 	adc.w	r4, sl, sl
 80029d4:	4699      	mov	r9, r3
 80029d6:	46a2      	mov	sl, r4
 80029d8:	eb19 090b 	adds.w	r9, r9, fp
 80029dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029f4:	4689      	mov	r9, r1
 80029f6:	4692      	mov	sl, r2
 80029f8:	eb1b 0509 	adds.w	r5, fp, r9
 80029fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f04f 0400 	mov.w	r4, #0
 8002a12:	0094      	lsls	r4, r2, #2
 8002a14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a18:	008b      	lsls	r3, r1, #2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	4628      	mov	r0, r5
 8002a20:	4631      	mov	r1, r6
 8002a22:	f7fd fbdd 	bl	80001e0 <__aeabi_uldivmod>
 8002a26:	4603      	mov	r3, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <UART_SetConfig+0x6f4>)
 8002a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2164      	movs	r1, #100	; 0x64
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	3332      	adds	r3, #50	; 0x32
 8002a40:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <UART_SetConfig+0x6f4>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4442      	add	r2, r8
 8002a52:	609a      	str	r2, [r3, #8]
}
 8002a54:	e7ff      	b.n	8002a56 <UART_SetConfig+0x6e2>
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a60:	40011000 	.word	0x40011000
 8002a64:	40011400 	.word	0x40011400
 8002a68:	51eb851f 	.word	0x51eb851f

08002a6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 0208 	add.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f103 0208 	add.w	r2, r3, #8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f103 0208 	add.w	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d103      	bne.n	8002b2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e00c      	b.n	8002b48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3308      	adds	r3, #8
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e002      	b.n	8002b3c <vListInsert+0x2e>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d2f6      	bcs.n	8002b36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6892      	ldr	r2, [r2, #8]
 8002b96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6852      	ldr	r2, [r2, #4]
 8002ba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d103      	bne.n	8002bb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1e5a      	subs	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	e7fe      	b.n	8002bfa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002bfc:	f001 fc7e 	bl	80044fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	441a      	add	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	22ff      	movs	r2, #255	; 0xff
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	22ff      	movs	r2, #255	; 0xff
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d114      	bne.n	8002c7c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01a      	beq.n	8002c90 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3310      	adds	r3, #16
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 ff32 	bl	8003ac8 <xTaskRemoveFromEventList>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <xQueueGenericReset+0xcc>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	e009      	b.n	8002c90 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3310      	adds	r3, #16
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fef3 	bl	8002a6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3324      	adds	r3, #36	; 0x24
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff feee 	bl	8002a6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c90:	f001 fc62 	bl	8004558 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c94:	2301      	movs	r3, #1
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000ed04 	.word	0xe000ed04

08002ca4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <xQueueGenericCreate+0x28>
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e7fe      	b.n	8002cca <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e004      	b.n	8002ce2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3348      	adds	r3, #72	; 0x48
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 fd22 	bl	8004730 <pvPortMalloc>
 8002cec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d011      	beq.n	8002d18 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3348      	adds	r3, #72	; 0x48
 8002cfc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d06:	79fa      	ldrb	r2, [r7, #7]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f805 	bl	8002d22 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d18:	69bb      	ldr	r3, [r7, #24]
	}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e002      	b.n	8002d44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d50:	2101      	movs	r1, #1
 8002d52:	69b8      	ldr	r0, [r7, #24]
 8002d54:	f7ff ff3e 	bl	8002bd4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <xQueueGenericSend+0x30>
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8e:	e7fe      	b.n	8002d8e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <xQueueGenericSend+0x3e>
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <xQueueGenericSend+0x42>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <xQueueGenericSend+0x44>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <xQueueGenericSend+0x5c>
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e7fe      	b.n	8002dba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d103      	bne.n	8002dca <xQueueGenericSend+0x6a>
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <xQueueGenericSend+0x6e>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <xQueueGenericSend+0x70>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <xQueueGenericSend+0x88>
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	e7fe      	b.n	8002de6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002de8:	f001 f824 	bl	8003e34 <xTaskGetSchedulerState>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <xQueueGenericSend+0x98>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <xQueueGenericSend+0x9c>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <xQueueGenericSend+0x9e>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <xQueueGenericSend+0xb6>
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	e7fe      	b.n	8002e14 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e16:	f001 fb71 	bl	80044fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <xQueueGenericSend+0xcc>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d129      	bne.n	8002e80 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e32:	f000 f96b 	bl	800310c <prvCopyDataToQueue>
 8002e36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	3324      	adds	r3, #36	; 0x24
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fe3f 	bl	8003ac8 <xTaskRemoveFromEventList>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e50:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <xQueueGenericSend+0x1f0>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	e00a      	b.n	8002e78 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <xQueueGenericSend+0x1f0>)
 8002e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e78:	f001 fb6e 	bl	8004558 <vPortExitCritical>
				return pdPASS;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e063      	b.n	8002f48 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d103      	bne.n	8002e8e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e86:	f001 fb67 	bl	8004558 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e05c      	b.n	8002f48 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fe77 	bl	8003b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ea2:	f001 fb59 	bl	8004558 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ea6:	f000 fc2f 	bl	8003708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eaa:	f001 fb27 	bl	80044fc <vPortEnterCritical>
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d103      	bne.n	8002ec4 <xQueueGenericSend+0x164>
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d103      	bne.n	8002eda <xQueueGenericSend+0x17a>
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eda:	f001 fb3d 	bl	8004558 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ede:	1d3a      	adds	r2, r7, #4
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fe66 	bl	8003bb8 <xTaskCheckForTimeOut>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d124      	bne.n	8002f3c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef4:	f000 fa02 	bl	80032fc <prvIsQueueFull>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d018      	beq.n	8002f30 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	3310      	adds	r3, #16
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fdba 	bl	8003a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f0e:	f000 f98d 	bl	800322c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f12:	f000 fc07 	bl	8003724 <xTaskResumeAll>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f af7c 	bne.w	8002e16 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <xQueueGenericSend+0x1f0>)
 8002f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	e772      	b.n	8002e16 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f32:	f000 f97b 	bl	800322c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f36:	f000 fbf5 	bl	8003724 <xTaskResumeAll>
 8002f3a:	e76c      	b.n	8002e16 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f3e:	f000 f975 	bl	800322c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f42:	f000 fbef 	bl	8003724 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3738      	adds	r7, #56	; 0x38
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	e000ed04 	.word	0xe000ed04

08002f54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	; 0x30
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <xQueueReceive+0x2e>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	e7fe      	b.n	8002f80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d103      	bne.n	8002f90 <xQueueReceive+0x3c>
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <xQueueReceive+0x40>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <xQueueReceive+0x42>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <xQueueReceive+0x5a>
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	e7fe      	b.n	8002fac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fae:	f000 ff41 	bl	8003e34 <xTaskGetSchedulerState>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <xQueueReceive+0x6a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <xQueueReceive+0x6e>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <xQueueReceive+0x70>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <xQueueReceive+0x88>
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	e7fe      	b.n	8002fda <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fdc:	f001 fa8e 	bl	80044fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01f      	beq.n	800302c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff0:	f000 f8f6 	bl	80031e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	1e5a      	subs	r2, r3, #1
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00f      	beq.n	8003024 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	3310      	adds	r3, #16
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fd5d 	bl	8003ac8 <xTaskRemoveFromEventList>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003014:	4b3c      	ldr	r3, [pc, #240]	; (8003108 <xQueueReceive+0x1b4>)
 8003016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003024:	f001 fa98 	bl	8004558 <vPortExitCritical>
				return pdPASS;
 8003028:	2301      	movs	r3, #1
 800302a:	e069      	b.n	8003100 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003032:	f001 fa91 	bl	8004558 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003036:	2300      	movs	r3, #0
 8003038:	e062      	b.n	8003100 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003040:	f107 0310 	add.w	r3, r7, #16
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fda1 	bl	8003b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800304a:	2301      	movs	r3, #1
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800304e:	f001 fa83 	bl	8004558 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003052:	f000 fb59 	bl	8003708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003056:	f001 fa51 	bl	80044fc <vPortEnterCritical>
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003060:	b25b      	sxtb	r3, r3
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d103      	bne.n	8003070 <xQueueReceive+0x11c>
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003076:	b25b      	sxtb	r3, r3
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d103      	bne.n	8003086 <xQueueReceive+0x132>
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003086:	f001 fa67 	bl	8004558 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800308a:	1d3a      	adds	r2, r7, #4
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fd90 	bl	8003bb8 <xTaskCheckForTimeOut>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d123      	bne.n	80030e6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800309e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a0:	f000 f916 	bl	80032d0 <prvIsQueueEmpty>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d017      	beq.n	80030da <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	3324      	adds	r3, #36	; 0x24
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fce4 	bl	8003a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ba:	f000 f8b7 	bl	800322c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030be:	f000 fb31 	bl	8003724 <xTaskResumeAll>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d189      	bne.n	8002fdc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <xQueueReceive+0x1b4>)
 80030ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	e780      	b.n	8002fdc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030dc:	f000 f8a6 	bl	800322c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030e0:	f000 fb20 	bl	8003724 <xTaskResumeAll>
 80030e4:	e77a      	b.n	8002fdc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e8:	f000 f8a0 	bl	800322c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ec:	f000 fb1a 	bl	8003724 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f2:	f000 f8ed 	bl	80032d0 <prvIsQueueEmpty>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f43f af6f 	beq.w	8002fdc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003100:	4618      	mov	r0, r3
 8003102:	3730      	adds	r7, #48	; 0x30
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d14d      	bne.n	80031ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fe9a 	bl	8003e70 <xTaskPriorityDisinherit>
 800313c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e043      	b.n	80031ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d119      	bne.n	8003180 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6858      	ldr	r0, [r3, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	461a      	mov	r2, r3
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	f001 fce4 	bl	8004b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d32b      	bcc.n	80031ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	e026      	b.n	80031ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68d8      	ldr	r0, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	461a      	mov	r2, r3
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	f001 fcca 	bl	8004b24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	425b      	negs	r3, r3
 800319a:	441a      	add	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d207      	bcs.n	80031bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	425b      	negs	r3, r3
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d105      	bne.n	80031ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031d6:	697b      	ldr	r3, [r7, #20]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d018      	beq.n	8003224 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	441a      	add	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	d303      	bcc.n	8003214 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68d9      	ldr	r1, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	461a      	mov	r2, r3
 800321e:	6838      	ldr	r0, [r7, #0]
 8003220:	f001 fc80 	bl	8004b24 <memcpy>
	}
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003234:	f001 f962 	bl	80044fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800323e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003240:	e011      	b.n	8003266 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d012      	beq.n	8003270 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fc3a 	bl	8003ac8 <xTaskRemoveFromEventList>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800325a:	f000 fd0d 	bl	8003c78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	3b01      	subs	r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	dce9      	bgt.n	8003242 <prvUnlockQueue+0x16>
 800326e:	e000      	b.n	8003272 <prvUnlockQueue+0x46>
					break;
 8003270:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	22ff      	movs	r2, #255	; 0xff
 8003276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800327a:	f001 f96d 	bl	8004558 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800327e:	f001 f93d 	bl	80044fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003288:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800328a:	e011      	b.n	80032b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3310      	adds	r3, #16
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fc15 	bl	8003ac8 <xTaskRemoveFromEventList>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032a4:	f000 fce8 	bl	8003c78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	dce9      	bgt.n	800328c <prvUnlockQueue+0x60>
 80032b8:	e000      	b.n	80032bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032c4:	f001 f948 	bl	8004558 <vPortExitCritical>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032d8:	f001 f910 	bl	80044fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e001      	b.n	80032ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ee:	f001 f933 	bl	8004558 <vPortExitCritical>

	return xReturn;
 80032f2:	68fb      	ldr	r3, [r7, #12]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003304:	f001 f8fa 	bl	80044fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	429a      	cmp	r2, r3
 8003312:	d102      	bne.n	800331a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003314:	2301      	movs	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e001      	b.n	800331e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800331e:	f001 f91b 	bl	8004558 <vPortExitCritical>

	return xReturn;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08e      	sub	sp, #56	; 0x38
 8003330:	af04      	add	r7, sp, #16
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <xTaskCreateStatic+0x28>
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	623b      	str	r3, [r7, #32]
 8003352:	e7fe      	b.n	8003352 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <xTaskCreateStatic+0x42>
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	e7fe      	b.n	800336c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800336e:	2354      	movs	r3, #84	; 0x54
 8003370:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b54      	cmp	r3, #84	; 0x54
 8003376:	d009      	beq.n	800338c <xTaskCreateStatic+0x60>
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	e7fe      	b.n	800338a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800338c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01e      	beq.n	80033d2 <xTaskCreateStatic+0xa6>
 8003394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01b      	beq.n	80033d2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033ac:	2300      	movs	r3, #0
 80033ae:	9303      	str	r3, [sp, #12]
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f850 	bl	800346a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033cc:	f000 f8d4 	bl	8003578 <prvAddNewTaskToReadyList>
 80033d0:	e001      	b.n	80033d6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033d6:	697b      	ldr	r3, [r7, #20]
	}
 80033d8:	4618      	mov	r0, r3
 80033da:	3728      	adds	r7, #40	; 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af04      	add	r7, sp, #16
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 f99b 	bl	8004730 <pvPortMalloc>
 80033fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00e      	beq.n	8003420 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003402:	2054      	movs	r0, #84	; 0x54
 8003404:	f001 f994 	bl	8004730 <pvPortMalloc>
 8003408:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
 8003416:	e005      	b.n	8003424 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003418:	6978      	ldr	r0, [r7, #20]
 800341a:	f001 fa4b 	bl	80048b4 <vPortFree>
 800341e:	e001      	b.n	8003424 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d017      	beq.n	800345a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	2300      	movs	r3, #0
 8003436:	9303      	str	r3, [sp, #12]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	9302      	str	r3, [sp, #8]
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f80e 	bl	800346a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800344e:	69f8      	ldr	r0, [r7, #28]
 8003450:	f000 f892 	bl	8003578 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003454:	2301      	movs	r3, #1
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	e002      	b.n	8003460 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
 800345e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003460:	69bb      	ldr	r3, [r7, #24]
	}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b088      	sub	sp, #32
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003482:	3b01      	subs	r3, #1
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f023 0307 	bic.w	r3, r3, #7
 8003490:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <prvInitialiseNewTask+0x46>
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e7fe      	b.n	80034ae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01f      	beq.n	80034f6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	e012      	b.n	80034e2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	7819      	ldrb	r1, [r3, #0]
 80034c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	3334      	adds	r3, #52	; 0x34
 80034cc:	460a      	mov	r2, r1
 80034ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d006      	beq.n	80034ea <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3301      	adds	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d9e9      	bls.n	80034bc <prvInitialiseNewTask+0x52>
 80034e8:	e000      	b.n	80034ec <prvInitialiseNewTask+0x82>
			{
				break;
 80034ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f4:	e003      	b.n	80034fe <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	2b06      	cmp	r3, #6
 8003502:	d901      	bls.n	8003508 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003504:	2306      	movs	r3, #6
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	2200      	movs	r2, #0
 8003518:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	3304      	adds	r3, #4
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fac4 	bl	8002aac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	3318      	adds	r3, #24
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fabf 	bl	8002aac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	f1c3 0207 	rsb	r2, r3, #7
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003542:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	2200      	movs	r2, #0
 8003548:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	68f9      	ldr	r1, [r7, #12]
 8003556:	69b8      	ldr	r0, [r7, #24]
 8003558:	f000 fea6 	bl	80042a8 <pxPortInitialiseStack>
 800355c:	4602      	mov	r2, r0
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800356e:	bf00      	nop
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003580:	f000 ffbc 	bl	80044fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003584:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <prvAddNewTaskToReadyList+0xb8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	4a29      	ldr	r2, [pc, #164]	; (8003630 <prvAddNewTaskToReadyList+0xb8>)
 800358c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <prvAddNewTaskToReadyList+0xbc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003596:	4a27      	ldr	r2, [pc, #156]	; (8003634 <prvAddNewTaskToReadyList+0xbc>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800359c:	4b24      	ldr	r3, [pc, #144]	; (8003630 <prvAddNewTaskToReadyList+0xb8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d110      	bne.n	80035c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035a4:	f000 fb8c 	bl	8003cc0 <prvInitialiseTaskLists>
 80035a8:	e00d      	b.n	80035c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035aa:	4b23      	ldr	r3, [pc, #140]	; (8003638 <prvAddNewTaskToReadyList+0xc0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <prvAddNewTaskToReadyList+0xbc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d802      	bhi.n	80035c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035c0:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <prvAddNewTaskToReadyList+0xbc>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <prvAddNewTaskToReadyList+0xc4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <prvAddNewTaskToReadyList+0xc4>)
 80035ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	2201      	movs	r2, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <prvAddNewTaskToReadyList+0xc8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4313      	orrs	r3, r2
 80035de:	4a18      	ldr	r2, [pc, #96]	; (8003640 <prvAddNewTaskToReadyList+0xc8>)
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <prvAddNewTaskToReadyList+0xcc>)
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7ff fa64 	bl	8002ac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035fe:	f000 ffab 	bl	8004558 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <prvAddNewTaskToReadyList+0xc0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00e      	beq.n	8003628 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <prvAddNewTaskToReadyList+0xbc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	429a      	cmp	r2, r3
 8003616:	d207      	bcs.n	8003628 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <prvAddNewTaskToReadyList+0xd0>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000580 	.word	0x20000580
 8003634:	20000480 	.word	0x20000480
 8003638:	2000058c 	.word	0x2000058c
 800363c:	2000059c 	.word	0x2000059c
 8003640:	20000588 	.word	0x20000588
 8003644:	20000484 	.word	0x20000484
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800365a:	463a      	mov	r2, r7
 800365c:	1d39      	adds	r1, r7, #4
 800365e:	f107 0308 	add.w	r3, r7, #8
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff3c 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	9202      	str	r2, [sp, #8]
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	2300      	movs	r3, #0
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	460a      	mov	r2, r1
 800367a:	491d      	ldr	r1, [pc, #116]	; (80036f0 <vTaskStartScheduler+0xa4>)
 800367c:	481d      	ldr	r0, [pc, #116]	; (80036f4 <vTaskStartScheduler+0xa8>)
 800367e:	f7ff fe55 	bl	800332c <xTaskCreateStatic>
 8003682:	4602      	mov	r2, r0
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <vTaskStartScheduler+0xac>)
 8003686:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <vTaskStartScheduler+0xac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003690:	2301      	movs	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e001      	b.n	800369a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d115      	bne.n	80036cc <vTaskStartScheduler+0x80>
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <vTaskStartScheduler+0xb0>)
 80036b4:	f04f 32ff 	mov.w	r2, #4294967295
 80036b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <vTaskStartScheduler+0xb4>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <vTaskStartScheduler+0xb8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036c6:	f000 fe7b 	bl	80043c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036ca:	e00d      	b.n	80036e8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d109      	bne.n	80036e8 <vTaskStartScheduler+0x9c>
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e7fe      	b.n	80036e6 <vTaskStartScheduler+0x9a>
}
 80036e8:	bf00      	nop
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	08004bc8 	.word	0x08004bc8
 80036f4:	08003c91 	.word	0x08003c91
 80036f8:	200005a4 	.word	0x200005a4
 80036fc:	200005a0 	.word	0x200005a0
 8003700:	2000058c 	.word	0x2000058c
 8003704:	20000584 	.word	0x20000584

08003708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <vTaskSuspendAll+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a03      	ldr	r2, [pc, #12]	; (8003720 <vTaskSuspendAll+0x18>)
 8003714:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	200005a8 	.word	0x200005a8

08003724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <xTaskResumeAll+0x114>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <xTaskResumeAll+0x2a>
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	e7fe      	b.n	800374c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800374e:	f000 fed5 	bl	80044fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003752:	4b39      	ldr	r3, [pc, #228]	; (8003838 <xTaskResumeAll+0x114>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3b01      	subs	r3, #1
 8003758:	4a37      	ldr	r2, [pc, #220]	; (8003838 <xTaskResumeAll+0x114>)
 800375a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <xTaskResumeAll+0x114>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d161      	bne.n	8003828 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003764:	4b35      	ldr	r3, [pc, #212]	; (800383c <xTaskResumeAll+0x118>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05d      	beq.n	8003828 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800376c:	e02e      	b.n	80037cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <xTaskResumeAll+0x11c>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3318      	adds	r3, #24
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fa00 	bl	8002b80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3304      	adds	r3, #4
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f9fb 	bl	8002b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <xTaskResumeAll+0x120>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <xTaskResumeAll+0x120>)
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4a27      	ldr	r2, [pc, #156]	; (8003848 <xTaskResumeAll+0x124>)
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f7ff f987 	bl	8002ac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	4b23      	ldr	r3, [pc, #140]	; (800384c <xTaskResumeAll+0x128>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <xTaskResumeAll+0x12c>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <xTaskResumeAll+0x11c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1cc      	bne.n	800376e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037da:	f000 fb0b 	bl	8003df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <xTaskResumeAll+0x130>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d010      	beq.n	800380c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037ea:	f000 f837 	bl	800385c <xTaskIncrementTick>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80037f4:	4b16      	ldr	r3, [pc, #88]	; (8003850 <xTaskResumeAll+0x12c>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f1      	bne.n	80037ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <xTaskResumeAll+0x130>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <xTaskResumeAll+0x12c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <xTaskResumeAll+0x134>)
 800381a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003828:	f000 fe96 	bl	8004558 <vPortExitCritical>

	return xAlreadyYielded;
 800382c:	68bb      	ldr	r3, [r7, #8]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200005a8 	.word	0x200005a8
 800383c:	20000580 	.word	0x20000580
 8003840:	20000540 	.word	0x20000540
 8003844:	20000588 	.word	0x20000588
 8003848:	20000484 	.word	0x20000484
 800384c:	20000480 	.word	0x20000480
 8003850:	20000594 	.word	0x20000594
 8003854:	20000590 	.word	0x20000590
 8003858:	e000ed04 	.word	0xe000ed04

0800385c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003866:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <xTaskIncrementTick+0x144>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 8087 	bne.w	800397e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003870:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <xTaskIncrementTick+0x148>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003878:	4a4a      	ldr	r2, [pc, #296]	; (80039a4 <xTaskIncrementTick+0x148>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11f      	bne.n	80038c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <xTaskIncrementTick+0x14c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <xTaskIncrementTick+0x46>
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	e7fe      	b.n	80038a0 <xTaskIncrementTick+0x44>
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <xTaskIncrementTick+0x14c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	4b40      	ldr	r3, [pc, #256]	; (80039ac <xTaskIncrementTick+0x150>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a3e      	ldr	r2, [pc, #248]	; (80039a8 <xTaskIncrementTick+0x14c>)
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <xTaskIncrementTick+0x150>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <xTaskIncrementTick+0x154>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	4a3c      	ldr	r2, [pc, #240]	; (80039b0 <xTaskIncrementTick+0x154>)
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	f000 fa98 	bl	8003df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038c4:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d348      	bcc.n	8003960 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <xTaskIncrementTick+0x14c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d8:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038da:	f04f 32ff 	mov.w	r2, #4294967295
 80038de:	601a      	str	r2, [r3, #0]
					break;
 80038e0:	e03e      	b.n	8003960 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <xTaskIncrementTick+0x14c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d203      	bcs.n	8003902 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038fa:	4a2e      	ldr	r2, [pc, #184]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003900:	e02e      	b.n	8003960 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	3304      	adds	r3, #4
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff f93a 	bl	8002b80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	3318      	adds	r3, #24
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f931 	bl	8002b80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	2201      	movs	r2, #1
 8003924:	409a      	lsls	r2, r3
 8003926:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <xTaskIncrementTick+0x15c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4313      	orrs	r3, r2
 800392c:	4a22      	ldr	r2, [pc, #136]	; (80039b8 <xTaskIncrementTick+0x15c>)
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <xTaskIncrementTick+0x160>)
 800393e:	441a      	add	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f7ff f8bd 	bl	8002ac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <xTaskIncrementTick+0x164>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	429a      	cmp	r2, r3
 8003958:	d3b9      	bcc.n	80038ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800395a:	2301      	movs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800395e:	e7b6      	b.n	80038ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003960:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <xTaskIncrementTick+0x164>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	4915      	ldr	r1, [pc, #84]	; (80039bc <xTaskIncrementTick+0x160>)
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d907      	bls.n	8003988 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	e004      	b.n	8003988 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <xTaskIncrementTick+0x168>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	4a0f      	ldr	r2, [pc, #60]	; (80039c4 <xTaskIncrementTick+0x168>)
 8003986:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <xTaskIncrementTick+0x16c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003994:	697b      	ldr	r3, [r7, #20]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200005a8 	.word	0x200005a8
 80039a4:	20000584 	.word	0x20000584
 80039a8:	20000538 	.word	0x20000538
 80039ac:	2000053c 	.word	0x2000053c
 80039b0:	20000598 	.word	0x20000598
 80039b4:	200005a0 	.word	0x200005a0
 80039b8:	20000588 	.word	0x20000588
 80039bc:	20000484 	.word	0x20000484
 80039c0:	20000480 	.word	0x20000480
 80039c4:	20000590 	.word	0x20000590
 80039c8:	20000594 	.word	0x20000594

080039cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <vTaskSwitchContext+0xa0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <vTaskSwitchContext+0xa4>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039e0:	e03e      	b.n	8003a60 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80039e2:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <vTaskSwitchContext+0xa4>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <vTaskSwitchContext+0xa8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80039f6:	7afb      	ldrb	r3, [r7, #11]
 80039f8:	f1c3 031f 	rsb	r3, r3, #31
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	491e      	ldr	r1, [pc, #120]	; (8003a78 <vTaskSwitchContext+0xac>)
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	e7fe      	b.n	8003a24 <vTaskSwitchContext+0x58>
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <vTaskSwitchContext+0xac>)
 8003a32:	4413      	add	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3308      	adds	r3, #8
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d104      	bne.n	8003a56 <vTaskSwitchContext+0x8a>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <vTaskSwitchContext+0xb0>)
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	200005a8 	.word	0x200005a8
 8003a70:	20000594 	.word	0x20000594
 8003a74:	20000588 	.word	0x20000588
 8003a78:	20000484 	.word	0x20000484
 8003a7c:	20000480 	.word	0x20000480

08003a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <vTaskPlaceOnEventList+0x24>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	e7fe      	b.n	8003aa2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <vTaskPlaceOnEventList+0x44>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff f82e 	bl	8002b0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	6838      	ldr	r0, [r7, #0]
 8003ab6:	f000 fb91 	bl	80041dc <prvAddCurrentTaskToDelayedList>
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000480 	.word	0x20000480

08003ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <xTaskRemoveFromEventList+0x2a>
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e7fe      	b.n	8003af0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3318      	adds	r3, #24
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff f842 	bl	8002b80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <xTaskRemoveFromEventList+0xac>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11c      	bne.n	8003b3e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff f839 	bl	8002b80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	2201      	movs	r2, #1
 8003b14:	409a      	lsls	r2, r3
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <xTaskRemoveFromEventList+0xb0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <xTaskRemoveFromEventList+0xb0>)
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <xTaskRemoveFromEventList+0xb4>)
 8003b2e:	441a      	add	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f7fe ffc5 	bl	8002ac6 <vListInsertEnd>
 8003b3c:	e005      	b.n	8003b4a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3318      	adds	r3, #24
 8003b42:	4619      	mov	r1, r3
 8003b44:	480e      	ldr	r0, [pc, #56]	; (8003b80 <xTaskRemoveFromEventList+0xb8>)
 8003b46:	f7fe ffbe 	bl	8002ac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <xTaskRemoveFromEventList+0xbc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d905      	bls.n	8003b64 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <xTaskRemoveFromEventList+0xc0>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e001      	b.n	8003b68 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b68:	697b      	ldr	r3, [r7, #20]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200005a8 	.word	0x200005a8
 8003b78:	20000588 	.word	0x20000588
 8003b7c:	20000484 	.word	0x20000484
 8003b80:	20000540 	.word	0x20000540
 8003b84:	20000480 	.word	0x20000480
 8003b88:	20000594 	.word	0x20000594

08003b8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <vTaskInternalSetTimeOutState+0x24>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <vTaskInternalSetTimeOutState+0x28>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	605a      	str	r2, [r3, #4]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	20000598 	.word	0x20000598
 8003bb4:	20000584 	.word	0x20000584

08003bb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <xTaskCheckForTimeOut+0x24>
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	e7fe      	b.n	8003bda <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <xTaskCheckForTimeOut+0x3e>
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e7fe      	b.n	8003bf4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003bf6:	f000 fc81 	bl	80044fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <xTaskCheckForTimeOut+0xb8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d102      	bne.n	8003c1a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e023      	b.n	8003c62 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <xTaskCheckForTimeOut+0xbc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d007      	beq.n	8003c36 <xTaskCheckForTimeOut+0x7e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e015      	b.n	8003c62 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d20b      	bcs.n	8003c58 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff9d 	bl	8003b8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e004      	b.n	8003c62 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c62:	f000 fc79 	bl	8004558 <vPortExitCritical>

	return xReturn;
 8003c66:	69fb      	ldr	r3, [r7, #28]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000584 	.word	0x20000584
 8003c74:	20000598 	.word	0x20000598

08003c78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <vTaskMissedYield+0x14>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20000594 	.word	0x20000594

08003c90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c98:	f000 f852 	bl	8003d40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <prvIdleTask+0x28>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d9f9      	bls.n	8003c98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <prvIdleTask+0x2c>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cb4:	e7f0      	b.n	8003c98 <prvIdleTask+0x8>
 8003cb6:	bf00      	nop
 8003cb8:	20000484 	.word	0x20000484
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	e00c      	b.n	8003ce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <prvInitialiseTaskLists+0x60>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fec6 	bl	8002a6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d9ef      	bls.n	8003ccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <prvInitialiseTaskLists+0x64>)
 8003cee:	f7fe febd 	bl	8002a6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cf2:	480d      	ldr	r0, [pc, #52]	; (8003d28 <prvInitialiseTaskLists+0x68>)
 8003cf4:	f7fe feba 	bl	8002a6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <prvInitialiseTaskLists+0x6c>)
 8003cfa:	f7fe feb7 	bl	8002a6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <prvInitialiseTaskLists+0x70>)
 8003d00:	f7fe feb4 	bl	8002a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d04:	480b      	ldr	r0, [pc, #44]	; (8003d34 <prvInitialiseTaskLists+0x74>)
 8003d06:	f7fe feb1 	bl	8002a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <prvInitialiseTaskLists+0x78>)
 8003d0c:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <prvInitialiseTaskLists+0x64>)
 8003d0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <prvInitialiseTaskLists+0x7c>)
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <prvInitialiseTaskLists+0x68>)
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000484 	.word	0x20000484
 8003d24:	20000510 	.word	0x20000510
 8003d28:	20000524 	.word	0x20000524
 8003d2c:	20000540 	.word	0x20000540
 8003d30:	20000554 	.word	0x20000554
 8003d34:	2000056c 	.word	0x2000056c
 8003d38:	20000538 	.word	0x20000538
 8003d3c:	2000053c 	.word	0x2000053c

08003d40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d46:	e019      	b.n	8003d7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d48:	f000 fbd8 	bl	80044fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <prvCheckTasksWaitingTermination+0x4c>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe ff11 	bl	8002b80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <prvCheckTasksWaitingTermination+0x50>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <prvCheckTasksWaitingTermination+0x50>)
 8003d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d72:	f000 fbf1 	bl	8004558 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f80e 	bl	8003d98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e1      	bne.n	8003d48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000554 	.word	0x20000554
 8003d90:	20000580 	.word	0x20000580
 8003d94:	20000568 	.word	0x20000568

08003d98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d108      	bne.n	8003dbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fd80 	bl	80048b4 <vPortFree>
				vPortFree( pxTCB );
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fd7d 	bl	80048b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dba:	e017      	b.n	8003dec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d103      	bne.n	8003dce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fd74 	bl	80048b4 <vPortFree>
	}
 8003dcc:	e00e      	b.n	8003dec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d009      	beq.n	8003dec <prvDeleteTCB+0x54>
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e7fe      	b.n	8003dea <prvDeleteTCB+0x52>
	}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <prvResetNextTaskUnblockTime+0x38>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <prvResetNextTaskUnblockTime+0x3c>)
 8003e06:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e0c:	e008      	b.n	8003e20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <prvResetNextTaskUnblockTime+0x38>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <prvResetNextTaskUnblockTime+0x3c>)
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000538 	.word	0x20000538
 8003e30:	200005a0 	.word	0x200005a0

08003e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <xTaskGetSchedulerState+0x34>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e42:	2301      	movs	r3, #1
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	e008      	b.n	8003e5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e48:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <xTaskGetSchedulerState+0x38>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e50:	2302      	movs	r3, #2
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	e001      	b.n	8003e5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e5a:	687b      	ldr	r3, [r7, #4]
	}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	2000058c 	.word	0x2000058c
 8003e6c:	200005a8 	.word	0x200005a8

08003e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d06c      	beq.n	8003f60 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <xTaskPriorityDisinherit+0xfc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d009      	beq.n	8003ea4 <xTaskPriorityDisinherit+0x34>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e7fe      	b.n	8003ea2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <xTaskPriorityDisinherit+0x50>
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	e7fe      	b.n	8003ebe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	1e5a      	subs	r2, r3, #1
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d044      	beq.n	8003f60 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d140      	bne.n	8003f60 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fe4c 	bl	8002b80 <uxListRemove>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d115      	bne.n	8003f1a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef2:	491f      	ldr	r1, [pc, #124]	; (8003f70 <xTaskPriorityDisinherit+0x100>)
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xTaskPriorityDisinherit+0xaa>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	2201      	movs	r2, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <xTaskPriorityDisinherit+0x104>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4013      	ands	r3, r2
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <xTaskPriorityDisinherit+0x104>)
 8003f18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	f1c3 0207 	rsb	r2, r3, #7
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <xTaskPriorityDisinherit+0x104>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <xTaskPriorityDisinherit+0x104>)
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <xTaskPriorityDisinherit+0x100>)
 8003f4e:	441a      	add	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f7fe fdb5 	bl	8002ac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f60:	697b      	ldr	r3, [r7, #20]
	}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000480 	.word	0x20000480
 8003f70:	20000484 	.word	0x20000484
 8003f74:	20000588 	.word	0x20000588

08003f78 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003f86:	f000 fab9 	bl	80044fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003f8a:	4b26      	ldr	r3, [pc, #152]	; (8004024 <xTaskNotifyWait+0xac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d01a      	beq.n	8003fce <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <xTaskNotifyWait+0xac>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	43d2      	mvns	r2, r2
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <xTaskNotifyWait+0xac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	6838      	ldr	r0, [r7, #0]
 8003fba:	f000 f90f 	bl	80041dc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <xTaskNotifyWait+0xb0>)
 8003fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003fce:	f000 fac3 	bl	8004558 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003fd2:	f000 fa93 	bl	80044fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <xTaskNotifyWait+0xac>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <xTaskNotifyWait+0xac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d002      	beq.n	8003ffa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e008      	b.n	800400c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <xTaskNotifyWait+0xac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	43d2      	mvns	r2, r2
 8004004:	400a      	ands	r2, r1
 8004006:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <xTaskNotifyWait+0xac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8004016:	f000 fa9f 	bl	8004558 <vPortExitCritical>

		return xReturn;
 800401a:	697b      	ldr	r3, [r7, #20]
	}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000480 	.word	0x20000480
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800403c:	2301      	movs	r3, #1
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <xTaskGenericNotifyFromISR+0x2e>
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	e7fe      	b.n	8004058 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800405a:	f000 fb2b 	bl	80046b4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004062:	f3ef 8211 	mrs	r2, BASEPRI
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	623a      	str	r2, [r7, #32]
 8004078:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800407a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	2202      	movs	r2, #2
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d829      	bhi.n	80040f8 <xTaskGenericNotifyFromISR+0xcc>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <xTaskGenericNotifyFromISR+0x80>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	08004117 	.word	0x08004117
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040cf 	.word	0x080040cf
 80040b8:	080040db 	.word	0x080040db
 80040bc:	080040e3 	.word	0x080040e3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80040cc:	e026      	b.n	800411c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80040d8:	e020      	b.n	800411c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80040e0:	e01c      	b.n	800411c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80040e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d003      	beq.n	80040f2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80040f0:	e014      	b.n	800411c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80040f6:	e011      	b.n	800411c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d00b      	beq.n	800411a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e7fe      	b.n	8004114 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800411a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800411c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004120:	2b01      	cmp	r3, #1
 8004122:	d144      	bne.n	80041ae <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <xTaskGenericNotifyFromISR+0x114>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e7fe      	b.n	800413e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004140:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <xTaskGenericNotifyFromISR+0x198>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11c      	bne.n	8004182 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe fd17 	bl	8002b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	2201      	movs	r2, #1
 8004158:	409a      	lsls	r2, r3
 800415a:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <xTaskGenericNotifyFromISR+0x19c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4313      	orrs	r3, r2
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <xTaskGenericNotifyFromISR+0x19c>)
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4a16      	ldr	r2, [pc, #88]	; (80041cc <xTaskGenericNotifyFromISR+0x1a0>)
 8004172:	441a      	add	r2, r3
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f7fe fca3 	bl	8002ac6 <vListInsertEnd>
 8004180:	e005      	b.n	800418e <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	3318      	adds	r3, #24
 8004186:	4619      	mov	r1, r3
 8004188:	4811      	ldr	r0, [pc, #68]	; (80041d0 <xTaskGenericNotifyFromISR+0x1a4>)
 800418a:	f7fe fc9c 	bl	8002ac6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <xTaskGenericNotifyFromISR+0x1a8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800419c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80041a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <xTaskGenericNotifyFromISR+0x1ac>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3738      	adds	r7, #56	; 0x38
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200005a8 	.word	0x200005a8
 80041c8:	20000588 	.word	0x20000588
 80041cc:	20000484 	.word	0x20000484
 80041d0:	20000540 	.word	0x20000540
 80041d4:	20000480 	.word	0x20000480
 80041d8:	20000594 	.word	0x20000594

080041dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041e6:	4b29      	ldr	r3, [pc, #164]	; (800428c <prvAddCurrentTaskToDelayedList+0xb0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ec:	4b28      	ldr	r3, [pc, #160]	; (8004290 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fcc4 	bl	8002b80 <uxListRemove>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	2201      	movs	r2, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43da      	mvns	r2, r3
 800420c:	4b21      	ldr	r3, [pc, #132]	; (8004294 <prvAddCurrentTaskToDelayedList+0xb8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4013      	ands	r3, r2
 8004212:	4a20      	ldr	r2, [pc, #128]	; (8004294 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004214:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d10a      	bne.n	8004234 <prvAddCurrentTaskToDelayedList+0x58>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	481a      	ldr	r0, [pc, #104]	; (8004298 <prvAddCurrentTaskToDelayedList+0xbc>)
 800422e:	f7fe fc4a 	bl	8002ac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004232:	e026      	b.n	8004282 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <prvAddCurrentTaskToDelayedList+0xb4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d209      	bcs.n	8004260 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <prvAddCurrentTaskToDelayedList+0xc0>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3304      	adds	r3, #4
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f7fe fc58 	bl	8002b0e <vListInsert>
}
 800425e:	e010      	b.n	8004282 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fe fc4e 	bl	8002b0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	429a      	cmp	r2, r3
 800427a:	d202      	bcs.n	8004282 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800427c:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6013      	str	r3, [r2, #0]
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000584 	.word	0x20000584
 8004290:	20000480 	.word	0x20000480
 8004294:	20000588 	.word	0x20000588
 8004298:	2000056c 	.word	0x2000056c
 800429c:	2000053c 	.word	0x2000053c
 80042a0:	20000538 	.word	0x20000538
 80042a4:	200005a0 	.word	0x200005a0

080042a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3b04      	subs	r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b04      	subs	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3b04      	subs	r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042d8:	4a0c      	ldr	r2, [pc, #48]	; (800430c <pxPortInitialiseStack+0x64>)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3b14      	subs	r3, #20
 80042e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3b04      	subs	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f06f 0202 	mvn.w	r2, #2
 80042f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3b20      	subs	r3, #32
 80042fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042fe:	68fb      	ldr	r3, [r7, #12]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	08004311 	.word	0x08004311

08004310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <prvTaskExitError+0x50>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d009      	beq.n	8004338 <prvTaskExitError+0x28>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	e7fe      	b.n	8004336 <prvTaskExitError+0x26>
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800434a:	bf00      	nop
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0fc      	beq.n	800434c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	200000f4 	.word	0x200000f4
	...

08004370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <pxCurrentTCBConst2>)
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	6808      	ldr	r0, [r1, #0]
 8004376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	f380 8809 	msr	PSP, r0
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8811 	msr	BASEPRI, r0
 800438a:	4770      	bx	lr
 800438c:	f3af 8000 	nop.w

08004390 <pxCurrentTCBConst2>:
 8004390:	20000480 	.word	0x20000480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004398:	4808      	ldr	r0, [pc, #32]	; (80043bc <prvPortStartFirstTask+0x24>)
 800439a:	6800      	ldr	r0, [r0, #0]
 800439c:	6800      	ldr	r0, [r0, #0]
 800439e:	f380 8808 	msr	MSP, r0
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f380 8814 	msr	CONTROL, r0
 80043aa:	b662      	cpsie	i
 80043ac:	b661      	cpsie	f
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	df00      	svc	0
 80043b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043ba:	bf00      	nop
 80043bc:	e000ed08 	.word	0xe000ed08

080043c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043c6:	4b44      	ldr	r3, [pc, #272]	; (80044d8 <xPortStartScheduler+0x118>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a44      	ldr	r2, [pc, #272]	; (80044dc <xPortStartScheduler+0x11c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d109      	bne.n	80043e4 <xPortStartScheduler+0x24>
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	e7fe      	b.n	80043e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043e4:	4b3c      	ldr	r3, [pc, #240]	; (80044d8 <xPortStartScheduler+0x118>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a3d      	ldr	r2, [pc, #244]	; (80044e0 <xPortStartScheduler+0x120>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d109      	bne.n	8004402 <xPortStartScheduler+0x42>
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e7fe      	b.n	8004400 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004402:	4b38      	ldr	r3, [pc, #224]	; (80044e4 <xPortStartScheduler+0x124>)
 8004404:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	22ff      	movs	r2, #255	; 0xff
 8004412:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <xPortStartScheduler+0x128>)
 8004428:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800442a:	4b30      	ldr	r3, [pc, #192]	; (80044ec <xPortStartScheduler+0x12c>)
 800442c:	2207      	movs	r2, #7
 800442e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004430:	e009      	b.n	8004446 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004432:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <xPortStartScheduler+0x12c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3b01      	subs	r3, #1
 8004438:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <xPortStartScheduler+0x12c>)
 800443a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b80      	cmp	r3, #128	; 0x80
 8004450:	d0ef      	beq.n	8004432 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004452:	4b26      	ldr	r3, [pc, #152]	; (80044ec <xPortStartScheduler+0x12c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f1c3 0307 	rsb	r3, r3, #7
 800445a:	2b04      	cmp	r3, #4
 800445c:	d009      	beq.n	8004472 <xPortStartScheduler+0xb2>
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	e7fe      	b.n	8004470 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <xPortStartScheduler+0x12c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <xPortStartScheduler+0x12c>)
 800447a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <xPortStartScheduler+0x12c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004484:	4a19      	ldr	r2, [pc, #100]	; (80044ec <xPortStartScheduler+0x12c>)
 8004486:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004490:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <xPortStartScheduler+0x130>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <xPortStartScheduler+0x130>)
 8004496:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800449a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <xPortStartScheduler+0x130>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a13      	ldr	r2, [pc, #76]	; (80044f0 <xPortStartScheduler+0x130>)
 80044a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044a8:	f000 f8d6 	bl	8004658 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <xPortStartScheduler+0x134>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044b2:	f000 f8f5 	bl	80046a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <xPortStartScheduler+0x138>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a0f      	ldr	r2, [pc, #60]	; (80044f8 <xPortStartScheduler+0x138>)
 80044bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044c2:	f7ff ff69 	bl	8004398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044c6:	f7ff fa81 	bl	80039cc <vTaskSwitchContext>
	prvTaskExitError();
 80044ca:	f7ff ff21 	bl	8004310 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	e000ed00 	.word	0xe000ed00
 80044dc:	410fc271 	.word	0x410fc271
 80044e0:	410fc270 	.word	0x410fc270
 80044e4:	e000e400 	.word	0xe000e400
 80044e8:	200005ac 	.word	0x200005ac
 80044ec:	200005b0 	.word	0x200005b0
 80044f0:	e000ed20 	.word	0xe000ed20
 80044f4:	200000f4 	.word	0x200000f4
 80044f8:	e000ef34 	.word	0xe000ef34

080044fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <vPortEnterCritical+0x54>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3301      	adds	r3, #1
 800451a:	4a0d      	ldr	r2, [pc, #52]	; (8004550 <vPortEnterCritical+0x54>)
 800451c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <vPortEnterCritical+0x54>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10e      	bne.n	8004544 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <vPortEnterCritical+0x58>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <vPortEnterCritical+0x48>
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	e7fe      	b.n	8004542 <vPortEnterCritical+0x46>
	}
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	200000f4 	.word	0x200000f4
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800455e:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <vPortExitCritical+0x4c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <vPortExitCritical+0x22>
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	e7fe      	b.n	8004578 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <vPortExitCritical+0x4c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3b01      	subs	r3, #1
 8004580:	4a08      	ldr	r2, [pc, #32]	; (80045a4 <vPortExitCritical+0x4c>)
 8004582:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <vPortExitCritical+0x4c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <vPortExitCritical+0x3e>
 800458c:	2300      	movs	r3, #0
 800458e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	200000f4 	.word	0x200000f4
	...

080045b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045b0:	f3ef 8009 	mrs	r0, PSP
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <pxCurrentTCBConst>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	f01e 0f10 	tst.w	lr, #16
 80045c0:	bf08      	it	eq
 80045c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ca:	6010      	str	r0, [r2, #0]
 80045cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045d4:	f380 8811 	msr	BASEPRI, r0
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f7ff f9f4 	bl	80039cc <vTaskSwitchContext>
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	f380 8811 	msr	BASEPRI, r0
 80045ec:	bc09      	pop	{r0, r3}
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	6808      	ldr	r0, [r1, #0]
 80045f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f6:	f01e 0f10 	tst.w	lr, #16
 80045fa:	bf08      	it	eq
 80045fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004600:	f380 8809 	msr	PSP, r0
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	f3af 8000 	nop.w

08004610 <pxCurrentTCBConst>:
 8004610:	20000480 	.word	0x20000480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004630:	f7ff f914 	bl	800385c <xTaskIncrementTick>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <xPortSysTickHandler+0x3c>)
 800463c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	2300      	movs	r3, #0
 8004644:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <vPortSetupTimerInterrupt+0x34>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <vPortSetupTimerInterrupt+0x38>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <vPortSetupTimerInterrupt+0x3c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <vPortSetupTimerInterrupt+0x40>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	099b      	lsrs	r3, r3, #6
 8004674:	4a09      	ldr	r2, [pc, #36]	; (800469c <vPortSetupTimerInterrupt+0x44>)
 8004676:	3b01      	subs	r3, #1
 8004678:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800467a:	4b04      	ldr	r3, [pc, #16]	; (800468c <vPortSetupTimerInterrupt+0x34>)
 800467c:	2207      	movs	r2, #7
 800467e:	601a      	str	r2, [r3, #0]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e010 	.word	0xe000e010
 8004690:	e000e018 	.word	0xe000e018
 8004694:	200000e8 	.word	0x200000e8
 8004698:	10624dd3 	.word	0x10624dd3
 800469c:	e000e014 	.word	0xe000e014

080046a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046b0 <vPortEnableVFP+0x10>
 80046a4:	6801      	ldr	r1, [r0, #0]
 80046a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046aa:	6001      	str	r1, [r0, #0]
 80046ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046ae:	bf00      	nop
 80046b0:	e000ed88 	.word	0xe000ed88

080046b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046ba:	f3ef 8305 	mrs	r3, IPSR
 80046be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b0f      	cmp	r3, #15
 80046c4:	d913      	bls.n	80046ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <vPortValidateInterruptPriority+0x6c>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046d0:	4b14      	ldr	r3, [pc, #80]	; (8004724 <vPortValidateInterruptPriority+0x70>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	7afa      	ldrb	r2, [r7, #11]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d209      	bcs.n	80046ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	e7fe      	b.n	80046ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <vPortValidateInterruptPriority+0x74>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <vPortValidateInterruptPriority+0x78>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d909      	bls.n	8004712 <vPortValidateInterruptPriority+0x5e>
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	e7fe      	b.n	8004710 <vPortValidateInterruptPriority+0x5c>
	}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e000e3f0 	.word	0xe000e3f0
 8004724:	200005ac 	.word	0x200005ac
 8004728:	e000ed0c 	.word	0xe000ed0c
 800472c:	200005b0 	.word	0x200005b0

08004730 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004738:	2300      	movs	r3, #0
 800473a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800473c:	f7fe ffe4 	bl	8003708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004740:	4b57      	ldr	r3, [pc, #348]	; (80048a0 <pvPortMalloc+0x170>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004748:	f000 f90c 	bl	8004964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800474c:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <pvPortMalloc+0x174>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	f040 808c 	bne.w	8004872 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01c      	beq.n	800479a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004760:	2208      	movs	r2, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	2b00      	cmp	r3, #0
 8004770:	d013      	beq.n	800479a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f023 0307 	bic.w	r3, r3, #7
 8004778:	3308      	adds	r3, #8
 800477a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <pvPortMalloc+0x6a>
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e7fe      	b.n	8004798 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d068      	beq.n	8004872 <pvPortMalloc+0x142>
 80047a0:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <pvPortMalloc+0x178>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d863      	bhi.n	8004872 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047aa:	4b40      	ldr	r3, [pc, #256]	; (80048ac <pvPortMalloc+0x17c>)
 80047ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047ae:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <pvPortMalloc+0x17c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047b4:	e004      	b.n	80047c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d903      	bls.n	80047d2 <pvPortMalloc+0xa2>
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f1      	bne.n	80047b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047d2:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <pvPortMalloc+0x170>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d8:	429a      	cmp	r2, r3
 80047da:	d04a      	beq.n	8004872 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2208      	movs	r2, #8
 80047e2:	4413      	add	r3, r2
 80047e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	1ad2      	subs	r2, r2, r3
 80047f6:	2308      	movs	r3, #8
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d91e      	bls.n	800483c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4413      	add	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <pvPortMalloc+0xf4>
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e7fe      	b.n	8004822 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004836:	69b8      	ldr	r0, [r7, #24]
 8004838:	f000 f8f6 	bl	8004a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <pvPortMalloc+0x178>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <pvPortMalloc+0x178>)
 8004848:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <pvPortMalloc+0x178>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <pvPortMalloc+0x180>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d203      	bcs.n	800485e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <pvPortMalloc+0x178>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <pvPortMalloc+0x180>)
 800485c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <pvPortMalloc+0x174>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	431a      	orrs	r2, r3
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004872:	f7fe ff57 	bl	8003724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <pvPortMalloc+0x164>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e7fe      	b.n	8004892 <pvPortMalloc+0x162>
	return pvReturn;
 8004894:	69fb      	ldr	r3, [r7, #28]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3728      	adds	r7, #40	; 0x28
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200041bc 	.word	0x200041bc
 80048a4:	200041c8 	.word	0x200041c8
 80048a8:	200041c0 	.word	0x200041c0
 80048ac:	200041b4 	.word	0x200041b4
 80048b0:	200041c4 	.word	0x200041c4

080048b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d046      	beq.n	8004954 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048c6:	2308      	movs	r3, #8
 80048c8:	425b      	negs	r3, r3
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4413      	add	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	4b20      	ldr	r3, [pc, #128]	; (800495c <vPortFree+0xa8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <vPortFree+0x42>
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e7fe      	b.n	80048f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <vPortFree+0x5e>
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	e7fe      	b.n	8004910 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <vPortFree+0xa8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d019      	beq.n	8004954 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d115      	bne.n	8004954 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <vPortFree+0xa8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	43db      	mvns	r3, r3
 8004932:	401a      	ands	r2, r3
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004938:	f7fe fee6 	bl	8003708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <vPortFree+0xac>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4413      	add	r3, r2
 8004946:	4a06      	ldr	r2, [pc, #24]	; (8004960 <vPortFree+0xac>)
 8004948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800494a:	6938      	ldr	r0, [r7, #16]
 800494c:	f000 f86c 	bl	8004a28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004950:	f7fe fee8 	bl	8003724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004954:	bf00      	nop
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	200041c8 	.word	0x200041c8
 8004960:	200041c0 	.word	0x200041c0

08004964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800496a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800496e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004970:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <prvHeapInit+0xac>)
 8004972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3307      	adds	r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <prvHeapInit+0xac>)
 8004994:	4413      	add	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <prvHeapInit+0xb0>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <prvHeapInit+0xb0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	4413      	add	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049b0:	2208      	movs	r2, #8
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <prvHeapInit+0xb4>)
 80049c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <prvHeapInit+0xb4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <prvHeapInit+0xb4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	1ad2      	subs	r2, r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <prvHeapInit+0xb4>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <prvHeapInit+0xb8>)
 80049f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <prvHeapInit+0xbc>)
 80049fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <prvHeapInit+0xc0>)
 80049fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a02:	601a      	str	r2, [r3, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	200005b4 	.word	0x200005b4
 8004a14:	200041b4 	.word	0x200041b4
 8004a18:	200041bc 	.word	0x200041bc
 8004a1c:	200041c4 	.word	0x200041c4
 8004a20:	200041c0 	.word	0x200041c0
 8004a24:	200041c8 	.word	0x200041c8

08004a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a30:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <prvInsertBlockIntoFreeList+0xac>)
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e002      	b.n	8004a3c <prvInsertBlockIntoFreeList+0x14>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d8f7      	bhi.n	8004a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4413      	add	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d108      	bne.n	8004a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	441a      	add	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	441a      	add	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d118      	bne.n	8004ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d00d      	beq.n	8004aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e008      	b.n	8004ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e003      	b.n	8004ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d002      	beq.n	8004ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	200041b4 	.word	0x200041b4
 8004ad8:	200041bc 	.word	0x200041bc

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4e0d      	ldr	r6, [pc, #52]	; (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1ba4      	subs	r4, r4, r6
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2500      	movs	r5, #0
 8004ae8:	42a5      	cmp	r5, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4e0b      	ldr	r6, [pc, #44]	; (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 f82c 	bl	8004b4c <_init>
 8004af4:	1ba4      	subs	r4, r4, r6
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2500      	movs	r5, #0
 8004afa:	42a5      	cmp	r5, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b04:	4798      	blx	r3
 8004b06:	3501      	adds	r5, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b0e:	4798      	blx	r3
 8004b10:	3501      	adds	r5, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	08004bf0 	.word	0x08004bf0
 8004b18:	08004bf0 	.word	0x08004bf0
 8004b1c:	08004bf0 	.word	0x08004bf0
 8004b20:	08004bf4 	.word	0x08004bf4

08004b24 <memcpy>:
 8004b24:	b510      	push	{r4, lr}
 8004b26:	1e43      	subs	r3, r0, #1
 8004b28:	440a      	add	r2, r1
 8004b2a:	4291      	cmp	r1, r2
 8004b2c:	d100      	bne.n	8004b30 <memcpy+0xc>
 8004b2e:	bd10      	pop	{r4, pc}
 8004b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b38:	e7f7      	b.n	8004b2a <memcpy+0x6>

08004b3a <memset>:
 8004b3a:	4402      	add	r2, r0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d100      	bne.n	8004b44 <memset+0xa>
 8004b42:	4770      	bx	lr
 8004b44:	f803 1b01 	strb.w	r1, [r3], #1
 8004b48:	e7f9      	b.n	8004b3e <memset+0x4>
	...

08004b4c <_init>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
